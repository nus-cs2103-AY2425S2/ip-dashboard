[{"path":"AI.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"# AI.md","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"## [2025-01-24] Learned Logging with AI Assistance","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"I used a generative AI tool to learn how to do more robust logging in Java.  ","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"Previously, I relied on e.printStackTrace(), but IntelliJ IDEA warning threw a","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"warning:","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"```text","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"Call to \u0027printStackTrace()\u0027 should probably be replaced with more robust logging","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"```","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"ChatGPT showed me how to use `java.util.logging` (`Logger`, `Level`, etc.)","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"instead.","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":14}},{"path":"CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Contributors","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":" Display                                                      |        Name         |            Github Profile             |                      Homepage                      ","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"--------------------------------------------------------------|:-------------------:|:-------------------------------------:|:--------------------------------------------------:","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":" ![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) |     Jeffry Lum      |  [Github](https://github.com/j-lum/)  |        [Homepage](https://se.kasugano.moe)         ","lastModifiedDate":"2019-08-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":" ![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100)  | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/) ","lastModifiedDate":"2019-08-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"# I would like to join this list. How can I help the project","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/).","lastModifiedDate":"2019-07-29","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":2,"-":8}},{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"# Dusk project template","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"instructions on how to use it.","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"   first)","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"1. After that, locate the `src/main/java/dusk.Dusk.java` file, right-click it, and choose `Run dusk.Dusk.main()` (if the","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"   code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"   like the below as the output:","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"   ____________________________________________________________","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"   Hello! I\u0027m dusk.Dusk","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"   What can I do for you?","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"   ____________________________________________________________","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"   Bye. Hope to see you again soon!","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"   ____________________________________________________________","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle)","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"expect to find Java files.","lastModifiedDate":"2025-01-30","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":19,"-":14}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"//    id \u0027checkstyle\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"//    uncomment above after implementing checkstyle","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    mainClass.set(\"dusk.Dusk\")","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    archiveBaseName \u003d \"dusk\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    archiveVersion \u003d \"0.1.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":22,"-":39}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"# dusk.Dusk User Guide","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"// Update the title above to match the actual product name","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"// Product screenshot goes here","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"// Product intro goes here","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Adding deadlines","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"// Describe the action and its outcome.","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"// Give examples of usage","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"Example: `keyword (optional arguments)`","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"// A description of the expected outcome goes here","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"## Feature ABC","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Feature XYZ","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"// Feature details","lastModifiedDate":"2024-01-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":1,"-":28}},{"path":"src/main/java/dusk/Dusk.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.command.Command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.command.Parser;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.CompletionException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.ExecutionException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import java.util.logging.Level;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" * The Dusk application is responsible for initializing and managing","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":" * user interactions, commands, and task storage.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"public class Dusk {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * Common greeting messages displayed upon application launch.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    public static final String[] GREETING_MESSAGES \u003d {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"            \"Hello! I\u0027m Dusk!\",","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"            \"Anything you want me to do for you? :D\"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    };","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * Farewell message displayed when the user terminates the application.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    public static final String FAREWELL_MESSAGE \u003d \"See ya! Hope to see you again soon! :3\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * Logger used throughout the Dusk application.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(Dusk.class.getName());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"     * Provides task-related storage, including loading and saving tasks asynchronously.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"    private static final Storage STORAGE \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     * Maintains the current list of tasks.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"    private static TaskList taskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a new Dusk instance and attempts to load tasks from storage.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    public Dusk() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        loadTasksFromStorage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     * Main entry point for the Dusk application.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     * @param args command-line arguments (not used in this application)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        new Dusk();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        runApplication();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"     * Starts the Dusk application loop. This method displays greeting messages,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"     * continues reading user input until \"bye\" is entered, and then prints a","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     * farewell message before shutting down.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"    public static void runApplication() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        try (ConsoleIO consoleIO \u003d new ConsoleIO(System.in, System.out)) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(GREETING_MESSAGES);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"            String input;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"            while ((input \u003d consoleIO.readLine()) !\u003d null \u0026\u0026 !\"bye\".equalsIgnoreCase(input)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"                try {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"                    Command command \u003d Parser.parse(consoleIO, STORAGE, taskList, input);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"                    command.execute();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"                } catch (Exception e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"                    consoleIO.print(\"\u003c!\u003e \" + e.getMessage());","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(FAREWELL_MESSAGE);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"            LOGGER.log(Level.SEVERE, \"An error occurred while handling I/O operations using ConsoleIO.\", e);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"        } finally {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"            STORAGE.shutdownExecutor();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"     * Loads tasks asynchronously from STORAGE into a TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"     * If the loading process results in an error, the exception is logged.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"    private void loadTasksFromStorage() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"        CompletableFuture\u003cTaskList\u003e loadFuture \u003d STORAGE.loadTasksAsync();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"            taskList \u003d loadFuture.get();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"        } catch (InterruptedException | ExecutionException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"            LOGGER.log(Level.SEVERE, \"Error loading tasks asynchronously.\", e);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"            Thread.currentThread().interrupt();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"        } catch (CompletionException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"            LOGGER.log(Level.SEVERE, e.getMessage());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":107}},{"path":"src/main/java/dusk/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.MarkTaskException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" * Represents an abstract command in the application.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"public abstract class Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     * Executes the command. Any exception arising from user input,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * I/O operations, or task list operations will be thrown.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException     if there is an issue with user input","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException        if there is an I/O issue","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException  if there is a task list operation issue","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException  if there is a task marking/unmarking issue","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    public abstract void execute() throws InputException, IOException, TaskListException, MarkTaskException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * Asynchronously saves the tasks to storage and prints any error message to the console.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage   the storage object handling file storage","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks     the list of tasks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO the console I/O object for printing","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    protected void saveAsync(Storage storage, TaskList tasks, ConsoleIO consoleIO) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        CompletableFuture\u003cVoid\u003e future \u003d storage.saveTasksAsync(tasks)","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"                .exceptionally(exception -\u003e {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"                    try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"                        consoleIO.print(\"\u003c!\u003e Error saving tasks asynchronously: \" + exception.getMessage());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"                    } catch (IOException ioException) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"                        throw new RuntimeException(ioException);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"                    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"                    return null;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"                });","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        future.join();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":47}},{"path":"src/main/java/dusk/command/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Enumerates all supported command types in the application.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"public enum CommandType {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"    LIST,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"    MARK,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"    UNMARK,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"    DELETE,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"    TODO,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"    DEADLINE,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"    EVENT;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"     * Converts a string to its corresponding CommandType enum,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"     * or returns null if not recognized.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * @param command the input command string","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     * @return corresponding CommandType or null if not found","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    public static CommandType fromString(String command) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"            return CommandType.valueOf(command.toUpperCase());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"            return null;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":29}},{"path":"src/main/java/dusk/command/CreateDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Deadline;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Creates a new deadline task with a specified description and date/time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class CreateDeadlineCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for creating a deadline task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks       the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO   the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage     the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the new task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * @param deadline    the date/time by which the task is due","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    public CreateDeadlineCommand(TaskList tasks, ConsoleIO consoleIO,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"                                 Storage storage, String description, LocalDateTime deadline) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, InputException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"A \u0027DEADLINE\u0027 command must include a description.\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        Deadline newTask \u003d new Deadline(description, deadline);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO.print(","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"                \"  \" + newTask,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        saveAsync(storage, tasks, consoleIO);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":57}},{"path":"src/main/java/dusk/command/CreateEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Event;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Creates a new event task with a specified time range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class CreateEventCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime startTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime endTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for creating an event task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks       the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO   the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage     the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     * @param startTime   the start date/time of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * @param endTime     the end date/time of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    public CreateEventCommand(TaskList tasks, ConsoleIO consoleIO, Storage storage,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"                              String description, LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, InputException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"An \u0027EVENT\u0027 command must include a description.\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        Event newTask \u003d new Event(description, startTime, endTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO.print(","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"                \"  \" + newTask,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"        saveAsync(storage, tasks, consoleIO);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":60}},{"path":"src/main/java/dusk/command/CreateTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Todo;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":" * Creates a new todo task with a specified description.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"public class CreateTodoCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for creating a todo task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks       the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO   the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage     the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the todo","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    public CreateTodoCommand(TaskList tasks, ConsoleIO consoleIO, Storage storage, String description) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, InputException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"A \u0027TODO\u0027 command must include a description.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        Todo newTask \u003d new Todo(description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO.print(","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"                \"  \" + newTask,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        saveAsync(storage, tasks, consoleIO);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":51}},{"path":"src/main/java/dusk/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Deletes the task at the specified index from the task list.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for deleting a task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks       the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO   the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage     the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description containing the index of the task to delete","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    public DeleteCommand(TaskList tasks, ConsoleIO consoleIO, Storage storage, String description) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, InputException, TaskListException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"        int taskIndex;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"            taskIndex \u003d Integer.parseInt(description) - 1;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"Task number cannot be empty or invalid for a \u0027DELETE\u0027 command!\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        Task removedTask \u003d tasks.removeTask(taskIndex);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO.print(","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"                \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"                \"  \" + removedTask,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        saveAsync(storage, tasks, consoleIO);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":54}},{"path":"src/main/java/dusk/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Task;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":" * Represents a command that searches the task list for tasks whose","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * descriptions contain a given keyword.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final String keyword;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a FindCommand.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks     the task list to search through","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO the console I/O for user interaction","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * @param keyword   the keyword to search for in task descriptions","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    public FindCommand(TaskList tasks, ConsoleIO consoleIO, String keyword) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * Executes the find command: searches for matching tasks and prints them.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException       if an I/O error occurs while printing to the console","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if an error occurs while retrieving tasks","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, TaskListException {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        TaskList matchingTasks \u003d tasks.search(keyword);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(\"No matching tasks found!\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        } else {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"            String header \u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"            String[] messages \u003d new String[matchingTasks.size() + 1];","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"            messages[0] \u003d header;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"                Task task \u003d matchingTasks.getTask(i);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"                messages[i + 1] \u003d (i + 1) + \".\" + task;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(messages);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-14","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":55}},{"path":"src/main/java/dusk/command/InputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Represents an exception that occurs due to invalid user input.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"public class InputException extends Exception {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs an InputException with the specified message.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     * @param message the detail message","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"    public InputException(String message) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"        super(message);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":16}},{"path":"src/main/java/dusk/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Lists tasks in various ways based on the provided arguments","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" * (e.g., tasks on a certain date, tasks within a date range, or all tasks).","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime onDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime fromDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime toDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for listing tasks.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks     the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * @param onDate    date to filter tasks exactly on","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * @param fromDate  start date to filter tasks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     * @param toDate    end date to filter tasks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    public ListCommand(TaskList tasks,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"                       ConsoleIO consoleIO,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"                       LocalDateTime onDate,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"                       LocalDateTime fromDate,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"                       LocalDateTime toDate) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        this.onDate \u003d onDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws IOException, TaskListException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(\"Task list is empty!\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"            return;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        if (onDate !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"            TaskList onList \u003d tasks.getTasksOn(onDate);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"            printTasks(onList, \"Here are the tasks on \" + onDate.toLocalDate() + \":\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"            return;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"        if (fromDate !\u003d null \u0026\u0026 toDate !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"            TaskList withinList \u003d tasks.getTasksWithin(fromDate, toDate);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"            printTasks(withinList,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"                    \"Here are the tasks between \" + fromDate + \" and \" + toDate + \":\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"            return;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"        } else if (fromDate !\u003d null || toDate !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"            throw new TaskListException(\"Both /from and /to must be specified together.\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        printTasks(tasks, \"Here are all the tasks:\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    private void printTasks(TaskList list, String header) throws IOException, TaskListException {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(\"No matching tasks found!\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"            return;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        String[] messages \u003d new String[list.size() + 1];","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"        messages[0] \u003d header;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"            Task task \u003d list.getTask(i);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"            messages[i + 1] \u003d (i + 1) + \".\" + task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO.print(messages);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":84}},{"path":"src/main/java/dusk/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.MarkTaskException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Marks or unmarks the task at the specified index from the task list.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final TaskList tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private final ConsoleIO consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private final boolean markAsDone;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a command for marking or unmarking a task as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks       the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO   the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage     the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the index of the task to mark/unmark","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * @param markAsDone  whether to mark the task as done (true) or not (false)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    public MarkCommand(TaskList tasks, ConsoleIO consoleIO, Storage storage,","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"                       String description, boolean markAsDone) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"        this.consoleIO \u003d consoleIO;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        this.markAsDone \u003d markAsDone;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    public void execute() throws TaskListException, InputException, MarkTaskException, IOException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        int taskIndex;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"            taskIndex \u003d Integer.parseInt(description) - 1;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"                    \"Task number cannot be empty or invalid for a \u0027MARK\u0027/\u0027UNMARK\u0027 command!\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"            );","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        if (markAsDone) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"            tasks.markTask(taskIndex);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"                    \"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"                    \"  \" + tasks.getTask(taskIndex)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"            );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"        } else {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"            tasks.unmarkTask(taskIndex);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"            consoleIO.print(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"                    \"OK! I\u0027ve updated this task to not done:\",","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"                    \"  \" + tasks.getTask(taskIndex)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"            );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        saveAsync(storage, tasks, consoleIO);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":67}},{"path":"src/main/java/dusk/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.time.temporal.ChronoField;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":" * Parses user input strings and returns the corresponding command object.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"public class Parser {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private static final Pattern FLAGS_PATTERN \u003d Pattern.compile(","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"            \"/(?\u003cflag\u003eon|from|to|by)\\\\s*(?\u003cvalue\u003e[^/]+)?\",","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"            Pattern.CASE_INSENSITIVE","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    );","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    private static final Pattern INPUT_PATTERN \u003d Pattern.compile(","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"            \"^(?\u003ccommand\u003elist|mark|unmark|delete|todo|deadline|event)\"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"                    + \"(?:\\\\s+(?\u003cdescription\u003e[^/]+)(?\u003carguments\u003e.*))?$\",","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"            Pattern.CASE_INSENSITIVE","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    );","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"            new DateTimeFormatterBuilder()","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"                    .appendPattern(\"yyyy-MM-dd\")","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"                    .optionalStart()","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"                    .appendLiteral(\u0027 \u0027)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"                    .appendPattern(\"HHmm\")","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"                    .optionalEnd()","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"                    .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"                    .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"                    .toFormatter();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"     * Parses a user input string and constructs the appropriate command object.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"     * @param consoleIO the console I/O","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     * @param storage   the storage object","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks     the current task list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"     * @param input     the raw user input string","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"     * @return the command object corresponding to the user input","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if the command is invalid or incorrectly formatted","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"    public static Command parse(ConsoleIO consoleIO, Storage storage,","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"                                TaskList tasks, String input) throws InputException {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"Input cannot be null or empty.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"        Matcher inputMatcher \u003d INPUT_PATTERN.matcher(input);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        if (!inputMatcher.matches()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"Invalid command: \" + input);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        CommandType commandType \u003d CommandType.fromString(inputMatcher.group(\"command\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        if (commandType \u003d\u003d null) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"Unknown command: \" + input);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        String rawDescription \u003d inputMatcher.group(\"description\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"        String description \u003d (rawDescription \u003d\u003d null) ? \"\" : rawDescription.trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"        String rawArguments \u003d inputMatcher.group(\"arguments\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        String arguments \u003d (rawArguments \u003d\u003d null) ? \"\" : rawArguments.trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"        String onStr \u003d null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        String fromStr \u003d null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"        String toStr \u003d null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"        String byStr \u003d null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"        if (!arguments.isBlank()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"            Matcher flagsMatcher \u003d FLAGS_PATTERN.matcher(arguments);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"            while (flagsMatcher.find()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"                String foundFlag \u003d flagsMatcher.group(\"flag\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"                String foundValue \u003d flagsMatcher.group(\"value\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"                if (foundValue !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"                    foundValue \u003d foundValue.trim();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"                if (foundFlag !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"                    switch (foundFlag.toLowerCase()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"                    case \"on\" -\u003e onStr \u003d foundValue;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"                    case \"from\" -\u003e fromStr \u003d foundValue;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"                    case \"to\" -\u003e toStr \u003d foundValue;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"                    case \"by\" -\u003e byStr \u003d foundValue;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"                    default -\u003e {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"                    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"                    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime onDateTime \u003d parseDateTime(onStr);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime fromDateTime \u003d parseDateTime(fromStr);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime toDateTime \u003d parseDateTime(toStr);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime byDateTime \u003d parseDateTime(byStr);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"        return switch (commandType) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"            case LIST -\u003e new ListCommand(tasks, consoleIO, onDateTime, fromDateTime, toDateTime);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"            case MARK -\u003e new MarkCommand(tasks, consoleIO, storage, description, true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"            case UNMARK -\u003e new MarkCommand(tasks, consoleIO, storage, description, false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"            case DELETE -\u003e new DeleteCommand(tasks, consoleIO, storage, description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"            case TODO -\u003e new CreateTodoCommand(tasks, consoleIO, storage, description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"            case DEADLINE -\u003e new CreateDeadlineCommand(tasks, consoleIO, storage, description, byDateTime);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"            case EVENT -\u003e new CreateEventCommand(tasks, consoleIO, storage, description, fromDateTime, toDateTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"        };","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"    private static LocalDateTime parseDateTime(String dateTimeStr) throws InputException {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"        if (dateTimeStr \u003d\u003d null || dateTimeStr.isBlank()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"            return null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"raw-asparagus"},"content":"            return LocalDateTime.parse(dateTimeStr, DATE_TIME_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"raw-asparagus"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"raw-asparagus"},"content":"            throw new InputException(\"Use \u0027yyyy-MM-dd\u0027 or \u0027yyyy-MM-dd HHmm\u0027. Invalid date/time format: \"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"raw-asparagus"},"content":"                    + dateTimeStr);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":127}},{"path":"src/main/java/dusk/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.*;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.CompletionException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.ExecutorService;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"import java.util.concurrent.Executors;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":" * Manages reading and writing Task data to a persistent storage file, as well","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":" * as providing asynchronous operations for loading and saving.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"public class Storage {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * Formatter to handle date/time information stored in the data file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    private static final DateTimeFormatter STORAGE_FORMATTER \u003d","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd[ HHmm]\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * Path to the file used for persistent storage of tasks.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    private static final Path DATA_FILE \u003d Paths.get(\"data\", \"data.txt\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * Single-threaded executor service for asynchronous operations.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    private static final ExecutorService EXECUTOR_SERVICE \u003d Executors.newSingleThreadExecutor();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the path to the data file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"     * @return the path of the data file","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"    protected Path getDataFile() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"        return DATA_FILE;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     * Asynchronously saves all tasks in the specified TaskList to the storage file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks the TaskList containing tasks to be saved","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     * @return a CompletableFuture representing the completion of the save operation","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"     * @throws CompletionException if a StorageException occurs during the save process","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    public CompletableFuture\u003cVoid\u003e saveTasksAsync(TaskList tasks) throws CompletionException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        return CompletableFuture.runAsync(() -\u003e {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"            try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"                saveTasks(tasks);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"            } catch (StorageException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"                throw new CompletionException(e);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        }, EXECUTOR_SERVICE);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"     * Asynchronously loads all tasks from the storage file into a TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"     * @return a CompletableFuture resolving to the loaded TaskList","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"     * @throws CompletionException if a StorageException occurs during the load process","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"    public CompletableFuture\u003cTaskList\u003e loadTasksAsync() throws CompletionException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        return CompletableFuture.supplyAsync(() -\u003e {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"            try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"                return loadTasks();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"            } catch (StorageException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"                throw new CompletionException(e);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"        }, EXECUTOR_SERVICE);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"     * Saves all tasks from the given TaskList to the data file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"     * @param tasks the TaskList containing tasks to be saved","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"     * @throws StorageException if an I/O error occurs or tasks cannot be saved properly","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"    public void saveTasks(TaskList tasks) throws StorageException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"        Path dataFile \u003d getDataFile();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"            Files.createDirectories(dataFile.getParent());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"            try (BufferedWriter writer \u003d Files.newBufferedWriter(dataFile, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"                for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"                    Task task \u003d tasks.getTask(i);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"                    String line \u003d stringify(task);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"                    writer.write(line);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"                    writer.newLine();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"An error occurred while handling I/O operations.\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IllegalArgumentException | TaskListException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"     * Loads all tasks from the data file into a new TaskList and returns it.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"     * @return a TaskList containing the loaded Task objects","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"     * @throws StorageException if an I/O error occurs during load operations","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"    public TaskList loadTasks() throws StorageException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"        Path dataFile \u003d getDataFile();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"            Files.createDirectories(dataFile.getParent());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"raw-asparagus"},"content":"            if (!Files.exists(dataFile)) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"raw-asparagus"},"content":"                return tasks;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"raw-asparagus"},"content":"            try (BufferedReader reader \u003d Files.newBufferedReader(dataFile, StandardCharsets.UTF_8)) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"raw-asparagus"},"content":"                String line;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"raw-asparagus"},"content":"                while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"raw-asparagus"},"content":"                    Task task \u003d parseTask(line);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"raw-asparagus"},"content":"                    tasks.addTask(task);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"raw-asparagus"},"content":"            return tasks;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"An error occurred while handling I/O operations.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"raw-asparagus"},"content":"     * Shuts down the executor service used for asynchronous operations.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"raw-asparagus"},"content":"    public void shutdownExecutor() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"raw-asparagus"},"content":"        EXECUTOR_SERVICE.shutdown();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"raw-asparagus"},"content":"     * Converts a Task to its string representation for storage.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"raw-asparagus"},"content":"     * @param task the Task to be converted","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"raw-asparagus"},"content":"     * @return the string form of the Task suitable for storage","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IllegalArgumentException if the Task type is unrecognized","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"raw-asparagus"},"content":"    private String stringify(Task task) throws IllegalArgumentException {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"raw-asparagus"},"content":"        String taskType;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"raw-asparagus"},"content":"        String taskDetails \u003d \"\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"raw-asparagus"},"content":"        boolean isDone \u003d task.getDone();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"raw-asparagus"},"content":"        String name \u003d task.getName();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"raw-asparagus"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"raw-asparagus"},"content":"            taskType \u003d \"T\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"raw-asparagus"},"content":"        } else if (task instanceof Deadline d) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"raw-asparagus"},"content":"            taskType \u003d \"D\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"raw-asparagus"},"content":"            String byString \u003d (d.getBy() \u003d\u003d null) ? \"\" : d.getBy().format(STORAGE_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"raw-asparagus"},"content":"            taskDetails \u003d \"|\" + byString;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"raw-asparagus"},"content":"        } else if (task instanceof Event e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"raw-asparagus"},"content":"            taskType \u003d \"E\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"raw-asparagus"},"content":"            String fromString \u003d (e.getFrom() \u003d\u003d null) ? \"\" : e.getFrom().format(STORAGE_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"raw-asparagus"},"content":"            String toString \u003d (e.getTo() \u003d\u003d null) ? \"\" : e.getTo().format(STORAGE_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"raw-asparagus"},"content":"            taskDetails \u003d \"|\" + fromString + \"|\" + toString;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"raw-asparagus"},"content":"        } else {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"raw-asparagus"},"content":"            throw new IllegalArgumentException(\"Unknown Task type\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"raw-asparagus"},"content":"        return taskType + \"|\" + isDone + \"|\" + name + taskDetails;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"raw-asparagus"},"content":"     * Parses a single line of stored data into a Task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"raw-asparagus"},"content":"     * @param taskLine the string representing the Task\u0027s data","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"raw-asparagus"},"content":"     * @return the Task parsed from the line data","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"raw-asparagus"},"content":"     * @throws StorageException if the data is corrupted or invalid","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"raw-asparagus"},"content":"    private Task parseTask(String taskLine) throws StorageException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"raw-asparagus"},"content":"        String[] parts \u003d taskLine.split(\"\\\\|\", -1);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"raw-asparagus"},"content":"        if (parts.length \u003c 3) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"Data corrupted: \u003c 3 fields!\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"raw-asparagus"},"content":"        Task task;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"raw-asparagus"},"content":"            task \u003d parseTaskParts(parts);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"raw-asparagus"},"content":"        } catch (StorageException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"Data corrupted: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"raw-asparagus"},"content":"        return task;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"raw-asparagus"},"content":"     * Interprets the split string array as components of a Task object.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"raw-asparagus"},"content":"     * @param parts the array of data fields","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"raw-asparagus"},"content":"     * @return a Task object based on the data","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"raw-asparagus"},"content":"     * @throws StorageException if the data is missing required fields or has an unknown type","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"raw-asparagus"},"content":"    private Task parseTaskParts(String[] parts) throws StorageException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"raw-asparagus"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"raw-asparagus"},"content":"        boolean done \u003d Boolean.parseBoolean(parts[1]);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"raw-asparagus"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"raw-asparagus"},"content":"        Task task \u003d switch (taskType) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"raw-asparagus"},"content":"            case \"E\" -\u003e {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"raw-asparagus"},"content":"                if (parts.length \u003c 5) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"raw-asparagus"},"content":"                    throw new StorageException(\"Event data missing fields: \" + String.join(\"|\", parts));","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"raw-asparagus"},"content":"                LocalDateTime from \u003d parseDateTime(parts[3]);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"raw-asparagus"},"content":"                LocalDateTime to \u003d parseDateTime(parts[4]);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"raw-asparagus"},"content":"                yield new Event(description, from, to);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"raw-asparagus"},"content":"            case \"D\" -\u003e {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"raw-asparagus"},"content":"                if (parts.length \u003c 4) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"raw-asparagus"},"content":"                    throw new StorageException(\"Deadline data missing fields: \" + String.join(\"|\", parts));","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"raw-asparagus"},"content":"                LocalDateTime by \u003d parseDateTime(parts[3]);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"raw-asparagus"},"content":"                yield new Deadline(description, by);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"raw-asparagus"},"content":"            case \"T\" -\u003e new Todo(description);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"raw-asparagus"},"content":"            default -\u003e null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"raw-asparagus"},"content":"        };","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"raw-asparagus"},"content":"        if (task \u003d\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"Unknown task type: \" + taskType + \"|\" + description + \"|\" + done);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"raw-asparagus"},"content":"        if (done) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"raw-asparagus"},"content":"            task.markDone();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"raw-asparagus"},"content":"        return task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"raw-asparagus"},"content":"     * Parses a string into a LocalDateTime based on the designated formatter.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"raw-asparagus"},"content":"     * @param dateStr the string representing the date/time","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"raw-asparagus"},"content":"     * @return a LocalDateTime if valid, or {@code null} if blank","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"raw-asparagus"},"content":"     * @throws StorageException if the date/time string is invalid","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"raw-asparagus"},"content":"    private LocalDateTime parseDateTime(String dateStr) throws StorageException {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"raw-asparagus"},"content":"        if (dateStr.isBlank()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"raw-asparagus"},"content":"            return null;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"raw-asparagus"},"content":"            return LocalDateTime.parse(dateStr, STORAGE_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"raw-asparagus"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"raw-asparagus"},"content":"            throw new StorageException(\"Invalid date format: \\\"\" + dateStr + \"\\\"\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":256}},{"path":"src/main/java/dusk/storage/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.storage;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Represents an exception specifically related to storage operations,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" * including loading and saving task data.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"public class StorageException extends Exception {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a StorageException with the specified detail message.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     * @param message the detail message providing more information about the exception","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    public StorageException(String message) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"        super(message);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-29","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":17}},{"path":"src/main/java/dusk/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":" * Represents a task with a deadline, storing the date and time by which the task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":" * must be completed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"     * The formatter used to display the deadline date and time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * The date and time by which this task must be completed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime by;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a Deadline task with the given description and deadline date/time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     * @param by the LocalDateTime by which the task should be completed","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        super(description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the deadline of this task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @return the LocalDateTime by which this task must be completed","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"    public LocalDateTime getBy() {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        return by;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     * Checks if this deadline falls within the given start and end date/time range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     * @param start the start of the date/time range","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     * @param end   the end of the date/time range","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if the deadline is within the range, false otherwise","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"    public boolean isWithinRange(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        if (by \u003d\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"            return false;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        return !by.isBefore(start) \u0026\u0026 !by.isAfter(end);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     * Checks if this deadline occurs on the specified date","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"     * (matching only the date portion, ignoring specific times).","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     * @param date the LocalDateTime whose date will be compared against this deadline","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if the deadline\u0027s date is the same as the specified date, false otherwise","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"    public boolean isOnDate(LocalDateTime date) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        if (by \u003d\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"            return false;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        return by.toLocalDate().isEqual(date.toLocalDate());","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"     * Returns a string representation of this Deadline task, including its type,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"     * completion status, and deadline.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"     * @return a string that shows the type of the task, its status, and deadline details","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"        String formatted \u003d (by \u003d\u003d null)","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"                ? \"no idea :p\"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"                : by.format(OUTPUT_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formatted + \")\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":84}},{"path":"src/main/java/dusk/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":" * Represents an event task with a start and end date/time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     * The formatter used to display the event date and time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     * The start date/time of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * The end date/time of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs an Event task with a description, start date/time, and end date/time.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * @param from the LocalDateTime when the event starts","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     * @param to   the LocalDateTime when the event ends","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        super(description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the date/time when this event starts.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"     * @return the LocalDateTime representing the start of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    public LocalDateTime getFrom() {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        return from;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the date/time when this event ends.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     * @return the LocalDateTime representing the end of the event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    public LocalDateTime getTo() {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        return to;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"     * Checks whether this event intersects with the specified time range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     * @param start the start of the date/time range","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"     * @param end   the end of the date/time range","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if any part of the event is within the range, false otherwise","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"    public boolean isWithinRange(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        if (from !\u003d null \u0026\u0026 to !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"            return (from.isAfter(start) \u0026\u0026 from.isBefore(end))","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"                    || (to.isAfter(start) \u0026\u0026 to.isBefore(end));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"        } else if (from !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"            return from.isAfter(start) \u0026\u0026 from.isBefore(end);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"        } else if (to !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"            return to.isAfter(start) \u0026\u0026 to.isBefore(end);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        } else {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"            return false;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"     * Checks if this event occurs on the specified date (ignoring exact times).","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"     * @param date the LocalDateTime whose date will be compared against this event","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if the event occurs on the specified date, false otherwise","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"    public boolean isOnDate(LocalDateTime date) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"        if (from \u003d\u003d null || to \u003d\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"            return false;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"        var dayStart \u003d date.toLocalDate().atStartOfDay();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"        var dayEnd \u003d dayStart.plusDays(1).minusNanos(1);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"        return !from.isAfter(dayEnd) \u0026\u0026 !to.isBefore(dayStart);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"     * Returns a string representation of this Event task, including its type,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"     * completion status, and the event\u0027s date/time range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"     * @return a string showing the event type, status, and date/time range","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"        String fromStr \u003d (from \u003d\u003d null) ? \"\" : from.format(OUTPUT_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"        String toStr \u003d (to \u003d\u003d null) ? \"\" : to.format(OUTPUT_FORMATTER);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"        String message;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"        if (fromStr.isEmpty() \u0026\u0026 toStr.isEmpty()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"            message \u003d \"\";","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"        } else if (fromStr.isEmpty()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"            message \u003d \" (to: \" + toStr + \")\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"        } else if (toStr.isEmpty()) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"            message \u003d \" (from: \" + fromStr + \")\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"        } else {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"            message \u003d \" (from: \" + fromStr + \" to: \" + toStr + \")\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"        return \"[E]\" + super.toString() + message;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":117}},{"path":"src/main/java/dusk/task/MarkTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Represents an exception thrown when there is an error marking a task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" * as completed or not completed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"public class MarkTaskException extends Exception {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a MarkTaskException with a specified detail message.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     * @param message the detail message","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    public MarkTaskException(String message) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"        super(message);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-29","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":17}},{"path":"src/main/java/dusk/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * An abstract class representing a general task with a description","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" * and completion status.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"public abstract class Task {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     * The text description of this task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"    private final String description;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"     * Indicates whether this task has been marked as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private boolean isDone;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a Task with the specified description.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the text description for the task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    public Task(String description) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * Marks this task as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    public void markDone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * Marks this task as not done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    public void markUndone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the description of this task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     * @return the task description as a string","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    public String getName() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        return description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"     * Checks whether this task is marked as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if the task is done, false otherwise","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    public boolean getDone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        return isDone;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"     * Returns a string representation of this task, showing whether","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"     * it is done ([X]) or not ([ ]) along with its description.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"     * @return a formatted string representation of the task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        return \"[\" + (getDone() ? \"X\" : \" \") + \"] \" + getName();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":72}},{"path":"src/main/java/dusk/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import java.util.List;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":" * Manages a list of tasks, providing methods for adding, removing, and","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":" * retrieving tasks based on various conditions.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"public class TaskList {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"     * The underlying collection of Task objects associated with this TaskList.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * Creates a new TaskList instance with an empty internal list of tasks.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    public TaskList() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"     * @param task the Task object to add","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        tasks.add(task);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * Removes a task at the specified index from the list.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @param index the 0-based position of the task to remove","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @return the removed Task object","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if the provided index is out of bounds","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    public Task removeTask(int index) throws TaskListException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"            return tasks.remove(index);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"            throw new TaskListException(\"Index out of bounds: \" + (index + 1));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     * Marks the specified task as done.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     * @param index the 0-based position of the task to mark","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if the index is out of bounds","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException if the task is already marked as done","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    public void markTask(int index) throws TaskListException, MarkTaskException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"            Task task \u003d getTask(index);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"            if (task.getDone()) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"                throw new MarkTaskException(\"Task already marked as done!\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"            task.markDone();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"            throw new TaskListException(\"Index out of bounds: \" + (index + 1));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"     * Marks the specified task as not done.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"     * @param index the 0-based position of the task to unmark","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if the index is out of bounds","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException if the task is already marked as not done","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"    public void unmarkTask(int index) throws TaskListException, MarkTaskException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"            Task task \u003d getTask(index);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"            if (!task.getDone()) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"                throw new MarkTaskException(\"Task already marked as not done!\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"            task.markUndone();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"            throw new TaskListException(\"Index out of bounds: \" + (index + 1));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the task at the specified index.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"     * @param index the 0-based position of the task","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"     * @return the Task object at the given index","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if the index is out of bounds","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"    public Task getTask(int index) throws TaskListException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"            return tasks.get(index);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"            throw new TaskListException(\"Index out of bounds: \" + (index + 1));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"     * Retrieves the total number of tasks in the list.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"     * @return the size of the internal task list","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"    public int size() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"        return tasks.size();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"     * Checks if the task list is empty.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"     * @return true if there are no tasks in the list, false otherwise","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"raw-asparagus"},"content":"     * Produces a new TaskList containing all tasks (of type Deadline or Event)","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"raw-asparagus"},"content":"     * whose date/time is within the specified range.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"raw-asparagus"},"content":"     * @param start the start date/time of the range","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"raw-asparagus"},"content":"     * @param end   the end date/time of the range","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"raw-asparagus"},"content":"     * @return a TaskList containing the tasks that fall within the given range","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"raw-asparagus"},"content":"    public TaskList getTasksWithin(LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"raw-asparagus"},"content":"        TaskList result \u003d new TaskList();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"raw-asparagus"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"raw-asparagus"},"content":"            if (task instanceof Event e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"raw-asparagus"},"content":"                if (e.isWithinRange(start, end)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"raw-asparagus"},"content":"                    result.addTask(e);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"raw-asparagus"},"content":"            } else if (task instanceof Deadline d) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"raw-asparagus"},"content":"                if (d.isWithinRange(start, end)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"raw-asparagus"},"content":"                    result.addTask(d);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"raw-asparagus"},"content":"        return result;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"raw-asparagus"},"content":"     * Produces a new TaskList containing all tasks (of type Event or Deadline)","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"raw-asparagus"},"content":"     * that occur on the specified date.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"raw-asparagus"},"content":"     * @param date the LocalDateTime whose date is to be compared","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"raw-asparagus"},"content":"     * @return a TaskList containing tasks that occur on the specified date","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"raw-asparagus"},"content":"    public TaskList getTasksOn(LocalDateTime date) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"raw-asparagus"},"content":"        TaskList result \u003d new TaskList();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"raw-asparagus"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"raw-asparagus"},"content":"            if (task instanceof Event e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"raw-asparagus"},"content":"                if (e.isOnDate(date)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"raw-asparagus"},"content":"                    result.addTask(e);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"raw-asparagus"},"content":"            } else if (task instanceof Deadline d) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"raw-asparagus"},"content":"                if (d.isOnDate(date)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"raw-asparagus"},"content":"                    result.addTask(d);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"raw-asparagus"},"content":"                }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"raw-asparagus"},"content":"        return result;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"raw-asparagus"},"content":"     * Searches for tasks whose descriptions contain the specified keyword.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"raw-asparagus"},"content":"     * @param keyword the search keyword","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"raw-asparagus"},"content":"     * @return a TaskList containing tasks with descriptions that match the keyword","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if an error occurs while retrieving a task","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"raw-asparagus"},"content":"    public TaskList search(String keyword) throws TaskListException {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"raw-asparagus"},"content":"        TaskList result \u003d new TaskList();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"raw-asparagus"},"content":"        for (int i \u003d 0; i \u003c this.size(); i++) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"raw-asparagus"},"content":"            Task task \u003d this.getTask(i);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"raw-asparagus"},"content":"            // Check if the task description contains the keyword (case-insensitive)","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"raw-asparagus"},"content":"            if (task.getName().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"raw-asparagus"},"content":"                result.addTask(task);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"raw-asparagus"},"content":"        return result;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":186}},{"path":"src/main/java/dusk/task/TaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Represents an exception thrown when there is an error processing tasks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" * within a TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"public class TaskListException extends Exception {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a TaskListException with a specified detail message.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     * @param message the detail message","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    public TaskListException(String message) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"        super(message);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-29","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":17}},{"path":"src/main/java/dusk/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":" * Represents a basic to-do task with only a description and a completion status.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a To-do task with the specified description.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"     * @param description the description of the to-do task","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"        super(description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     * Returns a string representation of this to-do task,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * including its type and completion status.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     * @return a string showing the task type and status","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":27}},{"path":"src/main/java/dusk/ui/ConsoleIO.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.ui;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import java.io.Closeable;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.OutputStream;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.OutputStreamWriter;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" * Provides console-based input/output functionality, including reading lines","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":" * from an input stream and writing messages to an output stream.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"public class ConsoleIO implements Closeable {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"     * Buffered reader for handling console input.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private final BufferedReader bufferedReader;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Buffered writer for handling console output.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    private final BufferedWriter bufferedWriter;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * Constructs a ConsoleIO instance with the specified input and output streams.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * @param inputStream  the InputStream used to create a BufferedReader","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     * @param outputStream the OutputStream used to create a BufferedWriter","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    public ConsoleIO(InputStream inputStream, OutputStream outputStream) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        this.bufferedReader \u003d new BufferedReader(new InputStreamReader(inputStream));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        this.bufferedWriter \u003d new BufferedWriter(new OutputStreamWriter(outputStream));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"     * Reads a line of text from the console input, trimming any leading and trailing spaces.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"     * @return the trimmed line of text, or {@code null} if the end of the stream is reached","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while reading","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    public String readLine() throws IOException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        String line \u003d bufferedReader.readLine();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        if (line \u003d\u003d null) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"            return null;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        return line.trim();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"     * Prints one or more messages to the console, each prefixed with a tab and followed by a new line.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"     * @param messages an array of messages to be printed","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while writing","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    public void print(String... messages) throws IOException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"        printSeparatorLine();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"        for (String message : messages) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"            bufferedWriter.write(\"\\t\" + message + System.lineSeparator());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        printSeparatorLine();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        bufferedWriter.flush();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"     * Writes a separator line composed of underscores, preceded by a tab character.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while writing","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"    private void printSeparatorLine() throws IOException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"        bufferedWriter.write(\"\\t\" + \"_\".repeat(60) + System.lineSeparator());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"     * Writes a debug message to the console output stream, ending with a new line.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"     * @param message the message to be written","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while writing","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"    public void printDebug(String message) throws IOException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"        bufferedWriter.write(message + System.lineSeparator());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"        bufferedWriter.flush();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"     * Closes both the reader and writer resources associated with this instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while closing the resources","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"    @Override","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"    public void close() throws IOException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"        bufferedReader.close();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"        bufferedWriter.close();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":98}},{"path":"src/test/java/dusk/command/CreateDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the CreateDeadlineCommand class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"class CreateDeadlineCommandTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a valid CreateDeadlineCommand scenario.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteValidData() throws IOException, InputException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime dueTime \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        CreateDeadlineCommand command \u003d new CreateDeadlineCommand(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"                taskList, consoleIo, storage, \"Finish report\", dueTime","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(1, taskList.size(), \"TaskList should have 1 task after executing a valid CreateDeadlineCommand.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(taskList.getTask(0).getDone(), \"Newly created task should not be marked done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"                taskList.getTask(0).toString().contains(\"Finish report\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"                \"Task should contain the given description in its string representation.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that executing CreateDeadlineCommand with an empty description throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteEmptyDescriptionThrowsException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime dueTime \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        CreateDeadlineCommand command \u003d new CreateDeadlineCommand(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"                taskList, consoleIo, storage, \"\", dueTime","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"                command::execute,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"                \"Executing CreateDeadlineCommand with empty description should throw an InputException.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":74}},{"path":"src/test/java/dusk/command/CreateEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the CreateEventCommand class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"class CreateEventCommandTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a valid CreateEventCommand scenario.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteValidData() throws IOException, InputException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startTime \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endTime \u003d LocalDateTime.now().plusDays(1).plusHours(2);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        CreateEventCommand command \u003d new CreateEventCommand(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"                taskList, consoleIo, storage, \"Team meeting\", startTime, endTime","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(1, taskList.size(), \"TaskList should have 1 task after executing a valid CreateEventCommand.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(taskList.getTask(0).getDone(), \"Newly created event should not be marked done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"                taskList.getTask(0).toString().contains(\"Team meeting\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"                \"Event should contain the given description in its string representation.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that executing CreateEventCommand with an empty description throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteEmptyDescriptionThrowsException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startTime \u003d LocalDateTime.now().plusDays(1);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endTime \u003d LocalDateTime.now().plusDays(1).plusHours(2);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        CreateEventCommand command \u003d new CreateEventCommand(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"                taskList, consoleIo, storage, \"\", startTime, endTime","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"                command::execute,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"                \"Executing CreateEventCommand with empty description should throw an InputException.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":76}},{"path":"src/test/java/dusk/command/CreateTodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the CreateTodoCommand class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"class CreateTodoCommandTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a valid CreateTodoCommand scenario.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteValidData() throws IOException, InputException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        CreateTodoCommand command \u003d new CreateTodoCommand(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"                taskList, consoleIo, storage, \"Buy groceries\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(1, taskList.size(), \"TaskList should have 1 task after executing a valid CreateTodoCommand.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(taskList.getTask(0).getDone(), \"Newly created todo should not be marked done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"                taskList.getTask(0).toString().contains(\"Buy groceries\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"                \"Task should contain the given description in its string representation.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that executing CreateTodoCommand with an empty description throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteEmptyDescriptionThrowsException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"        CreateTodoCommand command \u003d new CreateTodoCommand(taskList, consoleIo, storage, \"\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"                command::execute,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"                \"Executing CreateTodoCommand with empty description should throw an InputException.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":69}},{"path":"src/test/java/dusk/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Todo;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the FindCommand class.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"class FindCommandTest {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList tasks;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIO;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    private ByteArrayOutputStream outContent;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        outContent \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"        consoleIO \u003d new ConsoleIO(System.in, new PrintStream(outContent));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a FindCommand when there are matching tasks.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException       if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if an error occurs while retrieving tasks.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    void testExecute_validFind() throws IOException, TaskListException {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"read book\"));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"return book\"));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"go shopping\"));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        FindCommand command \u003d new FindCommand(tasks, consoleIO, \"book\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        // Verify output includes the header.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(output.contains(\"Here are the matching tasks in your list:\"),","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"                \"Output should include the header for matching tasks.\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        // Verify that the matching tasks are printed.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(output.contains(\"read book\") \u0026\u0026 output.contains(\"return book\"),","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"                \"Output should include tasks that contain \u0027book\u0027.\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"        // Verify that non-matching tasks do not appear.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(output.contains(\"go shopping\"),","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"                \"Output should not include tasks that do not match the search keyword.\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a FindCommand when there are no matching tasks.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException       if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if an error occurs while retrieving tasks.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"    void testExecute_noMatchingTasks() throws IOException, TaskListException {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"read book\"));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"return book\"));","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"        FindCommand command \u003d new FindCommand(tasks, consoleIO, \"exercise\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"        String output \u003d outContent.toString();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"        // Verify that the no matching tasks message is printed.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(output.contains(\"No matching tasks found!\"),","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"                \"Output should indicate that no matching tasks were found.\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-14","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":83}},{"path":"src/test/java/dusk/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskListException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Todo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the ListCommand class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"class ListCommandTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a ListCommand when the TaskList is empty.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteEmptyTaskListPrintsEmptyMessage() throws IOException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        ListCommand command \u003d new ListCommand(taskList, consoleIo, null, null, null);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        // Verifies no exceptions are thrown and execution completes","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a ListCommand with tasks and no date filters applied.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteWithTasksNoDateFilters() throws IOException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(new Todo(\"First Task\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(new Todo(\"Second Task\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        ListCommand command \u003d new ListCommand(taskList, consoleIo, null, null, null);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(2, taskList.size(), \"Should still have 2 tasks in the list.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"     * Tests executing a ListCommand with an on-date filter.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteOnDateFilter() throws IOException, TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        ListCommand command \u003d new ListCommand(taskList, consoleIo, LocalDateTime.now(), null, null);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        // Verifies no exceptions are thrown and execution completes","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":74}},{"path":"src/test/java/dusk/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the MarkCommand class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"class MarkCommandTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * Tests marking a task as done using a valid index.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException if marking or unmarking the task encounters an issue.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteValidMark() throws TaskListException, InputException, MarkTaskException, IOException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(new Todo(\"Sample Task\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        MarkCommand command \u003d new MarkCommand(taskList, consoleIo, storage, \"1\", true);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(taskList.getTask(0).getDone(), \"The task should be marked done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     * Tests unmarking a previously marked task as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException if there is an error accessing or modifying the TaskList.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException if marking or unmarking the task encounters an issue.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException if an I/O error occurs while executing the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteValidUnmark() throws TaskListException, InputException, MarkTaskException, IOException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        Task newTask \u003d new Todo(\"Already done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"        newTask.markDone();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(newTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        MarkCommand command \u003d new MarkCommand(taskList, consoleIo, storage, \"1\", false);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        command.execute();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(taskList.getTask(0).getDone(), \"The task should be unmarked.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that command execution with an invalid index throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"    void testExecuteInvalidIndexThrowsInputException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        MarkCommand command \u003d new MarkCommand(taskList, consoleIo, storage, \"abc\", true);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"                command::execute,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"                \"Invalid description for the mark command should throw InputException.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":81}},{"path":"src/test/java/dusk/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.command;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.ui.ConsoleIO;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Tests for the Parser class, ensuring commands are parsed correctly.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"class ParserTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    private ConsoleIO consoleIo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment before each test method.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"    void setUp() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"        consoleIo \u003d new ConsoleIO(System.in, System.out);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that parsing an empty input string throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    void parseEmptyInputThrowsInputException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"                () -\u003e Parser.parse(consoleIo, storage, taskList, \"\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should throw InputException for empty input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that parsing an unrecognized command string throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"    void parseInvalidCommandThrowsInputException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"                () -\u003e Parser.parse(consoleIo, storage, taskList, \"unknowncommand\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should throw InputException for invalid or unrecognized commands.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"list\" command returns a ListCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    void parseListCommandReturnsListCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(consoleIo, storage, taskList, \"list\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"                ListCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a ListCommand for \u0027list\u0027 input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"todo\" command returns a CreateTodoCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"    void parseTodoCommandReturnsCreateTodoCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(consoleIo, storage, taskList, \"todo Buy groceries\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"                CreateTodoCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a CreateTodoCommand for \u0027todo\u0027 input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"deadline\" command returns a CreateDeadlineCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"    void parseDeadlineCommandReturnsCreateDeadlineCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"                consoleIo,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"                storage,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"                taskList,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"                \"deadline Finish assignment /by 2023-10-10 1300\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"                CreateDeadlineCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a CreateDeadlineCommand for \u0027deadline\u0027 input with /by date.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"event\" command returns a CreateEventCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"    void parseEventCommandReturnsCreateEventCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"                consoleIo,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"                storage,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"                taskList,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"                \"event Team meeting /from 2023-12-01 /to 2023-12-01 1500\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"                CreateEventCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a CreateEventCommand for \u0027event\u0027 input with /from and /to dates.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that parsing an invalid date/time format throws an InputException.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"raw-asparagus"},"content":"    void parseInvalidDateTimeThrowsInputException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"raw-asparagus"},"content":"                InputException.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"raw-asparagus"},"content":"                () -\u003e Parser.parse(consoleIo, storage, taskList, \"deadline Something /by 2023-99-99\"),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should throw InputException on invalid date/time format.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"mark\" command returns a MarkCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"raw-asparagus"},"content":"    void parseMarkCommandReturnsMarkCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(consoleIo, storage, taskList, \"mark 1\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"raw-asparagus"},"content":"                MarkCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a MarkCommand for \u0027mark\u0027 input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"unmark\" command returns a MarkCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"raw-asparagus"},"content":"    void parseUnmarkCommandReturnsMarkCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(consoleIo, storage, taskList, \"unmark 1\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"raw-asparagus"},"content":"                MarkCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a MarkCommand for \u0027unmark\u0027 input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the \"delete\" command returns a DeleteCommand instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"raw-asparagus"},"content":"     * @throws InputException if there is an invalid input to the command.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"raw-asparagus"},"content":"    void parseDeleteCommandReturnsDeleteCommand() throws InputException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"raw-asparagus"},"content":"        Command command \u003d Parser.parse(consoleIo, storage, taskList, \"delete 1\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"raw-asparagus"},"content":"        assertInstanceOf(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"raw-asparagus"},"content":"                DeleteCommand.class,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"raw-asparagus"},"content":"                command,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"raw-asparagus"},"content":"                \"Parser should return a DeleteCommand for \u0027delete\u0027 input.\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"raw-asparagus"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":180}},{"path":"src/test/java/dusk/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Deadline;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.TaskList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import dusk.task.Todo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.AfterEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":" * Test class for verifying functionality of the Storage component.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"public class StorageTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    private Path tempDataFile;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     * Sets up the test environment by creating a temporary data file","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * and initializing the {@link Storage} instance.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     * @param tempDir The temporary directory provided by JUnit.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"     * @throws IOException If an I/O error occurs while creating the file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    public void setUp(@TempDir Path tempDir) throws IOException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"        this.tempDataFile \u003d tempDir.resolve(\"data.txt\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        storage \u003d new Storage() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"            @Override","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"            protected Path getDataFile() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"                return tempDataFile;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        };","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"     * Cleans up any resources used by the storage after each test.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"    @AfterEach","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"    public void tearDown() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"        storage.shutdownExecutor();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that saving and then loading tasks results in an identical list of tasks.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"     * @throws Exception If any exception occurs during the save or load operations.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    public void saveTasks_loadTasks_roundTripSuccess() throws Exception {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"Test Todo\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Deadline(\"Test Deadline\", LocalDateTime.of(2024, 1, 1, 12, 0)));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"        TaskList loadedTasks \u003d storage.loadTasks();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(tasks.size(), loadedTasks.size(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"                \"Loaded tasks should match the count of saved tasks\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(\"Test Todo\", loadedTasks.getTask(0).getName(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"                \"First task description matches after load\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(loadedTasks.getTask(0).getDone(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"                \"First task should remain unmarked by default\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(\"Test Deadline\", loadedTasks.getTask(1).getName(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"                \"Second task description matches after load\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(loadedTasks.getTask(1).getDone(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"                \"Second task should remain unmarked by default\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an invalid task line in the data file causes a {@link StorageException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"     * @throws Exception If an I/O error occurs while writing to the file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"    public void invalidTaskLine_parseTask_throwsStorageException() throws Exception {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"        Files.writeString(tempDataFile, \"X|false|InvalidLine\\n\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(StorageException.class, () -\u003e storage.loadTasks(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"                \"Corrupted or unrecognized data should throw a StorageException\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that incomplete data for an Event causes a {@link StorageException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"     * @throws Exception If an I/O error occurs while writing to the file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"    public void incompleteDataForEvent_throwsStorageException() throws Exception {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"        Files.writeString(tempDataFile, \"E|false|IncompleteEvent|2024-01-01\\n\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(StorageException.class, () -\u003e storage.loadTasks(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"                \"Event missing required fields should cause a StorageException\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an invalid date/time format in the data file causes a {@link StorageException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"     * @throws Exception If an I/O error occurs while writing to the file.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"    public void parseDateTime_invalidFormat_throwsStorageException() throws Exception {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"        Files.writeString(tempDataFile, \"D|true|BadDate|2024/01/01\\n\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(StorageException.class, () -\u003e storage.loadTasks(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"raw-asparagus"},"content":"                \"Invalid date format should throw a StorageException\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"raw-asparagus"},"content":"     * Verifies that attempting to save tasks does not throw an exception if no I/O errors occur.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"raw-asparagus"},"content":"    public void saveTasks_ioError_throwsStorageException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"raw-asparagus"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"raw-asparagus"},"content":"        tasks.addTask(new Todo(\"Unwritable Directory Test\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"raw-asparagus"},"content":"        assertDoesNotThrow(() -\u003e storage.saveTasks(tasks),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"raw-asparagus"},"content":"                \"If the path is writable, saving should succeed.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":134}},{"path":"src/test/java/dusk/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Test class for verifying functionality of the {@link Deadline} task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class DeadlineTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the constructor initializes all fields correctly.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    public void constructor_validInputs_initializesCorrectly() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime byTime \u003d LocalDateTime.of(2023, 12, 31, 23, 59);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"        Deadline deadline \u003d new Deadline(\"Submit report\", byTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(\"Submit report\", deadline.getName(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"                \"Deadline description should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(byTime, deadline.getBy(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"                \"Deadline by-time should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(deadline.getDone(), \"A newly created deadline should not be marked done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that a deadline time within the specified range returns {@code true}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    public void isWithinRange_timeWithin_returnsTrue() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime byTime \u003d LocalDateTime.of(2023, 12, 31, 12, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        Deadline deadline \u003d new Deadline(\"New Deadline\", byTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startRange \u003d LocalDateTime.of(2023, 12, 31, 0, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endRange \u003d LocalDateTime.of(2023, 12, 31, 23, 59);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(deadline.isWithinRange(startRange, endRange),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"                \"Deadline should be within the given time range\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that a deadline on a matching date returns {@code true} for isOnDate().","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"    public void isOnDate_correctDate_returnsTrue() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime byTime \u003d LocalDateTime.of(2024, 1, 1, 10, 30);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"        Deadline deadline \u003d new Deadline(\"Deadline for New Year\", byTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime sameDay \u003d LocalDateTime.of(2024, 1, 1, 0, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(deadline.isOnDate(sameDay),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"                \"Deadline should be recognized as occurring on the same day\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that a deadline on a non-matching date returns {@code false} for isOnDate().","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"    public void isOnDate_differentDate_returnsFalse() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime byTime \u003d LocalDateTime.of(2024, 1, 2, 10, 30);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"        Deadline deadline \u003d new Deadline(\"Another Deadline\", byTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime otherDate \u003d LocalDateTime.of(2024, 1, 1, 0, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(deadline.isOnDate(otherDate),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"                \"Deadline should be recognized as not on a different day\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":71}},{"path":"src/test/java/dusk/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" * Test class for verifying functionality of the {@link Event} task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"public class EventTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that constructor initializes an event with the expected fields.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"    public void constructor_validInputs_initializesCorrectly() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startTime \u003d LocalDateTime.of(2023, 11, 1, 14, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endTime \u003d LocalDateTime.of(2023, 11, 1, 16, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"        Event event \u003d new Event(\"Company Meeting\", startTime, endTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(\"Company Meeting\", event.getName(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"                \"Event description should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(startTime, event.getFrom(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"                \"Start time should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(endTime, event.getTo(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"                \"End time should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(event.getDone(), \"A newly created event should not be marked done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an event falling entirely within the specified range returns {@code true}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    public void isWithinRange_inRange_returnsTrue() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime fromTime \u003d LocalDateTime.of(2023, 11, 1, 10, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime toTime \u003d LocalDateTime.of(2023, 11, 1, 12, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        Event event \u003d new Event(\"Morning Session\", fromTime, toTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime rangeStart \u003d LocalDateTime.of(2023, 11, 1, 9, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime rangeEnd \u003d LocalDateTime.of(2023, 11, 1, 13, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(event.isWithinRange(rangeStart, rangeEnd),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"                \"Event times should lie within the specified range\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an event completely outside the specified range returns {@code false}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"    public void isWithinRange_outOfRange_returnsFalse() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime fromTime \u003d LocalDateTime.of(2023, 11, 1, 15, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime toTime \u003d LocalDateTime.of(2023, 11, 1, 16, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"        Event event \u003d new Event(\"Afternoon Session\", fromTime, toTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime rangeStart \u003d LocalDateTime.of(2023, 11, 1, 9, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime rangeEnd \u003d LocalDateTime.of(2023, 11, 1, 10, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(event.isWithinRange(rangeStart, rangeEnd),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"                \"Event times should not lie within the specified range\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an event on the exact specified date returns {@code true} for isOnDate().","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"    public void isOnDate_exactDate_returnsTrue() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startTime \u003d LocalDateTime.of(2024, 3, 1, 9, 30);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endTime \u003d LocalDateTime.of(2024, 3, 1, 11, 30);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        Event event \u003d new Event(\"Conference\", startTime, endTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime sameDay \u003d LocalDateTime.of(2024, 3, 1, 0, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(event.isOnDate(sameDay),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"                \"Event should be found on the same day\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that an event not on the specified date returns {@code false} for isOnDate().","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"    public void isOnDate_differentDate_returnsFalse() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime startTime \u003d LocalDateTime.of(2024, 3, 2, 12, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime endTime \u003d LocalDateTime.of(2024, 3, 2, 13, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"        Event event \u003d new Event(\"March Gathering\", startTime, endTime);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"        LocalDateTime otherDay \u003d LocalDateTime.of(2024, 3, 1, 0, 0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(event.isOnDate(otherDay),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"                \"Event should not be found on a different day\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":93}},{"path":"src/test/java/dusk/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":" * Test class for verifying functionality of the {@link TaskList}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"public class TaskListTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that adding a task increases the size of the list.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"    public void addTask_shouldIncreaseSize() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask \u003d new Todo(\"Sample Task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(taskList.isEmpty(), \"Task list should initially be empty\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(1, taskList.size(), \"Task list size should be 1 after adding a task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that removing a task at a valid index removes the correct task and updates the size.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException If the index is out of range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"    public void removeTask_validIndex_shouldRemoveCorrectly() throws TaskListException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask1 \u003d new Todo(\"Task 1\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask2 \u003d new Todo(\"Task 2\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask1);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask2);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(2, taskList.size(), \"There should be 2 tasks initially\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        Task removedTask \u003d taskList.removeTask(0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(sampleTask1, removedTask,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"                \"The removed task should match the first task added\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(1, taskList.size(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"                \"Task list size should be 1 after removal\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that removing a task with an invalid index throws {@link TaskListException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"    public void removeTask_invalidIndex_shouldThrowException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"        // Attempt to remove from an empty list","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(TaskListException.class, () -\u003e taskList.removeTask(0),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"                \"Removing from an empty list should throw an exception\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"     * Tests marking a task as done at a valid index.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException If the index is out of range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException If the task is already marked.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"    public void markTask_validIndex_shouldMarkTaskDone() throws TaskListException, MarkTaskException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask \u003d new Todo(\"Markable Task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"        taskList.markTask(0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(taskList.getTask(0).getDone(), \"Task at index 0 should be marked done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"raw-asparagus"},"content":"     * Tests unmarking a task that is currently done at a valid index.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"raw-asparagus"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"raw-asparagus"},"content":"     * @throws TaskListException If the index is out of range.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"raw-asparagus"},"content":"     * @throws MarkTaskException If the task is already marked undone.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"raw-asparagus"},"content":"    public void unmarkTask_validIndex_shouldMarkTaskUndone() throws TaskListException, MarkTaskException {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask \u003d new Todo(\"Unmarkable Task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"raw-asparagus"},"content":"        sampleTask.markDone(); // Mark it done first","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"raw-asparagus"},"content":"        taskList.unmarkTask(0);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(taskList.getTask(0).getDone(), \"Task at index 0 should be marked not done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that marking a task that is already done throws a {@link MarkTaskException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"raw-asparagus"},"content":"    public void markTask_alreadyDone_shouldThrowException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask \u003d new Todo(\"Already Done Task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"raw-asparagus"},"content":"        sampleTask.markDone();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(MarkTaskException.class, () -\u003e taskList.markTask(0),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"raw-asparagus"},"content":"                \"Marking a task already done should throw MarkTaskException\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that unmarking a task that is already undone throws a {@link MarkTaskException}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"raw-asparagus"},"content":"    public void unmarkTask_alreadyUndone_shouldThrowException() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"raw-asparagus"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"raw-asparagus"},"content":"        Task sampleTask \u003d new Todo(\"Already Undone Task\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"raw-asparagus"},"content":"        taskList.addTask(sampleTask);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"raw-asparagus"},"content":"        assertThrows(MarkTaskException.class, () -\u003e taskList.unmarkTask(0),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"raw-asparagus"},"content":"                \"Unmarking a task already undone should throw MarkTaskException\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":119}},{"path":"src/test/java/dusk/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"package dusk.task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":" * Test class for verifying functionality of the {@link Todo} task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"public class TodoTest {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that the constructor initializes the description correctly.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    public void constructor_validDescription_initializesCorrectly() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"        Todo todo \u003d new Todo(\"Buy groceries\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"        assertEquals(\"Buy groceries\", todo.getName(),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"                \"Todo description should match constructor argument\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(todo.getDone(), \"A newly created todo should not be marked done\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that markDone() sets the \"done\" state to {@code true}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"    public void markDone_setsDoneToTrue() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"        Todo todo \u003d new Todo(\"Finish homework\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"        todo.markDone();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"        assertTrue(todo.getDone(), \"markDone() should set getDone() to true\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"     * Tests that markUndone() sets the \"done\" state to {@code false}.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"    @Test","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"    public void markUndone_setsDoneToFalse() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"        Todo todo \u003d new Todo(\"Finish homework\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"        todo.markDone();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"        todo.markUndone();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"        assertFalse(todo.getDone(), \"markUndone() should set getDone() to false\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"raw-asparagus"},"content":"todo","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"raw-asparagus"},"content":"todo task0","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"raw-asparagus"},"content":"todo task1","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"raw-asparagus"},"content":"deadline","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"raw-asparagus"},"content":"deadline task2","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"raw-asparagus"},"content":"deadline task3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"raw-asparagus"},"content":"deadline task4 /by","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"raw-asparagus"},"content":"deadline task5 /by time0","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"deadline task5a /by 2025","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"deadline task5b /by 2025-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"deadline task5c /by 2025-01-30","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"raw-asparagus"},"content":"deadline task5d /by 2025-01-30 23","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"deadline task5e /by 2025-01-30 2359","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"raw-asparagus"},"content":"event","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"event task6","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"event task 7","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"event task8 /from","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"event task9 /from time1","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"event task9a /from 2025-02-01 1200","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"event task10 /to","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"event task11 /to time2","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"event task11a /from 2025-03-01 1200","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"raw-asparagus"},"content":"event task12 /from /to","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"raw-asparagus"},"content":"event task13 /to /from","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"raw-asparagus"},"content":"event task14 /from time3 /to","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"raw-asparagus"},"content":"event task14a /from 2025-04-01 /to","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"raw-asparagus"},"content":"event task15 /from /to time4","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"raw-asparagus"},"content":"event task15a /from /to 2025-05-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"event task16 /from time5 /to time6","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"raw-asparagus"},"content":"event task16a /from 2025-06-01 1200 \\to 2025-07-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"raw-asparagus"},"content":"event task17 /to time7 /from","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"raw-asparagus"},"content":"event task17a /to 2025-08-01 /from","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"event task18 /to /from time8","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"raw-asparagus"},"content":"event task18a /to /from 2025-09-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"raw-asparagus"},"content":"event task19 /to time9 /from time10","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"raw-asparagus"},"content":"event task19a /to 2025-10-01 /from 2025-11-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"raw-asparagus"},"content":"mark","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"raw-asparagus"},"content":"mark 0","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"raw-asparagus"},"content":"mark 21","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"raw-asparagus"},"content":"unmark","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"raw-asparagus"},"content":"unmark 0","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"raw-asparagus"},"content":"unmark 21","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"raw-asparagus"},"content":"mark 1","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"raw-asparagus"},"content":"mark 3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"raw-asparagus"},"content":"mark 4","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"raw-asparagus"},"content":"mark 6","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"raw-asparagus"},"content":"unmark 1","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"raw-asparagus"},"content":"unmark 6","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"raw-asparagus"},"content":"unmark 3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"raw-asparagus"},"content":"mark 3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"raw-asparagus"},"content":"mark 3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"raw-asparagus"},"content":"unmark 4","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"raw-asparagus"},"content":"unmark 4","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"raw-asparagus"},"content":"delete","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"raw-asparagus"},"content":"delete 0","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"raw-asparagus"},"content":"delete 21","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"raw-asparagus"},"content":"delete 1","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"raw-asparagus"},"content":"delete 3","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"raw-asparagus"},"content":"delete 4","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"raw-asparagus"},"content":"delete 6","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"raw-asparagus"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"raw-asparagus"},"content":"list test /on","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"raw-asparagus"},"content":"list test /on 2025-01-30","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"raw-asparagus"},"content":"list test /from /to","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"raw-asparagus"},"content":"list test /from 2025-01-01 /to","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"raw-asparagus"},"content":"list test /from /to 2026-01-01 0000","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"raw-asparagus"},"content":"list test /from 2025-03-01 /to 2025-09-01","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"raw-asparagus"},"content":"bye","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":76}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"raw-asparagus"},"content":"REM delete data from previous run","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"raw-asparagus"},"content":"if exist data/data.txt del data/data.txt","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"raw-asparagus"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\dusk*.java","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"raw-asparagus"},"content":"java -classpath ..\\bin dusk.Dusk \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":5,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"raw-asparagus"},"content":"# delete output from previous run","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"raw-asparagus"},"content":"if [ -e \"./data/data.txt\" ]","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"raw-asparagus"},"content":"then","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"raw-asparagus"},"content":"    rm ./data/data.txt","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"raw-asparagus"},"content":"fi","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"raw-asparagus"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"raw-asparagus"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/dusk/*.java","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"raw-asparagus"},"content":"java -classpath ../bin dusk.Dusk \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"raw-asparagus"},"content":"#dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"raw-asparagus":9,"-":35}}]
