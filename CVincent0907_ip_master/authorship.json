[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"    mainClass.set(\"TearIT\") // entry -\u003e do not need to state src/java just like package","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"    archiveBaseName \u003d \"TearIT\"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"CVincent0907":2,"-":39}},{"path":"src/main/data/TearIT.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"[T][ ] read book ","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"[D][ ] bath (by: Sep 17 2023 06:00 PM)","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"CVincent0907":2}},{"path":"src/main/java/TearIT.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"import application.Ui;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":" * TearIT is a class that provides entry point to the user interaction simulator.","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"public class TearIT {","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"    private static final String opening \u003d \"\"\"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"            Hello! I\u0027m TearIT.","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"            What can I do for you?","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"                        ","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"            -------------------------------------------------\"\"\";","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"    private static final String ending \u003d \"\"\"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"            Bye. Hope to see you again soon!","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"                       ","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"            -------------------------------------------------\"\"\";","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"        TearIT.openingMessage();","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"        // Echo is done here with ending message included when user enter \"bye\"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"        Ui.echo(TearIT.ending);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"    public static void openingMessage() {","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"-------------------------------------------------\");","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(TearIT.opening);","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-20","isFullCredit":false}],"authorContributionMap":{"CVincent0907":33}},{"path":"src/main/java/application/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package application;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"import java.util.Locale;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"import task.Deadline;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"import task.Event;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"import task.Task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"import task.Tasklist;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"import task.Todo;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":" * Parser class contains methods to parse user\u0027s inputs from the command prompt or","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":" * to parse inputs from text file and convert the inputs into respective task objects","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":" * when it matches the specified regex.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"public class Parser {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"     * @param userInput Input from the command prompt.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"     * @param regex     Regex expression to detect the group of possible @param userInput.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"     * @param groups    Group number of possible @param userInput [1:3] inclusive.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if task is successfully created and \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"     * Status of task creation depends on the @param userInput and @param regex.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"    public static boolean extractAndCreateTask(String userInput, String regex, int groups) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"        Matcher matcher \u003d pattern.matcher(userInput);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"        if (matcher.find()) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"            if (groups \u003d\u003d 1) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Todo(matcher.group(1)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"            } else if (groups \u003d\u003d 2) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"                String deadline \u003d matcher.group(2) + \"-\" + matcher.group(3) + \"-\" + matcher.group(4) + \" \" + matcher.group(5) + matcher.group(6);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Deadline(matcher.group(1), LocalDateTime.parse(deadline, formatter)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"            } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"                String fromDate \u003d matcher.group(2) + \"-\" + matcher.group(3) + \"-\" + matcher.group(4) + \" \" + matcher.group(5) + matcher.group(6);  // \"18-09-2024 1600\"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"                String toDate \u003d matcher.group(7) + \"-\" + matcher.group(8) + \"-\" + matcher.group(9) + \" \" + matcher.group(10) + matcher.group(11);  // \"18-09-2024 1900\"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Event(matcher.group(1), LocalDateTime.parse(fromDate, formatter), LocalDateTime.parse(toDate, formatter)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"            Task.addTaskCount();","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"            return true;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    Input format is incorrect.\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    todo input format :todo XX\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    deadline input format :deadline XX /by dd-mm-yyyy hhmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    deadline input format :deadline XX /from dd-mm-yyyy hhmm /to dd-mm-yyyy hhmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"            return false;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"     * @param task Task information retrieved from text file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"     * @return \u003ccode\u003etrue\u003c/code\u003e if task is successfully extracted from file and \u003ccode\u003efalse\u003c/code\u003e otherwise.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"     * Status of extraction will be \u003ccode\u003efalse\u003c/code\u003e whenever none of the 3 specified regex expressions match the @param task string format.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"    public static boolean extractTaskFromFile(String task) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"        // Regex for each task type","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"        Pattern todoPattern \u003d Pattern.compile(Todo.REGEX_2);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(Deadline.DATE_TIME_REGEX_2);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"        Pattern eventPattern \u003d Pattern.compile(Event.DATE_TIME_REGEX_2);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"        Matcher todoMatcher \u003d todoPattern.matcher(task);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"        Matcher deadlineMatcher \u003d deadlinePattern.matcher(task);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"        Matcher eventMatcher \u003d eventPattern.matcher(task);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"        if (todoMatcher.matches() || deadlineMatcher.matches() || eventMatcher.matches()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"            if (todoMatcher.matches()) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"                boolean isDone \u003d todoMatcher.group(1).equals(\"X\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Todo(todoMatcher.group(2)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"                if (isDone) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"CVincent0907"},"content":"                    Tasklist.mark(Task.getTaskCount());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"CVincent0907"},"content":"                }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"CVincent0907"},"content":"            } else if (deadlineMatcher.matches()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"CVincent0907"},"content":"                boolean isDone \u003d deadlineMatcher.group(1).equals(\"X\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"CVincent0907"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\", Locale.ENGLISH);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Deadline(deadlineMatcher.group(2), LocalDateTime.parse(deadlineMatcher.group(3), formatter)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"CVincent0907"},"content":"                if (isDone) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"CVincent0907"},"content":"                    Tasklist.mark(Task.getTaskCount());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"CVincent0907"},"content":"                }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"CVincent0907"},"content":"            } else if (eventMatcher.matches()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"CVincent0907"},"content":"                boolean isDone \u003d eventMatcher.group(1).equals(\"X\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"CVincent0907"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\", Locale.ENGLISH);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.add(new Event(eventMatcher.group(2), LocalDateTime.parse(eventMatcher.group(3), formatter), LocalDateTime.parse(eventMatcher.group(4), formatter)));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"CVincent0907"},"content":"                if (isDone) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"CVincent0907"},"content":"                    Tasklist.mark(Task.getTaskCount());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"CVincent0907"},"content":"                }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"CVincent0907"},"content":"            Task.addTaskCount();","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"CVincent0907"},"content":"            return true;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"CVincent0907"},"content":"            return false;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-26","isFullCredit":false}],"authorContributionMap":{"CVincent0907":107}},{"path":"src/main/java/application/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package application;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.io.File;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"import task.Task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"import task.Tasklist;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":" * Storage class contains methods to read from storage (e.g. files), write","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":" * to storage and also create storage when it does not exist.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"public class Storage {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"    //private static final String PATH \u003d \"src/main/data/TearIT.txt\";","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"     * Writes each task\u0027s info to text file one step before exiting the system upon \"bye\" command.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"     * @throws IOException Throws IOException whenever files written to is corrupted.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"    public static void writeToFile() throws IOException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"        FileWriter fw \u003d new FileWriter(Storage.getPath(), false); //overwrite them","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"        for (int i \u003d 0; i \u003c Task.getTaskCount(); i++) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"            fw.write(Tasklist.getTaskString(i) + System.lineSeparator());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"        fw.close();","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"     * Read the text from text file and convert each line of text into its corresponding task object.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"     * @throws FileNotFoundException Throws FileNotFoundException when files read from does not exist.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"    public static void readFromFile() throws FileNotFoundException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"        File f \u003d new File(Storage.getPath());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"        if (!f.exists()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"            throw new FileNotFoundException();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"        Scanner s \u003d new Scanner(f);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"            boolean flag \u003d Parser.extractTaskFromFile(s.nextLine());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"     * Create a file named TearIT.txt under a created directory named data when TearIT.txt","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"     * does not exist under current working directory.","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"     * @throws IOException Throws IOException if file or directory could not be created when TearIT.txt does not exist.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"    public static void createFileIfNotExists() throws IOException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"        File file \u003d new File(Storage.getPath());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"        // Get the directory from the file path","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"        File parentDirectory \u003d file.getParentFile();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"        // Ensure the directory exists (create it if it doesn\u0027t)","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"        if (parentDirectory !\u003d null \u0026\u0026 !parentDirectory.exists()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"            boolean directoryCreated \u003d parentDirectory.mkdirs();  // Creates the directory, if needed","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"            if (!directoryCreated) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"                throw new IOException(\"Failed to create the directory at \" + parentDirectory.getPath());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"        // Check if the file exists and create it if not","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"        if (!file.exists()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"            boolean fileCreated \u003d file.createNewFile();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"            if (!fileCreated) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"                throw new IOException(\"Failed to create the file at \" + Storage.getPath());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"    private static String getPath() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"        return \"data/TearIT.text\";","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-26","isFullCredit":false}],"authorContributionMap":{"CVincent0907":82}},{"path":"src/main/java/application/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package application;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"import task.Task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"import task.Tasklist;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":" * Ui class contains function to simulate the interactions between system and user in the application.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"public class Ui {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"     * Simulates a system to interact with user via command prompt.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"     * @param ending Ending message received from \u003ccode\u003eTearIT.java.\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"    public static void echo(String ending) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"        try {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"            Storage.readFromFile();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"            try {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"                Storage.createFileIfNotExists();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"            } catch (IOException e1) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"                System.out.println(\"Error creating the file: \" + e1.getMessage());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"                System.exit(1);  // Exit if unable to create the file","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"        // ErrorCode added in to handle the command which is NOT TODO, DEADLINE, EVENT","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"        label:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"        while (true) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"            // SHOULD ADD AN ERROR HANDLING FOR THIS (currently: list 1/ list 2 also OK... future extension maybe what if list 2: the first two are displayed) TODO","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"            // This deals with empty command or mutliple spaces without command","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"            if (input.trim().isEmpty()) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"                System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"                System.out.println(\"    System does not support such command. Only todo ..., deadline ..., event..., mark..., unmark..., delete..., find ... list and bye only !\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"            } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"                String[] parts \u003d input.split(\" \");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"                String part \u003d parts[0];","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"                int len \u003d parts.length;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"                switch (part.toLowerCase()) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"                case \"list\":","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"                    Tasklist.list();","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"                case \"mark\":","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"                    if (len \u003d\u003d 1) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be an integer after mark !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"                    } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"                        try {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"                            Tasklist.markRemark(Integer.parseInt(parts[1]));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"                        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    \" + e.getMessage());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    The argument should be an integer!\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"                        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"                case \"unmark\":","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"                    if (len \u003d\u003d 1) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be an integer after unmark !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"                    } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"                        try {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"                            Tasklist.unmarkRemark(Integer.parseInt(parts[1]));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"                        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    \" + e.getMessage());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    The argument should be an integer!\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"CVincent0907"},"content":"                        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"CVincent0907"},"content":"                case \"bye\":","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"CVincent0907"},"content":"                    try {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"CVincent0907"},"content":"                        Storage.writeToFile();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"CVincent0907"},"content":"                    } catch (IOException e) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    Something went wrong: \" + e.getMessage());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    The data is not saved !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"CVincent0907"},"content":"                    break label;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"CVincent0907"},"content":"                case \"delete\":","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"CVincent0907"},"content":"                    if (len \u003d\u003d 1) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be an integer after delete !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"CVincent0907"},"content":"                    } else {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"CVincent0907"},"content":"                        try {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"CVincent0907"},"content":"                            Tasklist.delete(Integer.parseInt(parts[1]));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"CVincent0907"},"content":"                        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    \" + e.getMessage());","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    The argument should be an integer!\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"CVincent0907"},"content":"                        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"CVincent0907"},"content":"                case \"find\":","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"CVincent0907"},"content":"                    if (len \u003d\u003d 1) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be an argument after find !\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"CVincent0907"},"content":"                    } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"CVincent0907"},"content":"                        ArrayList\u003cTask\u003e t \u003d Tasklist.find(parts[1]);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"CVincent0907"},"content":"                        if (!t.isEmpty()) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    Here is/are the matching task(s) in your list:\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"CVincent0907"},"content":"                            Tasklist.list(t);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"CVincent0907"},"content":"                        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"CVincent0907"},"content":"                            System.out.println(\"    There is not any matching tasks in your list.\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"CVincent0907"},"content":"                        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"CVincent0907"},"content":"                default:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"CVincent0907"},"content":"                    int errorCode \u003d Tasklist.add(input);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"CVincent0907"},"content":"                    final int ERROR_CODE_UNKNOWN_COMMAND \u003d 0;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"CVincent0907"},"content":"                    final int ERROR_CODE_TODO_COMMAND \u003d -1;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"CVincent0907"},"content":"                    final int ERROR_CODE_DEADLINE_COMMAND \u003d -2;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"CVincent0907"},"content":"                    final int ERROR_CODE_EVENT_COMMAND \u003d -3;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"CVincent0907"},"content":"                    // should also specify input format to user also like from ... /to .... TODO","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"CVincent0907"},"content":"                    switch (errorCode) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"CVincent0907"},"content":"                    case ERROR_CODE_UNKNOWN_COMMAND:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    System does not support such command. Only todo ..., deadline ..., event..., mark..., unmark..., delete..., find... list and bye only !\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"CVincent0907"},"content":"                        break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"CVincent0907"},"content":"                    case ERROR_CODE_TODO_COMMAND:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be something after todo !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"CVincent0907"},"content":"                        break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"CVincent0907"},"content":"                    case ERROR_CODE_DEADLINE_COMMAND:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be something after deadline !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"CVincent0907"},"content":"                        break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"CVincent0907"},"content":"                    case ERROR_CODE_EVENT_COMMAND:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"CVincent0907"},"content":"                        System.out.println(\"    There must be something after event !\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"CVincent0907"},"content":"                        break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"CVincent0907"},"content":"                    default:","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"CVincent0907"},"content":"                    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"CVincent0907"},"content":"                    break;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"CVincent0907"},"content":"                }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"-------------------------------------------------\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(ending);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-26","isFullCredit":false}],"authorContributionMap":{"CVincent0907":161}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":" * Deadline class is one of the task type class extended from abstract class \u003ccode\u003eTask.java\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"    public static final String DATE_TIME_REGEX_1 \u003d","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"            \"deadline\\\\s+(.*?)\\\\s+/by\\\\s+(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\\\d{4})\\\\s+(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23)([0-5][0-9])\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"    // regex to recognize full date time 12-08-2027 1800 2027 and 1800 must be 4 digits","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"    public static final String DATE_TIME_REGEX_2 \u003d \"\\\\[D\\\\]\\\\[(X| )\\\\] (.*?) \\\\(by: (\\\\w+ \\\\d{1,2} \\\\d{4} \\\\d{1,2}:\\\\d{2} [APMapm]{2})\\\\)\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"        super(description);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"CVincent0907":25}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":" * Event class is one of the task type class extended from abstract class \u003ccode\u003eTask.java\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"    public static final String DATE_TIME_REGEX_1 \u003d","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"            \"event\\\\s+(.*?)\\\\s+/from\\\\s+(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\\\d{4})\\\\s+\" +","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"                    \"(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23)([0-5][0-9])\\\\s\" +","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"                    \"+/to\\\\s+(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\\\d{4})\\\\s+(00|01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|20|21|22|23)([0-5][0-9])\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"    public static final String DATE_TIME_REGEX_2 \u003d \"\\\\[E\\\\]\\\\[(X| )\\\\] (.*?) \\\\(from: (\\\\w+ \\\\d{1,2} \\\\d{4} \\\\d{1,2}:\\\\d{2} [APMapm]{2}) to: (\\\\w+ \\\\d{1,2} \\\\d{4} \\\\d{1,2}:\\\\d{2} [APMapm]{2})\\\\)\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"    private final LocalDateTime fromTime;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"    private final LocalDateTime toTime;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"    public Event(String description, LocalDateTime fromTime, LocalDateTime toTime) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"        super(description);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.fromTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")), this.toTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy hh:mm a\")));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"CVincent0907":32}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":" * Task class is an abstract class where task types class like \u003ccode\u003eTodo.java\u003c/code\u003e,","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":" * \u003ccode\u003eDeadline.java\u003c/code\u003e, \u003ccode\u003eEvent.java\u003c/code\u003e extended from.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"public abstract class Task {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"    private static int taskCount \u003d 0;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"    private final String description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"    public Task(String description) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"     * @return the total number of tasks that are successfully created.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"    public static int getTaskCount() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"        return Task.taskCount;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"     * Increase the total number of tasks upon successful creation by one.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"    public static void addTaskCount() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"        Task.taskCount++;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"     * Reduce the total number of tasks upon task deletion by one.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"    public static void reduceTaskCount() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"        Task.taskCount--;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"     * Set the task isDone status to \u003ccode\u003etrue\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"    public void mark() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"     * Set the task isDone status to \u003ccode\u003efalse\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"    public void unmark() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"    public String getLowerCaseDescription() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"        return this.description.toLowerCase();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"    @Override","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"    public String toString() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"        if (this.isDone) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"            return \"[X] \" + this.description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"            return \"[ ] \" + this.description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"CVincent0907":67}},{"path":"src/main/java/task/Tasklist.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"import application.Parser;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":" * Tasklist class contains methods to deal with the tasklist such as add, delete, list and etc.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"public class Tasklist {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"    private static final ArrayList\u003cTask\u003e TASK_LIST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"     * Processes the given input string to add a task to the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"     * Depending on the input, this method handles different types of tasks:","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"     * \"todo\", \"deadline\", or \"event\". It validates the input, extracts task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"     * details using regex, and adds the task to the task list if successful.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"     * It also prints feedback messages to the console about the operation\u0027s outcome.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"     * @param input The command string specifying the task to be added. It should","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"     *              start with one of the keywords: \"todo\", \"deadline\", or \"event\",","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"     *              followed by the relevant task details.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"     *                  \u003cli\u003e\u003ccode\u003e1\u003c/code\u003e: Task creation was successful.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"     *                  \u003cli\u003e\u003ccode\u003e0\u003c/code\u003e: The input did not start with a recognized keyword.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"     *                  \u003cli\u003e\u003ccode\u003e-1\u003c/code\u003e: The \"todo\" task type was specified but lacked details.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"     *                  \u003cli\u003e\u003ccode\u003e-2\u003c/code\u003e: The \"deadline\" task type was specified but lacked details.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"     *                  \u003cli\u003e\u003ccode\u003e-3\u003c/code\u003e: The \"event\" task type was specified but lacked details.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"     *              \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"     * @return An integer status code representing the result of the operation:","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"    public static int add(String input) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"        int len \u003d parts.length;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"        boolean flag;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"        if (input.toLowerCase().startsWith(\"todo\")) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"            if (len \u003c\u003d 1) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"                return -1;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"            flag \u003d Parser.extractAndCreateTask(input, Todo.REGEX_1, 1);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"        } else if (input.toLowerCase().startsWith(\"deadline\")) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"            if (len \u003c\u003d 1) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"                return -2;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"            flag \u003d Parser.extractAndCreateTask(input, Deadline.DATE_TIME_REGEX_1, 2);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"        } else if (input.toLowerCase().startsWith(\"event\")) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"            if (len \u003c\u003d 1) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"                return -3;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"            flag \u003d Parser.extractAndCreateTask(input, Event.DATE_TIME_REGEX_1, 3);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"            return 0;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"        if (flag) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    Got it. I\u0027ve added this task:\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"            String message1 \u003d String.format(\"       %s\", Tasklist.TASK_LIST.get(Task.getTaskCount() - 1));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(message1);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    task.Task creation unsuccessful !\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"        String message2 \u003d String.format(\"    Now you have %d tasks in the list.\", Task.getTaskCount());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(message2);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"        return 1;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"     * Adds a task object directly to the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"     * This method appends the provided {@link Task} object (e.g., {@link Todo}, {@link Deadline}, or {@link Event})","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"     * to the task list without any additional processing or validation.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"     * @param task The {@link Task} object to be added to the task list. It should be a valid task instance such as","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"     *             {@link Todo}, {@link Deadline}, or {@link Event}.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"    public static void add(Task task) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"CVincent0907"},"content":"        Tasklist.TASK_LIST.add(task);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"CVincent0907"},"content":"     * Deletes a task from the task list based on its position.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"CVincent0907"},"content":"     * This method removes the task at the specified position in the task list if the position is valid.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"CVincent0907"},"content":"     * It also updates the task count and provides console feedback about the operation.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 1-based position of the task to be deleted. It must be greater than 0 and less than","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"CVincent0907"},"content":"     *          or equal to the total number of tasks in the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"CVincent0907"},"content":"     * @throws NumberFormatException If the input parameter is not a valid integer.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"CVincent0907"},"content":"     *                               \u003cp\u003eConsole Output:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"CVincent0907"},"content":"     *                               \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"CVincent0907"},"content":"     *                                   \u003cli\u003eIf the task is successfully deleted, the method prints the removed task and the updated task count.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"CVincent0907"},"content":"     *                                   \u003cli\u003eIf the specified position is invalid, it prints an error message indicating the task does not exist.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"CVincent0907"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"CVincent0907"},"content":"    public static void delete(Integer i) throws NumberFormatException {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"CVincent0907"},"content":"        if (i \u003c\u003d Task.getTaskCount() \u0026\u0026 i !\u003d 0) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"CVincent0907"},"content":"            String message \u003d String.format(\"    %s\", Tasklist.TASK_LIST.get(i - 1).toString());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"CVincent0907"},"content":"            Tasklist.TASK_LIST.remove(i - 1);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"CVincent0907"},"content":"            Task.reduceTaskCount();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    Hey bro! I have removed task \" + i + \".\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(message);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    Hey bro! You do not have task \" + i + \".\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"CVincent0907"},"content":"        String message \u003d String.format(\"    Now you have %d tasks in the list.\", Task.getTaskCount());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(message);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"CVincent0907"},"content":"     * Displays all tasks in the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"CVincent0907"},"content":"     * This method prints a numbered list of all tasks currently stored in the task list to the console.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"CVincent0907"},"content":"     * Each task is displayed on a new line, prefixed with its position in the list (1-based index).","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"CVincent0907"},"content":"     * The method also includes formatting lines for better readability.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003eConsole Output:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"CVincent0907"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"CVincent0907"},"content":"     *     \u003cli\u003eA header indicating the start of the task list.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"CVincent0907"},"content":"     *     \u003cli\u003eA numbered list of tasks in the order they are stored.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"CVincent0907"},"content":"     *     \u003cli\u003eA footer indicating the end of the task list.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"CVincent0907"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"CVincent0907"},"content":"    public static void list() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    Here are the tasks in your list:\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"CVincent0907"},"content":"        for (int i \u003d 0; i \u003c Task.getTaskCount(); i++) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    \" + (i + 1) + \". \" + Tasklist.TASK_LIST.get(i));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"CVincent0907"},"content":"        System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"CVincent0907"},"content":"     * Marks or unmarks a task in the task list and displays the updated list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"CVincent0907"},"content":"     * This overloaded version of the {@code list} method updates the completion status of a specified task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"CVincent0907"},"content":"     * and prints a message, followed by the updated task list. If the specified task does not exist, it","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"CVincent0907"},"content":"     * displays an error message and still shows the current task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"CVincent0907"},"content":"     * @param i    The 1-based position of the task to mark or unmark. It must be greater than 0 and less","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"CVincent0907"},"content":"     *             than or equal to the total number of tasks in the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"CVincent0907"},"content":"     * @param mark {@code true} to mark the task as completed, or {@code false} to unmark it.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"CVincent0907"},"content":"     * @param msg  A custom message to display after marking/unmarking the task. This can include","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"CVincent0907"},"content":"     *             congratulatory or humorous remarks based on the task\u0027s status.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"CVincent0907"},"content":"     *             \u003cp\u003eConsole Output:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"CVincent0907"},"content":"     *             \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"CVincent0907"},"content":"     *                 \u003cli\u003eIf the specified task is valid:","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"CVincent0907"},"content":"     *                     \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"CVincent0907"},"content":"     *                         \u003cli\u003eMarks/unmarks the task based on the {@code mark} parameter.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"CVincent0907"},"content":"     *                         \u003cli\u003ePrints the custom message {@code msg} along with the task\u0027s position.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"CVincent0907"},"content":"     *                         \u003cli\u003eDisplays the updated list of tasks.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"CVincent0907"},"content":"     *                     \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"CVincent0907"},"content":"     *                 \u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"CVincent0907"},"content":"     *                 \u003cli\u003eIf the specified task is invalid:","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"CVincent0907"},"content":"     *                     \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"CVincent0907"},"content":"     *                         \u003cli\u003ePrints an error message indicating the task does not exist.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"CVincent0907"},"content":"     *                         \u003cli\u003eDisplays the current list of tasks.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"CVincent0907"},"content":"     *                     \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"CVincent0907"},"content":"     *                 \u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"CVincent0907"},"content":"     *             \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"CVincent0907"},"content":"    public static void list(Integer i, boolean mark, String msg) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"CVincent0907"},"content":"        if (i \u003c\u003d Task.getTaskCount() \u0026\u0026 i !\u003d 0) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"CVincent0907"},"content":"            if (mark) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.TASK_LIST.get(i - 1).mark();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"CVincent0907"},"content":"            } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"CVincent0907"},"content":"                Tasklist.TASK_LIST.get(i - 1).unmark();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(msg + i + \" .\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"CVincent0907"},"content":"            for (int j \u003d 0; j \u003c Task.getTaskCount(); j++) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"CVincent0907"},"content":"                System.out.println(\"    \" + (j + 1) + \". \" + Tasklist.TASK_LIST.get(j));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"CVincent0907"},"content":"        } else {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"You do not have task \" + i + \"!\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"CVincent0907"},"content":"            for (int j \u003d 0; j \u003c Task.getTaskCount(); j++) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"CVincent0907"},"content":"                System.out.println(\"    \" + (j + 1) + \". \" + Tasklist.TASK_LIST.get(j));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    -------------------------------------------------\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"CVincent0907"},"content":"     * Lists the tasks that match the provided keyword.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"CVincent0907"},"content":"     * This function iterates over the given list of tasks and displays each task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"CVincent0907"},"content":"     * with its index in the list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"CVincent0907"},"content":"     * @param lst the list of tasks that match the search keyword","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"CVincent0907"},"content":"    public static void list(ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"CVincent0907"},"content":"        int i \u003d 1;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"CVincent0907"},"content":"        for (Task t : lst) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"CVincent0907"},"content":"            System.out.println(\"    \" + i + \". \" + t.toString());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"CVincent0907"},"content":"            i++;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"CVincent0907"},"content":"     * Marks the specified task as done and displays it along with a congratulatory remark.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 1-based position of the task to mark as done. It must be greater than 0 and less","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"CVincent0907"},"content":"     *          than or equal to the total number of tasks in the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"CVincent0907"},"content":"     *          \u003cp\u003eConsole Output:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"CVincent0907"},"content":"     *          \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003eMarks the specified task as done.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003ePrints a congratulatory message, \"Well Done! You finished task {i}\".\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003eDisplays the updated list of tasks.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"CVincent0907"},"content":"     *          \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"CVincent0907"},"content":"    public static void markRemark(Integer i) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"CVincent0907"},"content":"        Tasklist.list(i, true, \"    Well Done! You finished task \");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"CVincent0907"},"content":"     * Unmarks the specified task as done and displays it along with a message of disappointment.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 1-based position of the task to unmark. It must be greater than 0 and less","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"CVincent0907"},"content":"     *          than or equal to the total number of tasks in the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"CVincent0907"},"content":"     *          \u003cp\u003eConsole Output:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"CVincent0907"},"content":"     *          \u003cul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003eUnmarks the specified task as not done.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003ePrints a message, \"Oh No! You haven\u0027t completed task {i}\".\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"CVincent0907"},"content":"     *              \u003cli\u003eDisplays the updated list of tasks.\u003c/li\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"CVincent0907"},"content":"     *          \u003c/ul\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"CVincent0907"},"content":"    public static void unmarkRemark(Integer i) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"CVincent0907"},"content":"        Tasklist.list(i, false, \"    Oh No! You haven\u0027t completed task \");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"CVincent0907"},"content":"     * Marks the specified task as done without displaying any message or list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"CVincent0907"},"content":"     * This method is used when tasks are being loaded from a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 0-based index of the task to mark as done. It must be a valid index within","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"CVincent0907"},"content":"     *          the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"CVincent0907"},"content":"    public static void mark(int i) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"CVincent0907"},"content":"        Tasklist.TASK_LIST.get(i).mark();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"CVincent0907"},"content":"     * Unmarks the specified task as done without displaying any message or list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"CVincent0907"},"content":"     * This method is used when tasks are being loaded from a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 0-based index of the task to unmark as not done. It must be a valid index","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"CVincent0907"},"content":"     *          within the task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"CVincent0907"},"content":"    public static void unmark(int i) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"CVincent0907"},"content":"        Tasklist.TASK_LIST.get(i).unmark();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"CVincent0907"},"content":"     * Searches for tasks that contain the given keyword in their descriptions.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"CVincent0907"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"CVincent0907"},"content":"     * This function iterates over all tasks in the task list and adds the tasks","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"CVincent0907"},"content":"     * whose description contains the provided keyword (case-insensitive) to a new list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"CVincent0907"},"content":"     * @param input the keyword to search for in task descriptions","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"CVincent0907"},"content":"     * @return an ArrayList containing the tasks that match the keyword","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"CVincent0907"},"content":"    public static ArrayList\u003cTask\u003e find(String input) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"CVincent0907"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"CVincent0907"},"content":"        for (Task t : TASK_LIST) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"CVincent0907"},"content":"            if (t.getLowerCaseDescription().contains(input.toLowerCase())) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"CVincent0907"},"content":"                lst.add(t);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"CVincent0907"},"content":"            }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"CVincent0907"},"content":"        return lst;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"CVincent0907"},"content":"     * Retrieves the string representation of the specified task.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"CVincent0907"},"content":"     *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"CVincent0907"},"content":"     * @param i The 0-based index of the task to retrieve. It must be a valid index within the","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"CVincent0907"},"content":"     *          task list.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"CVincent0907"},"content":"     * @return A string representation of the specified task.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"CVincent0907"},"content":"    public static String getTaskString(int i) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"CVincent0907"},"content":"        return Tasklist.TASK_LIST.get(i).toString();","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"CVincent0907":302}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package task;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":" * Todo class is one of the task type class extended from abstract class \u003ccode\u003eTask.java\u003c/code\u003e.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"    public static final String REGEX_1 \u003d \"(?i)^todo\\\\s+(.+)$\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"    public static final String REGEX_2 \u003d \"\\\\[T\\\\]\\\\[(X| )\\\\] (.*)\";","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"        super(description);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"        return String.format(\"[T]%s \", super.toString());","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"CVincent0907":19}},{"path":"src/test/java/test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package test;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"import application.Parser;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":"import task.Deadline;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":"import task.Event;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":"import task.Todo;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":" * This class contains unit tests for the Parser class methods.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":" * The tests validate the functionality of extracting and creating tasks from","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":" * both user input and saved files using formatted and unformatted strings.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":" *","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":" * \u003cp\u003eTest Naming Convention:\u003c/p\u003e","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":" * Tests follow the convention: methodName_inputType_expectedOutput","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"public class ParserTest {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts and creates a Todo task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted user input string.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_toDoInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractAndCreateTask(\"todo Read Book\", Todo.REGEX_1, 1));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts and creates a Deadline task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted user input string.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_deadlineInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractAndCreateTask(\"deadline task /by 18-09-2023 1800\", Deadline.DATE_TIME_REGEX_1, 2));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts and creates an Event task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted user input string.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_eventInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractAndCreateTask(\"event sport /from 18-09-2023 1800 /to 20-08-2024 1930\", Event.DATE_TIME_REGEX_1, 3));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract and create a Deadline task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"     * from an improperly formatted user input string.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_deadlineInputUnformat_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractAndCreateTask(\"deadline sport/ by 17:00\", Deadline.DATE_TIME_REGEX_1, 2));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract and create a Deadline task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"     * from a user input string with invalid date format.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_deadlineInputInvalid_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractAndCreateTask(\"deadline sport /by 19-13-2025 1830\", Deadline.DATE_TIME_REGEX_1, 2));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract and create an Event task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"     * from an improperly formatted user input string.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_eventInputUnformat_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractAndCreateTask(\"event sport/from 18-09-2023 1800 /to 20-13-2024 1930\", Event.DATE_TIME_REGEX_1, 3));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract and create an Event task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"     * from a user input string with invalid date values.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"CVincent0907"},"content":"    public void extractAndCreateTask_eventInputInvalid_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractAndCreateTask(\"event sport /from 18-09-2023 1800 /to 20-13-2024 1930\", Event.DATE_TIME_REGEX_1, 3));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts a Todo task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_todoInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractTaskFromFile(\"[T][ ] read book\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts a Deadline task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_deadlineInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractTaskFromFile(\"[D][X] bath (by: Sep 17 2023 06:00 PM)\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method correctly extracts an Event task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"CVincent0907"},"content":"     * from a properly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_eventInput_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"CVincent0907"},"content":"        assertTrue(Parser.extractTaskFromFile(\"[E][X] bath (from: Sep 17 2023 06:00 PM to: Oct 18 2025 11:59 AM)\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract a Todo task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"CVincent0907"},"content":"     * from an improperly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_todoInputUnformat_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractTaskFromFile(\"[T][] read book\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract a Deadline task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"CVincent0907"},"content":"     * from an improperly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_deadlineInputUnformat_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractTaskFromFile(\"[D][X] bath (by:Sep 17 2023 06:00 PM)\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"CVincent0907"},"content":"     * Tests if the method fails to extract an Event task","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"CVincent0907"},"content":"     * from an improperly formatted string saved in a file.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"CVincent0907"},"content":"    public void extractTaskFromFile_eventInputUnformat_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"CVincent0907"},"content":"        assertFalse(Parser.extractTaskFromFile(\"[E][X] bath (from: Sep 17 2023 06:00PM to: Oct 18 2025 11:59 AM)\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"CVincent0907":142}},{"path":"src/test/java/test/TasklistTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"package test;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"import task.Tasklist;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"CVincent0907"},"content":"/**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"CVincent0907"},"content":" * TasklistTest is a JUnit test class that verifies the functionality of the Tasklist class.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"CVincent0907"},"content":" * It contains tests for adding, deleting, and handling invalid inputs for tasks.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"CVincent0907"},"content":" */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"CVincent0907"},"content":"public class TasklistTest {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a todo task without arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"CVincent0907"},"content":"     * Expects a failure with a return value of -1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"CVincent0907"},"content":"    public void add_toDoNoArg_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(-1, Tasklist.add(\"todo \"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a todo task with valid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"CVincent0907"},"content":"    public void add_toDoValidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"todo read book\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a todo task with invalid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"CVincent0907"},"content":"    public void add_toDoInValidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"todo read book\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a deadline task without arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"CVincent0907"},"content":"     * Expects a failure with a return value of -2.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"CVincent0907"},"content":"    public void add_deadlineNoArg_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(-2, Tasklist.add(\"deadline \"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a deadline task with valid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"CVincent0907"},"content":"    public void add_deadlineValidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"deadline read book /by 12-08-2024 1800\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a deadline task with invalid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"CVincent0907"},"content":"    public void add_deadlineInvalidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"deadline read book /by12-08-2024 1800\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding an event task without arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"CVincent0907"},"content":"     * Expects a failure with a return value of -3.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"CVincent0907"},"content":"    public void add_eventNoArg_fail() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(-3, Tasklist.add(\"event \"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding an event task with valid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"CVincent0907"},"content":"    public void add_eventValidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"event sport /from 12-08-2024 1800 /to 13-08-2024 1800\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding an event task with invalid arguments.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"CVincent0907"},"content":"     * Expects success with a return value of 1.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"CVincent0907"},"content":"    public void add_eventInvalidArg_success() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(1, Tasklist.add(\"event sport /from12-08-2024 1800 /to 13-08-2024 1800\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a task with an empty or invalid command.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"CVincent0907"},"content":"     * Expects a failure with a return value of 0.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"CVincent0907"},"content":"    public void add_eventInvalidCommand_fail_1() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(0, Tasklist.add(\" \"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"CVincent0907"},"content":"     * Tests adding a task with an unrecognized command.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"CVincent0907"},"content":"     * Expects a failure with a return value of 0.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"CVincent0907"},"content":"    public void add_eventInvalidCommand_fail_2() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"CVincent0907"},"content":"        assertEquals(0, Tasklist.add(\"hahaha\"));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"CVincent0907"},"content":"    /**","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"CVincent0907"},"content":"     * Tests deleting a task with an invalid input of type String.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"CVincent0907"},"content":"     * Expects a NumberFormatException.","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"CVincent0907"},"content":"     */","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"CVincent0907"},"content":"    @Test","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"CVincent0907"},"content":"    public void delete_invalidInputTypeString_fail_2() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"CVincent0907"},"content":"        try {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"CVincent0907"},"content":"            String input \u003d \"hahaha\";","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"CVincent0907"},"content":"            Tasklist.delete(Integer.parseInt(input));","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"CVincent0907"},"content":"            fail(\"Expected NumberFormatException was not thrown\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"CVincent0907"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"CVincent0907"},"content":"            assertEquals(\"For input string: \\\"hahaha\\\"\", e.getMessage());","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"CVincent0907"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"CVincent0907"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"CVincent0907"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"CVincent0907"},"content":"}","lastModifiedDate":"2025-01-27","isFullCredit":false}],"authorContributionMap":{"CVincent0907":135}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CVincent0907"},"content":"hi","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"CVincent0907"},"content":"todo read book","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"CVincent0907"},"content":"deadline return book /by 7pm","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"CVincent0907"},"content":"event birthday party /from Mon 2pm /to Mon 5pm","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"CVincent0907"},"content":"list","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"CVincent0907"},"content":"mark 1","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"CVincent0907"},"content":"unmark 1","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"CVincent0907"},"content":"mark sh","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"CVincent0907"},"content":"bye","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"CVincent0907":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"CVincent0907"},"content":"java -classpath ..\\bin TearIT \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"CVincent0907":1,"-":20}}]
