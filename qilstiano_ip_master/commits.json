{"authorDailyContributionsMap":{"qilstiano":[{"date":"2025-01-23","commitResults":[{"hash":"d3a0f150565d35709f871df317ed7f54b37ce54f","isMergeCommit":false,"messageTitle":"feat/greeting + feat/farewell","messageBody":"Einstein\n- added basic greeting\n- added basic farewell\n","fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":10}}},{"hash":"880cf2747ed8fe269983e05fb6b49549a994efed","isMergeCommit":false,"messageTitle":"Revert \"feat/greeting + feat/farewell\"","messageBody":"This reverts commit d3a0f150565d35709f871df317ed7f54b37ce54f.\n","fileTypesAndContributionMap":{"java":{"insertions":10,"deletions":25}}},{"hash":"310240ba146863b6c4f9ecee5ec1fa1e026ac634","isMergeCommit":false,"messageTitle":"feat/einstein","messageBody":"feat/greeting\nfeat/farewell\n","tags":["Level-0"],"fileTypesAndContributionMap":{"java":{"insertions":25,"deletions":10}}},{"hash":"9575cd033ff73d254335637c407fe423efac4c9d","isMergeCommit":false,"messageTitle":"feat/echo","messageBody":"feat/echo\nstyles/ascii\n","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":32,"deletions":5}}},{"hash":"6b92e7aee4a19c054c64491017e314909313bb03","isMergeCommit":false,"messageTitle":"feat/tasks","messageBody":"feat/add-tasks\nfeat/list-tasks\n","tags":["Level-2"],"fileTypesAndContributionMap":{"java":{"insertions":51,"deletions":2}}},{"hash":"9db2078c0724d8343c5fcb5f419c89592985b8f1","isMergeCommit":false,"messageTitle":"feat/tasks","messageBody":"feat/mark-done\nfeat/unmark-done\nstyles/gradient-ascii\n","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":110,"deletions":37}}}]},{"date":"2025-01-24","commitResults":[{"hash":"266cad8cdbd3f8fa3df112f8d19fec63c7e1e740","isMergeCommit":false,"messageTitle":"feat/tasks","messageBody":"feat/todo\nfeat/event\nfeat/deadline\n","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":116,"deletions":41}}},{"hash":"3a861fd26ecf92948d6abab4f49e839f581a19f5","isMergeCommit":false,"messageTitle":"testing/automated-ui-test","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":7,"deletions":0},"bat":{"insertions":2,"deletions":2},"sh":{"insertions":1,"deletions":1}}},{"hash":"7660470d29f29a05e18c88e8ecabb451be323aac","isMergeCommit":false,"messageTitle":"feat/error-handling","messageBody":"","tags":["Level-5"],"fileTypesAndContributionMap":{"java":{"insertions":90,"deletions":49}}},{"hash":"8ce7b4d892e0cd2a53ad0497ed5ab9593af32b98","isMergeCommit":false,"messageTitle":"feat/delete","messageBody":"- feat/delete\n- feat/help\n- styles/einstein-response\n- styles/responder\n","tags":["Level-6"],"fileTypesAndContributionMap":{"java":{"insertions":87,"deletions":45}}},{"hash":"791251ec2b8c833f84d6b6b0bfabbc80c77a84a0","isMergeCommit":false,"messageTitle":"README/v1","messageBody":"basic README added","fileTypesAndContributionMap":{"md":{"insertions":288,"deletions":26}}},{"hash":"fc8aa1740356905afd13098a7020e0d82b65b0b4","isMergeCommit":false,"messageTitle":"update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}}]},{"date":"2025-02-01","commitResults":[{"hash":"cffb46e5a256762c1606ceebcf5bb6172887ef86","isMergeCommit":false,"messageTitle":"Add task persistence with file-based storage","messageBody":"Implement automatic saving and loading of tasks to/from a file to ensure data persistence.\n\n* Save tasks to `./data/duke.txt` whenever the task list changes.\n* Load tasks from the file when the chatbot starts.\n* Handle cases where the file or directory does not exist (Stretch goal)\n* Add basic handling for corrupted data in the file.\n* Use OS-independent file paths for compatibility across systems.\n\nThis ensures that tasks are preserved between sessions and improves the chatbot\u0027s usability.\n","tags":["Level-7"],"fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":0},"java":{"insertions":109,"deletions":0}}},{"hash":"844082d1484e101ae3c9710dcc8de1777d198797","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-Level-7\u0027","messageBody":"Add task persistence with file-based storage\n\n- Save tasks to `./data/duke.txt` whenever the task list changes.\n- Load tasks from the file when the chatbot starts.\n- Handle cases where the file or directory does not exist.\n- Add basic handling for corrupted data in the file.\n- Use OS-independent file paths for compatibility across systems.\n\nThis ensures that tasks are preserved between sessions and improves the chatbot\u0027s usability.\n","fileTypesAndContributionMap":{}},{"hash":"8581a5acdbe3ac8b53ff850a380bd995a92b059e","isMergeCommit":false,"messageTitle":"Update Event and Deadline classes to use LocalDateTime","messageBody":"Refactor Event and Deadline classes to use java.time.LocalDateTime for date and time handling.\n\n* Replace String-based date fields with LocalDateTime in Event and Deadline classes.\n* Add date parsing logic to handle user input in formats like \"dd/MM/yyyy HHmm\".\n* Format dates for display in a user-friendly format (e.g., \"MMM dd yyyy, h:mm a\").\n* Update file saving and loading logic to support LocalDateTime serialization.\n\nThis change improves date and time handling, making it more robust and user-friendly.\n","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":7}}},{"hash":"edb3e962ca40e7d6f7d8dc66f2b534414e825baf","isMergeCommit":false,"messageTitle":"Add date parsing, update deadline/event handling, and implement stretch goal","messageBody":"Enhance chatbot to handle dates and times effectively.\n\n* Add date parsing logic using `DateTimeFormatter` to parse user input (e.g., \"dd/MM/yyyy HHmm\").\n* Update `Deadline` and `Event` classes to use `LocalDateTime` for date and time storage.\n* Modify `handleDeadlineCommand` and `handleEventCommand` to parse and store dates correctly.\n* Implement stretch goal: Add `list \u003cdate\u003e` command to display tasks occurring on a specific date.\n* Update file saving and loading logic to support `LocalDateTime` serialization.\n\nThis change improves the chatbot\u0027s ability to understand and work with dates and times, providing a more intuitive user experience.\n","fileTypesAndContributionMap":{"java":{"insertions":41,"deletions":3}}},{"hash":"73494430e903cf3f5e96be495ae937af1f44402e","isMergeCommit":false,"messageTitle":"Update file handling and help function","messageBody":"Enhance chatbot functionality and improve file handling for date and time support.\n\n* Update `displayHelp` function to include the new `list \u003cdate\u003e` command and reflect the updated date format for deadlines and events.\n* Modify `saveTasksToFile` and `loadTasksFromFile` to handle `LocalDateTime` .\n* Ensure file saving and loading supports the new date and time format (dd/MM/yyyy HHmm).\n\nThese changes improve user guidance and ensure consistent handling of dates across file operations.\n","fileTypesAndContributionMap":{"java":{"insertions":44,"deletions":46}}},{"hash":"34ed5ddcc5857eef213fb3324106bd686a4a31d7","isMergeCommit":false,"messageTitle":"Update processCommands for date and time functionality","messageBody":"Enhance processCommands to support new date and time features.\n\n* Add support for parsing and handling dates in `deadline` and `event` commands.\n* Implement the `list \u003cdate\u003e` command to display tasks occurring on a specific date.\n* Improve error handling for invalid date formats and commands.\n* Ensure seamless integration with the updated `Deadline` and `Event` classes.\n\nThis change enables the chatbot to understand and process dates and times effectively, improving user interaction.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":4},"java":{"insertions":9,"deletions":4}}},{"hash":"7c9da7e9963c5cee083c16a48aa7145dd327ad40","isMergeCommit":false,"messageTitle":"Refactor list command handling to encapsulate logic in listTasks","messageBody":"Encapsulate the logic for handling the list command within the listTasks method.\n\n* Modify listTasks to handle both \"list\" and \"list \u003cdate\u003e\" commands.\n* Remove specific handling of \"list \u003cdate\u003e\" from processCommands.\n* Simplify processCommands to only call listTasks for list-related commands.\n* Ensure listTasksByDate remains unchanged and is called internally by listTasks.\n\nThis refactoring improves code readability and maintainability by centralizing the logic for listing tasks.\n","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":29}}},{"hash":"73ae7b10c86f4c70e4af9d0de680037df2ec37b4","isMergeCommit":true,"messageTitle":"Integrate branch-Level-8 into master, adding support for date and time handling.","messageBody":"Key changes included in this merge:\n* Added date parsing and formatting using `java.time.LocalDateTime`.\n* Updated `Deadline` and `Event` classes to store dates as `LocalDateTime`.\n* Implemented the `list \u003cdate\u003e` command to filter tasks by a specific date.\n* Refactored `listTasks` to handle both \"list\" and \"list \u003cdate\u003e\" commands.\n* Improved error handling for invalid date formats and commands.\n* Updated file saving and loading to support `LocalDateTime` serialization.\n\nThis merge enhances the chatbot\u0027s functionality by enabling robust date and time handling, improving user interaction and task management.\n","tags":["Level-8"],"fileTypesAndContributionMap":{}},{"hash":"421bfb990dd40b877b195ad0dcffd9915ec66f62","isMergeCommit":false,"messageTitle":"Refactor: Apply OOP principles across classes and methods","messageBody":"Refactoring of methods and classes to improve modularity, reusability, and maintainability of the codebase.\n\nBy applying OOP principles, the code becomes easier to extend and maintain for better long-term scalability.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":431,"deletions":274}}},{"hash":"879ea0ff849e3b38db31da6fa6997a6d9591d0b9","isMergeCommit":true,"messageTitle":"Refactor codebase to adhere to OOP principles","messageBody":"Refactor the codebase to improve modularity, maintainability, and adherence to OOP principles.\n\nKey changes:\n- Extracted closely related code into separate classes:\n  - `Ui`: Handles all user interactions.\n  - `Storage`: Manages loading and saving tasks to/from a file.\n  - `Parser`: Parses user commands and returns appropriate `Command` objects.\n  - `TaskList`: Manages the list of tasks (e.g., adding, deleting, marking tasks).\n- Introduced the `Command` interface and implemented command classes (e.g., `AddCommand`, `DeleteCommand`, `ExitCommand`) to encapsulate the logic for each user command.\n- Simplified the `Einstein` class to delegate responsibilities to the extracted classes, improving readability and maintainability.\n\nBenefits of this refactoring:\n1. **Modularity**: Each class has a single responsibility, making the code easier to understand and extend.\n2. **Reusability**: Common functionality (e.g., parsing dates, saving tasks) is centralized and reusable.\n3. **Maintainability**: Changes to one part of the code (e.g., command logic) are isolated and less likely to affect other parts.\n4. **Scalability**: Adding new commands or features is now straightforward, as the structure is well-organized.\n\nThis refactoring ensures the codebase is more robust, flexible, and aligned with OOP best practices.\n","tags":["A-MoreOOP"],"fileTypesAndContributionMap":{}},{"hash":"9fd74a7cb98e1c3d323c6aaba216d611d8a9eeef","isMergeCommit":false,"messageTitle":"Merge branch \u0027branch-A-Packages\u0027","messageBody":"Refactor the codebase to organize classes into suitable Java packages.\n\nKey changes:\n- Created the following packages under `duke`:\n  - `einstein.command`: Contains all command-related classes (e.g., `AddCommand`, `DeleteCommand`).\n  - `einstein.exception`: Contains custom exceptions (e.g., `EinsteinException`).\n  - `einstein.storage`: Contains file storage-related classes (e.g., `Storage`).\n  - `einstein.task`: Contains task-related classes (e.g., `Task`, `Todo`, `Deadline`, `Event`).\n  - `einstein.ui`: Contains user interaction-related classes (e.g., `Ui`).\n- Updated package declarations and import statements in all classes to reflect the new package structure.\n- Moved the main application class (`Einstein`) to the root `einstein` package.\n\nBenefits of this refactoring:\n1. **Modularity**: Classes are grouped into packages based on their responsibilities, making the codebase easier to navigate and maintain.\n2. **Readability**: The package structure provides a clear separation of concerns, improving code readability.\n3. **Scalability**: The organized structure makes it easier to add new features or classes in the future.\n\nThis change aligns with OOP principles and improves the overall structure of the codebase.\n","tags":["A-Packages"],"fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":1},"java":{"insertions":788,"deletions":644}}},{"hash":"56e3c591102aaa5565311b51b5dbf3f14e04170c","isMergeCommit":true,"messageTitle":"Merge remote-tracking branch \u0027origin/add-gradle-support\u0027","messageBody":"","tags":["A-Gradle"],"fileTypesAndContributionMap":{}},{"hash":"fdce585fbfd8bbbdcf3e35887a8edae9efd7edc7","isMergeCommit":false,"messageTitle":"Add unit tests for Parser, TaskList, and Storage","messageBody":"Added JUnit tests for Parser, TaskList, and Storage to ensure correct behavior.\n\n- ParserTest: Verifies that parsing \"todo\" and \"deadline\" commands returns the correct command objects and handles invalid input properly.\n- StorageTest: Ensures tasks are saved to and loaded from a file correctly.\n- TaskListTest: Checks adding and deleting tasks, including handling invalid deletions.\n\nThese tests improve code reliability and facilitate future refactoring.\n\nLet\u0027s:\n- Continue to regularly update test cases and implement future test cases for future functionalities (stretch goal)\n","tags":["v0.1","A-Jar","A-JUnit"],"fileTypesAndContributionMap":{"gradle":{"insertions":3,"deletions":2},"txt":{"insertions":3,"deletions":3},"java":{"insertions":109,"deletions":1}}}]},{"date":"2025-02-02","commitResults":[{"hash":"abc2c387c1c1c5598c07ac184528d99d372ec946","isMergeCommit":false,"messageTitle":"Update build.gradle","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0}}}]},{"date":"2025-02-06","commitResults":[{"hash":"65fcf4fcc2dec96837c20ec4f15fb796723273f9","isMergeCommit":false,"messageTitle":"Add Javadocs to Parser class","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":15,"deletions":0}}},{"hash":"f484ff1600063328d1467821247b68baa8a7c972","isMergeCommit":false,"messageTitle":"Add Javadocs for EinsteinException","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":1}}},{"hash":"2f68d808232ff8eef0976afb92aba8cc32489626","isMergeCommit":false,"messageTitle":"Add Javadocs for Storage and TaskList","messageBody":"Added Javadocs for code readability\nMinor edits to EinsteinException and\nStorage code style\n","fileTypesAndContributionMap":{"java":{"insertions":147,"deletions":78}}},{"hash":"01828ba3acf061512413c34dbec486a797d0db87","isMergeCommit":false,"messageTitle":"Add Javadocs for Deadline, Event, Task and Todo","messageBody":"- Add Javadocs for code readability\n- Rectify code style issues\n","fileTypesAndContributionMap":{"java":{"insertions":104,"deletions":30}}},{"hash":"538dfd8f8b8dccc1b3acf31ce1e2973f02dbf53e","isMergeCommit":false,"messageTitle":"Add SearchCommand to support task searching","messageBody":"Currently, users have no way to search for tasks by keyword in their\ndescriptions. This makes it difficult to quickly locate specific tasks\nin long task lists.\n\nIntroduce `FindCommand`, which allows users to retrieve tasks\ncontaining a specified keyword. Additionally, update `Parser`\nto recognize the `find` command and invoke `SearchCommand` accordingly.\n\nWith this enhancement, users can efficiently filter their task list\nusing a simple search query.\n","fileTypesAndContributionMap":{"java":{"insertions":199,"deletions":85}}}]},{"date":"2025-02-07","commitResults":[{"hash":"3ad01d254e2e295e48dc79887f9b2948e7ff6c8a","isMergeCommit":false,"messageTitle":"Refactor: Ensure code adheres to Coding Standard","messageBody":"Current codebase contains inconsistencies and deviations from our\nestablished Coding Standard. This affects code readability and\nmaintainability.\n\nLet\u0027s update the code to strictly follow our Coding Standard:\n\n• Correct indentation and formatting across all files\n• Standardize naming conventions for variables and functions\n• Remove unused imports and variables\n• Add necessary comments for complex logic\n• Reorganize code structure for better modularity\n\nThis refactoring will improve code quality, make future maintenance\neasier, and help new developers understand the codebase more quickly.\n","fileTypesAndContributionMap":{"java":{"insertions":129,"deletions":128}}},{"hash":"ae78cd4267332a83a5250d11601e6053cfaa695c","isMergeCommit":true,"messageTitle":"Merge: Add JavaDoc to Einstein chatbot","messageBody":"The Einstein chatbot currently lacks comprehensive documentation,\nmaking it difficult for developers to understand and maintain the code.\n\nThis merge adds JavaDoc comments to the Einstein chatbot codebase:\n\n• Document public methods and classes\n• Add package-level documentation\n• Include usage examples for complex algorithms\n• Clarify parameter descriptions and return values\n\nThese changes will improve code readability, facilitate easier\nmaintenance, and help new developers onboard more quickly.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{}},{"hash":"f9e81cd92c0a444f44993db4e33c28aeeef0d169","isMergeCommit":true,"messageTitle":"Merge: Align Einstein project with CS2103 Coding Standard","messageBody":"The Einstein project currently deviates from the CS2103 Coding Standard,\nwhich can lead to inconsistencies and reduced code readability.\n\nThis merge updates the codebase to adhere to the current CS2103 Coding\nStandard:\n\n• Standardize naming conventions for variables, methods, and classes\n• Adjust indentation and formatting across all files\n• Reorganize code structure for improved modularity\n• Remove unused imports and variables\n• Add necessary comments for complex logic\n\nThese changes will enhance code quality, facilitate easier maintenance,\nand improve collaboration among team members.erge branch \u0027branch-A-CodingStandard\u0027\n","tags":["A-CodingStandard"],"fileTypesAndContributionMap":{}},{"hash":"ee428684d95dc746a06fb4a5ae1377d0dd3a8678","isMergeCommit":true,"messageTitle":"Merge: Add task search and display feature to Einstein","messageBody":"Einstein currently lacks the ability to find and show user tasks based\non queries, limiting its usefulness as a personal assistant.\n\nThis merge introduces a new feature that allows Einstein to:\n\n• Parse user queries for task-related keywords\n• Search through the user\u0027s task database efficiently\n• Display relevant tasks matching the query criteria\n• Format task information for clear presentation\n\nThese enhancements will significantly improve Einstein\u0027s functionality\nas a task management tool, making it more valuable to users.\n","tags":["Level-9"],"fileTypesAndContributionMap":{}},{"hash":"d5d332b88781395bd417a541aed5baf7aa49d473","isMergeCommit":false,"messageTitle":"Update version in ASCII","messageBody":"","tags":["v0.1.1"],"fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":1},"java":{"insertions":1,"deletions":1}}}]},{"date":"2025-02-12","commitResults":[{"hash":"6aaa69ab9f2cbfd3e160fc01bd2a5b5843ece75f","isMergeCommit":false,"messageTitle":"Update build.gradle for GUI","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":15,"deletions":6},"java":{"insertions":37,"deletions":0}}}]},{"date":"2025-02-13","commitResults":[{"hash":"b8b588dc4b022bedd3df81bf658b90c8093c8032","isMergeCommit":false,"messageTitle":"Add DialogBox, Main, MainWindow and Images","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":200,"deletions":3}}},{"hash":"bce4ff34a661a38c1799bf65d05525712599422c","isMergeCommit":false,"messageTitle":"Refactor Duke to use FXML for GUI","messageBody":"Duke\u0027s GUI code is currently intertwined, making it harder to maintain and extend.\n\nUsing FXML allows separation of the GUI design (view) from the code that controls it (controller), improving maintainability and extensibility.\n\nLet\u0027s:\n* Extract a `MainWindow` class to contain the controller logic for the main GUI.\n* Create `MainWindow.fxml` in `src/main/resources/view/` to define the view for the main window.\n* Create `DialogBox.fxml` in `src/main/resources/view/` to define the view for the dialog boxes.\n* Trim down `DialogBox.java` to only contain the controller logic.\n\nThis separation of concerns will make the codebase more modular and easier to work with.\n","fileTypesAndContributionMap":{"fxml":{"insertions":66,"deletions":0},"java":{"insertions":52,"deletions":118}}},{"hash":"52e2bccb18bbf41c5ed1f8ba630885d4a0d96b09","isMergeCommit":false,"messageTitle":"Add basic UI styling to GUI","messageBody":"","fileTypesAndContributionMap":{"fxml":{"insertions":13,"deletions":38},"java":{"insertions":7,"deletions":0}}}]},{"date":"2025-02-14","commitResults":[{"hash":"6cae30bf2977fe0de9035d33ea887bd6e7ffa232","isMergeCommit":false,"messageTitle":"Fix all Commands to work with GUI","messageBody":"Commands were previously intended to work with CLI by using\nSystem.out.println commands.\n\nWith this push, we are now able to receive responses by Einstein\non the GUI.\n","fileTypesAndContributionMap":{"java":{"insertions":88,"deletions":99}}},{"hash":"40ab47923ea113bdb7238c20a73d379151fa392e","isMergeCommit":true,"messageTitle":"Merge branch-Level-10 for JavaFX GUI support","messageBody":"This merge incorporates a JavaFX-based GUI for Einstein,\nenhancing user interaction with a more intuitive and visually\nappealing interface.\n\nChanges:\n* Implemented JavaFX GUI with basic layout and classic grey and orange\nEinstein styling.\n* Update Ui methods to return formatted strings instead of\n  \u0027System.out.println\u0027 calls.\n* Modify Command classes to return strings in \u0027execute\u0027.\n* Ensure compatibility between CLI and GUI modes.\n","tags":["Level-10"],"fileTypesAndContributionMap":{}}]},{"date":"2025-02-15","commitResults":[{"hash":"2c750bcd7e7f96eee332f57e4d56e71d7c8e9688","isMergeCommit":false,"messageTitle":"Add Checkstyle support to Einstein","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":4,"deletions":0}}},{"hash":"16fa5532727769ca9b9bde833110903c0149fa38","isMergeCommit":true,"messageTitle":"Add Checkstyle support to Einstein","messageBody":"This merge introduces Checkstyle to Einstein to\nensure better adherence to code style guidelines.\n\nThe following changes were made in the merged branch:\n\n* Added \u0027checkstyle.xml\u0027 and \u0027suppressions.xml\u0027\nto config. These files contain the code style\nand suppression configurations respectively.\n* Updated the \u0027build.gradle\u0027 file to include\nthe Checkstyle plugin (v10.2)\n* Configured Checkstyle to run during build\nprocesses.\n\nThese changes will help maintain a consistent\ncode style throughout the project, improving\nreadability and maintainability.\n","tags":["A-CheckStyle"],"fileTypesAndContributionMap":{}}]},{"date":"2025-02-16","commitResults":[{"hash":"1a080d62e5c8a7b2a4dfaf7bf9e8ad95f8fce5e1","isMergeCommit":false,"messageTitle":"Fix code style \u0026 class encapsulation","messageBody":"Task class description and isDone fields are currently public.\n\nThis violates encapsulation principles and exposes internal state\ndirectly, making the class harder to maintain and prone\nto unintended modifications. Additionally, code style was not\nup to mark.\n\nWith this commit, the key changes are:\n*   Make the description and isDone fields private.\n*   Add getter methods for retrieving the values of these fields.\n*   Add setter methods for modifying the values of these fields.\n*  Amended all code style errors with checkStyle plugin\n\nThis improves encapsulation, provides controlled access to the\ntask\u0027s state, and increases the class\u0027s robustness. This commit also\nfixes glaring code style issues to align with CS2103 coding\nstyle standards for greater readability.\n","fileTypesAndContributionMap":{"java":{"insertions":577,"deletions":107}}},{"hash":"b083d4af11325c5c4e0141fcc93776bf3c1baaf7","isMergeCommit":false,"messageTitle":"Minor response changes","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":1},"java":{"insertions":7,"deletions":7}}},{"hash":"4a3cd14bda03ede98dc3ce882785f0850dfdb29e","isMergeCommit":false,"messageTitle":"Add support for varargs in Todo command","messageBody":"The \u0027todo\u0027 command now allows users to add\nmultiple todos in a single command.\n","fileTypesAndContributionMap":{"txt":{"insertions":5,"deletions":0},"java":{"insertions":70,"deletions":5}}},{"hash":"b90ea90860f3b99f9f49b02fca33f07fe4d1be42","isMergeCommit":true,"messageTitle":"Merge to support multiple todos","messageBody":"The \u0027todo\u0027 command now allows users to add multiple\ntodos in a single command. This enhances the user\nexperience by reducing the need for multiple commands\nwhen adding several todos. Additionally, various\ncode style fixes and class encapsulation changes\nwere made to enhance code readability and quality.\n\nChanges:\n* Updated \u0027Parser\u0027 to split input into multiple\ntodo descriptions.\n* Created \u0027AddMultipleTodosCommand\u0027 to handle\naddition of multiple todos using varargs.\n* Modified \u0027AddTodoCommand\u0027 to ensure it processes\na single task description.\n* Fixed code style issues using checkStyle plugin\n* Fixed code quality issues in class encapsulation\n\nTo do:\n* Implement varargs for delete command to allow for\nconvenient batch deleting of Tasks.\n","tags":["A-Varargs"],"fileTypesAndContributionMap":{}}]},{"date":"2025-02-17","commitResults":[{"hash":"85d7e306242ef64047783fe9441beb77f0e51c6f","isMergeCommit":false,"messageTitle":"Add assertions for all Add* Commands","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":0},"java":{"insertions":66,"deletions":6}}},{"hash":"2bc43a275139d2c1d5f1e238cdf8d20d5d197570","isMergeCommit":false,"messageTitle":"Add assertions to remaining Command classes","messageBody":"The Command classes lacked explicit checks for critical\nassumptions, potentially leading to unexpected behaviour\nand difficulty debugging.\n\nAdding assertions improves code robustness by validating\npreconditions, postconditions and invariants at runtime,\ncatching potential errors early.\n\nKey changes:\n* Added assertions to:\n\t- DeleteCommand\n\t- ExitCommand\n\t- FindCommand\n\t- HelpCommand\n\t- ListByDateCommand\n\t- ListCommand\n\t- MarkCommand\n\t- UnmarkCommand\n* Added support to close Einstein in the ExitCommand\nusing JavaFX.\n\nLet\u0027s:\n* Continue adding assertions to remainder\nof classes where relevant.\n","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":15}}},{"hash":"07e5a525e6a688c54aee4b0c8175dc191449dd70","isMergeCommit":false,"messageTitle":"Add assertions to remaining Command classes","messageBody":"The Command classes lacked explicit checks for critical\nassumptions, potentially leading to unexpected behaviour\nand difficulty debugging.\n\nAdding assertions improves code robustness by validating\npreconditions, postconditions and invariants at runtime,\ncatching potential errors early.\n\nLet\u0027s:\n* Add assertions to:\n\t- DeleteCommand\n\t- ExitCommand\n\t- FindCommand\n\t- HelpCommand\n\t- ListByDateCommand\n\t- ListCommand\n\t- MarkCommand\n\t- UnmarkCommand\n* Add support to close Einstein in the ExitCommand\nusing JavaFX.\n\nUsing assertions provides a clear and concise way\nto document assumptions and improve the overall\nreliability of the changed classes. Additionally,\nfixing the ExitCommand post-GUI introduction\nensures users are able to exit Einstein via chatbot\ninput.\n\nTo-do:\n* Add  assertions to remainder of classes,\nwhere relevant.\n","fileTypesAndContributionMap":{"java":{"insertions":97,"deletions":15}}}]},{"date":"2025-02-19","commitResults":[{"hash":"61e81a7d4ad8b2fc5d954cb98105d2d2b69abe04","isMergeCommit":false,"messageTitle":"Enhance code reliability with assertions across core classes","messageBody":"Several core classes in the Einstein project lack explicit checks for critical assumptions, potentially leading to unexpected behavior and difficult debugging.\n\nAdding assertions improves code robustness by validating preconditions, postconditions, and invariants at runtime, catching potential errors early in development. This proactive approach reduces the risk of subtle bugs and improves the overall reliability of the system.\n\nLet\u0027s add assertions to the Deadline, Einstein, Event, Parser, Storage, Task, Todo, and Ui classes to verify:\n- Non-null and valid input parameters.\n- Expected object states at key points in the code.\n\nUsing assertions provides a clear and concise way to document assumptions and improve the overall reliability of the core classes. This will make future debugging easier and less time-consuming.\n","tags":["A-FullCommitMessage"],"fileTypesAndContributionMap":{"java":{"insertions":103,"deletions":49}}},{"hash":"4a13ed4ccdae5787c7c113ec1301514e8dc91884","isMergeCommit":false,"messageTitle":"Refactor AddDeadlineCommand, AddEventCommand, and Storage classes","messageBody":"- Apply Single Level of Abstraction Principle (SLAP)\n- Break down long methods into smaller, focused ones\n- Reduce code duplication across classes\n- Improve overall code quality and maintainability\n\nThis commit improves the structure and readability\nof the codebase by adhering to best\npractices in code organization and design.\n","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":1},"java":{"insertions":173,"deletions":65}}},{"hash":"953f1b8ed458f45a9f9c7332fdcbeb6b6567392f","isMergeCommit":false,"messageTitle":"Revert \"Refactor AddDeadlineCommand, AddEventCommand, and Storage classes\"","messageBody":"This reverts commit 4a13ed4ccdae5787c7c113ec1301514e8dc91884.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":65,"deletions":173}}},{"hash":"80ed05c3aaf92c4bf370b5bf3892c8edbb3836e0","isMergeCommit":false,"messageTitle":"Refactor AddDeadlineCommand, AddEventCommand, and Storage classes","messageBody":"- Apply Single Level of Abstraction Principle (SLAP)\n- Break down long methods into smaller, focused ones\n- Reduce code duplication across classes\n- Improve overall code quality and maintainability\n\nThis commit improves the structure and readability of the codebase\nby adhering to best practices in code organization and design.\n","fileTypesAndContributionMap":{"java":{"insertions":147,"deletions":70}}},{"hash":"b552cc8bdaaabb4c76d82fe966557c0d952c6efb","isMergeCommit":true,"messageTitle":"Merge pull request #2 from qilstiano/branch-A-Assertions","messageBody":"Introduce Assertions to improve debugging","tags":["A-Assertions"],"fileTypesAndContributionMap":{}},{"hash":"b8a069982bb12b8b4bf2cdc7ab77677893817fde","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 into branch-A-CodeQuality","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"1cef0f23f8cfa8d32aa3e725f018f6d445229dae","isMergeCommit":true,"messageTitle":"Refactor to improve code quality and readability","messageBody":"Previously, some Einstein classes lacked readability as some methods\nwere extremely long or had bad nesting. \n\nThe AddDeadlineCommand, AddEventCommand and Storage classes \nhave been refactored to improve code quality and maintainability. \n\nLet\u0027s:\n*   Adhere to the Single Level of Abstraction Principle (SLAP) by breaking down long methods into smaller, focused ones.\n*   Reduce code duplication by extracting common logic into reusable methods.\n*   Add assertions to ensure data integrity and robustness.\n*   Improve overall code structure and readability.\n\nThese changes enhance the maintainability and reliability of the changed class, making it easier to understand and extend in the future. This overall improves\nreadability for developers. ","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{}},{"hash":"6c88200d66f92eed9fef305f39a75cc7fe32d998","isMergeCommit":false,"messageTitle":"Add support for tags in Task","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":43,"deletions":5}}},{"hash":"76862e71546ebfd78a4c642a765bf93acbbefd9b","isMergeCommit":true,"messageTitle":"Merge branch \u0027branch-A-CodingStandard\u0027","messageBody":"","fileTypesAndContributionMap":{}}]},{"date":"2025-02-20","commitResults":[{"hash":"cea4911877edaf011bad17247063125a2009bbea","isMergeCommit":false,"messageTitle":"Add tagging functionality to task management system","messageBody":"Tasks do not support tagging, limiting the ability to categorize\nand filter them efficiently.\n\nUsers need a way to associate tags with tasks for better organization and retrieval.\n\nLet\u0027s:\n- Add `tags` field (Set\u003cString\u003e) to `Task` class for storing associated tags.\n- Implement `addTag(String tag)`, `removeTag(String tag)`,\nand `getTags()` methods in `Task` class for tag management.\n- Update `toString()` method in `Task` class to include tags in task representation.\n- Modify `Parser` class to recognize `tag` and `untag` commands.\n- Extend `parse()` method to create `AddTagCommand` and `RemoveTagCommand` objects.\n- Create `AddTagCommand` to handle tag addition by\nextracting task index and tag.\n- Create `RemoveTagCommand` to handle tag removal by\nextracting task index and tag.\n- Update `Ui` class with `showTagAdded(Task task, String tag)`\nand `showTagRemoved(Task task, String tag)` methods.\n\nUsing a `Set\u003cString\u003e` ensures uniqueness and efficient retrieval of tags.\nImplementing separate command classes follows the existing command-based\narchitecture, maintaining consistency and modularity.\n\nThis update enhances task management by allowing users to tag and untag tasks.\n","fileTypesAndContributionMap":{"java":{"insertions":129,"deletions":3}}},{"hash":"ca066ee86387bab350f6964480cfb89a34f4651f","isMergeCommit":false,"messageTitle":"Tidy up code and amend bugs","messageBody":"Key changes:\n- Fix bug where tag which does not exist somehow gets removed\nby \u0027RemoveTagCommand\u0027 - amended to reflect error message\n- Fix bug where welcome message does not show to user upon\ninitialize - amended in showWelcome() in Ui\n- Minor code quality and code style amendments\n- Added label to JavaFX MainWindow\n","tags":["BCD-Extension","A-Personality"],"fileTypesAndContributionMap":{"java":{"insertions":84,"deletions":51}}},{"hash":"e5ae06a9df8ad813437443bf0b373b8f25d58ed7","isMergeCommit":false,"messageTitle":"Add GUI improvements","messageBody":"The GUI of Einstein previously lacked a consistent look and feel.\nHence, a small overhaul was needed to give the UI some consistency.\n\nLet\u0027s:\n- Remove the background from the DaUser and DaEinstein images\n- Give the dialogue bubble for Einstein a different colour from User.\n- Amend codestyle errors project-wide\n\nWith these changes, Einstein\u0027s GUI now has\na more consistent look and feel, which can help enhance\nUX.\n","tags":["A-BetterGUI","A-AiAssisted"],"fileTypesAndContributionMap":{"java":{"insertions":35,"deletions":27}}},{"hash":"b05bd6f8b78a718e568349552c2b3379e9ef7305","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":6,"deletions":18}}},{"hash":"10ed577e8aa9f4182e24b69fa70716710b775a5f","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":2,"deletions":0}}},{"hash":"d3c70dedc26896dcfca4b90cad386c0d2dfce648","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":2,"deletions":2}}},{"hash":"2c9301c5c84073ee567d39d72a921fd2df54c7ac","isMergeCommit":false,"messageTitle":"Create Priority Enums for task priority","messageBody":"Einstein currently has no way to represent task priority\n(unless user uses tags). This may lead to inconsistencies\nand makes it difficult to manage or update priorities in\nthe future.\n\nLet\u0027s:\n- Introduce an \u0027Enums\u0027 class with an enum called\n\u0027Priority\u0027 to define 4 priority levels for Einstein.\n\nUsing an \u0027enum\u0027 provides type safety, and improves overall\ncode reliability and quality. This also simplifies future\nmodifications to priority options.\n","fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":1}}},{"hash":"66fa627790b89c569259e9308c683234d813e158","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 of https://github.com/qilstiano/ip","messageBody":"","fileTypesAndContributionMap":{}},{"hash":"1a83ed1b4ab487006d575f172af83a029487cb46","isMergeCommit":false,"messageTitle":"Attach Ui.png for submission","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":7},"java":{"insertions":1,"deletions":1}}},{"hash":"b30faded22162b9839dbae902cc42d9a9f31df33","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":314,"deletions":14}}},{"hash":"d26e5250aeec0f68f491211c0bc1488b6f302c30","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":0,"deletions":5}}},{"hash":"2eb463f8ff313eab6fe428041400f401a2bd815a","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":0}}}]},{"date":"2025-02-21","commitResults":[{"hash":"5972076a158429407d925903971562b59369631a","isMergeCommit":false,"messageTitle":"Amend build.gradle file to output for Java 17","messageBody":"","fileTypesAndContributionMap":{"gradle":{"insertions":5,"deletions":0}}},{"hash":"4e280485176e0bc70835a92082f117f0212d4616","isMergeCommit":true,"messageTitle":"Merge branch \u0027master\u0027 of https://github.com/qilstiano/ip","messageBody":"","tags":["A-UserGuide"],"fileTypesAndContributionMap":{}},{"hash":"f8a60ddd3b077888bfa108019a97327825d7719b","isMergeCommit":false,"messageTitle":"Update README.md with project details","messageBody":"README.md lacks project documentation  \r\n\r\nUsers currently have no reference for Einstein’s features, usage, or setup. This makes it difficult to understand how to interact with the chatbot.  \r\n\r\nAdd a detailed README.md explaining Einstein’s functionality, commands, setup instructions, and error handling.  \r\n\r\nProviding clear documentation ensures users can easily set up and use Einstein. The structured format improves readability and accessibility.  \r\n\r\nIncludes usage examples, error messages, and acknowledgments for better user experience.","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"745cd48c025a291c0f0856c0f95a58c952797180","isMergeCommit":false,"messageTitle":"Update README.md","messageBody":"Minor typo","fileTypesAndContributionMap":{"md":{"insertions":1,"deletions":1}}},{"hash":"bac90e25e10bfb1734b686029ac9f9b371ddf8b8","isMergeCommit":false,"messageTitle":"Add Priority feature to Task","messageBody":"Tasks currently do not have a priority level, making it difficult for users to prioritize their tasks effectively.\n\nAdding a priority feature will allow users to assign priority levels (UBER_HIGH, HIGH, MEDIUM, LOW) to tasks, helping them focus on what matters most.\n\nLet\u0027s:\n\n* Add a Priority enum to represent priority levels (HIGH, MEDIUM, LOW).\n\n* Add a priority field to the Task class.\n\n* Add methods to set and get the priority in the Task class.\n\n* Create a SetPriorityCommand to handle setting the priority for a task.\n\n* Update the Parser class to recognize the priority command.\n\n* Update the Ui class to display a message when the priority is set.\n\nThis implementation ensures that users can easily assign and manage\ntask priorities, improving task management efficiency. The use of enums ensures\ntype safety and clarity in priority levels.\n","fileTypesAndContributionMap":{"java":{"insertions":92,"deletions":2}}},{"hash":"8a08a2bd9bf7b4dbdc4ac93edea004696eda44f0","isMergeCommit":true,"messageTitle":"Merge remote-tracking branch \u0027origin/master\u0027","messageBody":"","tags":["A-Enums"],"fileTypesAndContributionMap":{}},{"hash":"df27f6c722eafad8a10fbef788556a4b2f36bc58","isMergeCommit":false,"messageTitle":"Amend README.md and HelpCommand to account for Priority","messageBody":"The user guide(UG)/README.md lacked documentation on the newly-introduced Priority feature for Tasks. This is\nalso the case for the HelpCommand.\n\nThis needs to change to ensure that the UG and HelpCommand is comprehensive and that new users are able to be\nquickly onboarded by simply reading the UG.\n\nLet\u0027s\n- Append details regarding the implementation of the Priority system\n- Provide details on how users can use the Priority system including syntax and potential errors\n- Append similar details to HelpCommand.java\n\nBy doing so, this gives users enough clarity when reading the UG or\nusing the HelpCommand via \u0027help\u0027.\n","tags":["v0.2","A-Release"],"fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":2},"md":{"insertions":31,"deletions":4}}},{"hash":"870d3b34a3ae476c7be3d4053af918a1804eaa2e","isMergeCommit":false,"messageTitle":"Add Assertions to SetPriorityCommand","messageBody":"The SetPriorityCommand class lacks internal checks to ensure data integrity,\npotentially leading to unexpected behavior and difficult debugging.\n\nAdding assertions enhances the class\u0027s robustness by validating preconditions and\npostconditions, catching errors early and providing clearer failure points.\n\nLet\u0027s:\n- Add assertions to the constructor to validate input parameters (fullCommand,\n  taskIndex, priority).\n- Add assertions to the execute method to validate TaskList, Ui, Storage, and\n  the state of tasks.\n\nThese assertions ensure:\n- Input parameters are not null or empty where appropriate.\n- Task index is within valid bounds.\n- Required objects (TaskList, Ui, Storage) are not null.\n- The task at the specified index exists.\n- Result string is not null\n\nThis approach provides more confidence in the correctness of the class and\nsimplifies debugging by pinpointing the exact location of failures.\n","fileTypesAndContributionMap":{"java":{"insertions":21,"deletions":1}}},{"hash":"ee908f6c3d995a93c64fcd6b084d7a22f4e47ac1","isMergeCommit":false,"messageTitle":"Add assertions to RemoveTagCommand for increased validation","messageBody":"The RemoveTagCommand class currently lacks comprehensive input validation and\nobject state checks, which can lead to runtime errors and hinder debugging.\n\nAdding assertions enhances the class\u0027s reliability by validating inputs and\nensuring object integrity at critical points in the execution.\n\nLet\u0027s:\n- Add assertions to the constructor to validate fullCommand, taskIndex, and tag.\n  Ensure they are not null where appropriate and taskIndex is valid.\n- Add assertions to the execute method to validate TaskList, Ui, and Storage.\n  Ensure they are not null, and validate the task list and task at the given\n  index.\n\nThese validations help:\n- Catch invalid input early, preventing unexpected behavior.\n- Ensure the TaskList, Ui, and Storage dependencies are correctly injected.\n- Confirm the task exists at the specified index before attempting to remove\n  the tag.\n- Validate the result to confirm the expected message to the user\n\nThis validation strategy increases confidence in the class\u0027s\ncorrectness and simplifies debugging by pinpointing the source of errors.\n","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":2}}},{"hash":"f5c2e6f1b25050e449fdaeb4e503c5bd1b1ad488","isMergeCommit":false,"messageTitle":"Add assertions to AddTagCommand for input and state validation","messageBody":"The AddTagCommand class is currently missing checks for input validity\nand object state, potentially leading to unexpected behavior\nor errors during runtime.\n\nAdding assertions improves the class\u0027s reliability by validating command\nparameters and ensuring the TaskList, Ui, and Storage objects are in a\nconsistent state.\n\nLet\u0027s:\n- Add assertions to the constructor to validate fullCommand, taskIndex, and tag.\n  Ensure they are non-null and non-empty where appropriate and taskIndex is\n  valid.\n- Add assertions to the execute method to validate TaskList, Ui, and Storage.\n  Ensure they are not null, and validate the task list and task at the given\n  index are also not null.\n- Validate the result string returned after adding the tag to ensure there are no unexpected issues\n\nThese validations:\n- Catch invalid inputs early, preventing potential runtime errors.\n- Ensure essential dependencies (TaskList, Ui, Storage) are correctly\n  provided.\n- Confirm the task at the given index exists before attempting to add the tag.\n- Validate the result string to confirm to user it worked\n\nThis proactive approach enhances the class\u0027s robustness and makes debugging\neasier by clearly identifying the source of errors.\n","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":1}}},{"hash":"6203ef809518f0e449cfc2ba8f1ebdf845526a2e","isMergeCommit":false,"messageTitle":"Add Javadoc comments to test classes for better documentation","messageBody":"The test classes (ParserTest, StorageTest, TaskListTest) currently lack\nJavadoc comments, making it harder to understand the purpose and\nfunctionality of each test case.\n\nAdding Javadoc comments improves the readability and maintainability of\nthe test suite by providing clear documentation for each class and test\nmethod.\n\nLet\u0027s:\n- Add class-level Javadoc comments to ParserTest, StorageTest, and\n  TaskListTest, explaining the purpose of each class.\n- Add method-level Javadoc comments to each test method, describing what\n  the test is checking, what it\u0027s verifying, and any exceptions that\n  might be thrown.\n\nThese comments will:\n- Make it easier for developers to understand the intent and behavior\n  of each test.\n- Serve as a valuable reference for future maintenance and modifications\n  of the test suite.\n- Improve the overall quality and clarity of the codebase.\n\nThis enhancement helps ensure the tests are well-documented, contributing to\nthe long-term maintainability of the project.\n","fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":0},"md":{"insertions":1,"deletions":1}}},{"hash":"775ff4b58c786bf63b9be9f0c9a419916f1983d1","isMergeCommit":false,"messageTitle":"Add AI.md to document AI-assisted contributions","messageBody":"Add AI.md to outline the specific ways AI was used in the development of the Einstein chatbot.\nThis includes AI-assisted documentation, README formatting, debugging support, and assertion writing.\nThe document also clarifies human oversight in AI-generated content.\n\nThis improves project transparency regarding AI usage.\n","fileTypesAndContributionMap":{"md":{"insertions":31,"deletions":0}}}]}]},"authorFileTypeContributionMap":{"qilstiano":{"java":2504,"md":629,"fxml":41,"sh":1,"bat":2,"gradle":26,"txt":11}},"authorContributionVariance":{"qilstiano":203309.42},"authorDisplayNameMap":{"qilstiano":"CS2103T-T14-1 MUHA..ALID"}}
