[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"# Bezdelnik","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"[Bezdelnik (en: Layabout)](https://www.youtube.com/watch?v\u003dAa4mlE4VlVk) is a greenfield Java project based on a template named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"Prerequisites: JDK 17, update IntelliJ to the most recent version.","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"1. Open the project into IntelliJ as follows:","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"1. After that, locate the `src/main/java/Bezdelnik.java` file, right-click it, and choose `Run Bezdelnik.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"   ________________________________________________________________________________________________________","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"   _____   _____   _____     _____     _____    ____    _       _   _   _     _   _   _ ","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"   |  ___| |  ___| |___  |   |  _  |   |  ___|  |  _ \\  | |     | | | | | |   / | | | / / ","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"   | |___  | |___     _| |   | | | |   | |___   | | | | | |___  | |_| | | |  // | | |/ /","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"   |  _  | |  ___|   |_  |  _| |_| |_  |  ___|  | | | | |  _  | |  _  | | | //| | |   (","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"   | |_| | | |___   ___| | |  _____  | | |___   | | | | | |_| | | | | | | |// | | | |\\ \\","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"   |_____| |_____| |_____| |_|     |_| |_____|  /_/ |_| |_____| |_| |_| |_ /  |_| |_| \\_\\ ","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"   What can I do for you?","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"   ________________________________________________________________________________________________________","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04","isFullCredit":false}],"authorContributionMap":{"FadhilPM":16,"-":15}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"java {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"    toolchain {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"        languageVersion.set(JavaLanguageVersion.of(17))","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"    mainClass.set(\"Bezdelnik.Bezdelnik\")","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"    archiveBaseName \u003d \"Bezdelnik\"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"    manifest {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"        attributes \u0027Main-Class\u0027: \u0027Bezdelnik.Bezdelnik\u0027","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"FadhilPM":11,"-":39}},{"path":"src/main/java/bezdelnik/Bezdelnik.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":" * Main entry point for chatbot","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * Initializes task manager, loads prior data if present,","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" * handles the user input loop.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"public class Bezdelnik {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"    private static Taskman taskman \u003d new Taskman();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    private static final String saveLocation \u003d \"./data/output.dat\";","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"     * Main entry point to the application.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"     * @param args Command-line arguments.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"        Pair\u003cString, Taskman\u003e readAttempt;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"            readAttempt \u003d Storage.readTaskmanFromFile(saveLocation);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"            readAttempt \u003d new Pair\u003cString, Taskman\u003e(\"        No prior data found, creating new session\", new Taskman());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"        inputLoop(readAttempt.first());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"     * Processes the user input loop.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"     * @param sessionStatus Initial session status message.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"    private static void inputLoop(String sessionStatus) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"        Ui.greet(sessionStatus);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"        sc.useDelimiter(\"\\n\")","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"            .tokens()","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"            .map(input -\u003e input.strip())","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"            .takeWhile(input -\u003e !input.matches(\"(bye|(/)?ex(it)?)\"))","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"            .map(input -\u003e Parser.parse(input, taskman))","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"            .forEach(pair -\u003e {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"                Ui.print(pair.first());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"                taskman \u003d pair.second();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"                try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"                    Storage.writeTaskmanToFile(taskman, saveLocation);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"                } catch (Throwable e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"                    Ui.print(String.format(\"Unknown exception when saving data.\", e.toString()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"                }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"            }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"            );","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"        sc.close();","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"        Ui.bye();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"FadhilPM":55}},{"path":"src/main/java/bezdelnik/BezdelnikException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":" * Exception specific to the Bezdelnik application.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":" * This exception is thrown when a task management error occurs.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"public class BezdelnikException extends Exception {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new BezdelnikException with the specified detail message.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"     * @param message Detail message.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"    public BezdelnikException(String message) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"        super(message);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new BezdelnikException with the specified detail message and cause.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"     * @param message Detail message.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"     * @param cause   The cause of the exception.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    public BezdelnikException(String message, Throwable cause) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        super(message, cause);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"FadhilPM":27}},{"path":"src/main/java/bezdelnik/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" * A Deadline task contains a description and a due date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    private LocalDateTime by;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Deadline with the given description and due date/time as a string.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     * @param byString    The due date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"    Deadline(String description, String byString) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        this(description, false, byString);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Deadline with the given description and due date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"     * @param by          The due date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"    Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"        this(description, false, by);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Deadline with the given description, status, and due date/time as a string.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"     * @param byString    The due date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"    Deadline(String description, boolean isDone, String byString) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"        this.by \u003d LocalDateTime.parse(byString, formatter);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Deadline with the given description, status, and due date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"     * @param by          The due date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"    Deadline(String description, boolean isDone, LocalDateTime by) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsDone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"        return new Deadline(description, true, by);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsUndone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"        return new Deadline(description, by);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"    public LocalDateTime getStartTime() {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"        return this.by;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"    public String returnCommand() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"deadline %s /by %s\", description, by.format(formatter));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"FadhilPM"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"[D] %s (by: %s)\", super.toString(), this.by);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"FadhilPM":78}},{"path":"src/main/java/bezdelnik/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * Represents an event task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" * An Event task contains a description and a start and end date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"public class Event extends Task {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    private LocalDateTime from;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"    private LocalDateTime to;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Event with the given description, start, and end times as strings.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     * @param from        The start date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"     * @param to          The end date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"    Event(String description, String from, String to) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"        this(description, false, from, to);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Event with the given description, start, and end times.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"     * @param from        The start date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"     * @param to          The end date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"    Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"        this(description, false, from, to);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Event with the given description, status, and start/end times as strings.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"     * @param from        The start date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"     * @param to          The end date/time in the format dd/MM/yyyy HHmm.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"    Event(String description, boolean isDone, String from, String to) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"        this.from \u003d LocalDateTime.parse(from, formatter);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"        this.to \u003d LocalDateTime.parse(to, formatter);","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Event with the given description, status, and start/end times.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"     * @param from        The start date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"     * @param to          The end date/time.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"    Event(String description, boolean isDone, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsDone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"        return new Event(description, true, from, to);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsUndone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"        return new Event(description, from, to);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"FadhilPM"},"content":"    public LocalDateTime getStartTime() {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"FadhilPM"},"content":"        return this.from;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"FadhilPM"},"content":"    public String returnCommand() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"event %s /from %s /to %s\", description, from.format(formatter), to.format(formatter));","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"FadhilPM"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"[E] %s (from: %s to: %s)\", super.toString(), this.from, this.to);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"FadhilPM":85}},{"path":"src/main/java/bezdelnik/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":" * Pair record.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":" *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":" * @param \u003cT\u003e The type of the first value.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * @param \u003cU\u003e The type of the second value.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"public record Pair\u003cT, U\u003e(T first, U second) {}","lastModifiedDate":"2025-02-06","isFullCredit":false}],"authorContributionMap":{"FadhilPM":9}},{"path":"src/main/java/bezdelnik/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * Provides public static method to parse user input commands and update the task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"public class Parser {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"    enum CommandType {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"        LIST,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"        MARK,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"        UNMARK,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"        REMOVE,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"        TODO,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"        DEADLINE,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"        EVENT,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"        FIND,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"        SORT,","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"        ARCHIVE,","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        UNKNOWN","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    private static CommandType determineCommandType(String input) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        String command \u003d input.split(\" \")[0].toLowerCase();","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"        return switch (command) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"        case \"l\", \"ls\", \"list\" -\u003e CommandType.LIST;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"        case \"m\", \"mark\" -\u003e CommandType.MARK;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"        case \"u\", \"unmark\" -\u003e CommandType.UNMARK;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"        case \"rem\", \"remove\", \"del\", \"delete\" -\u003e CommandType.REMOVE;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"        case \"todo\" -\u003e CommandType.TODO;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"        case \"ded\", \"dead\", \"deadline\" -\u003e CommandType.DEADLINE;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"        case \"e\", \"ev\", \"event\" -\u003e CommandType.EVENT;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"        case \"f\", \"find\" -\u003e CommandType.FIND;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"        case \"s\", \"sort\" -\u003e CommandType.SORT;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"        case \"a\", \"archive\" -\u003e CommandType.ARCHIVE;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"        default -\u003e CommandType.UNKNOWN;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"        };","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"    private static String removeFirstWord(String input) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"        return Arrays.stream(input.split(\" \")).skip(1).collect(Collectors.joining(\" \"));","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"     * Parses the given input string and performs the corresponding task management operation.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair containing a response message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"    public static Pair\u003cString, Taskman\u003e parse(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"        CommandType commandType \u003d determineCommandType(input);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"        try {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"            return switch (commandType) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"            case LIST -\u003e handleList(taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"            case MARK -\u003e handleMark(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"            case UNMARK -\u003e handleUnmark(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"            case REMOVE -\u003e handleRemove(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"            case TODO -\u003e handleTodo(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"            case DEADLINE -\u003e handleDeadline(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"            case EVENT -\u003e handleEvent(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"            case FIND -\u003e handleFind(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"            case SORT -\u003e handleSort(taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"            case ARCHIVE -\u003e handleArchive(input, taskman);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"            case UNKNOWN -\u003e handleDefault(input, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"            };","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"        } catch (NumberFormatException n) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(\"\\tInvalid integer!\", taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"        } catch (IndexOutOfBoundsException i) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(\"\\tInvalid command parameters!\", taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"        } catch (BezdelnikException be) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(be.toString(), taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"FadhilPM"},"content":"     * Returns a Pair containing the list of tasks and the unchanged task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with the task list as a formatted string and the task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleList(Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d taskman.listString();","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"FadhilPM"},"content":"     * Marks a task as done based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If an error occurs accessing the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleMark(String input, Taskman taskman) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"FadhilPM"},"content":"        int idx \u003d Integer.parseUnsignedInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.operate(idx, x -\u003e x.markAsDone());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tI have marked this task as done.\\n\\t%s\", taskman.get(idx));","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"FadhilPM"},"content":"     * Marks a task as undone based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If an error occurs accessing the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleUnmark(String input, Taskman taskman) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"FadhilPM"},"content":"        int idx \u003d Integer.parseUnsignedInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.operate(idx, x -\u003e x.markAsUndone());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tI have marked this task as undone.\\n\\t%s\", taskman.get(idx));","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"FadhilPM"},"content":"     * Removes a task based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If an error occurs accessing the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleRemove(String input, Taskman taskman) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"FadhilPM"},"content":"        int idx \u003d Integer.parseUnsignedInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"FadhilPM"},"content":"        Task toDelete \u003d taskman.get(idx);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.remove(idx);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tI have deleted this task.\\n\\t%s\", toDelete);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"FadhilPM"},"content":"     * Adds a new Todo task based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleTodo(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"FadhilPM"},"content":"        String todoInput \u003d removeFirstWord(input);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"FadhilPM"},"content":"        if (todoInput.isEmpty()) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(\"\\ttodo must be followed with something to do!\", taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"FadhilPM"},"content":"        } else {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"FadhilPM"},"content":"            Task toAdd \u003d new Todo(todoInput);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"FadhilPM"},"content":"            taskman \u003d taskman.add(toAdd);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"FadhilPM"},"content":"            String output \u003d String.format(\"\\tadded:\\n\\t%s\\n\\tYou currently have %d task(s)\", toAdd, taskman.size());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"FadhilPM"},"content":"     * Adds a new Deadline task based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleDeadline(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"FadhilPM"},"content":"        String deadlineInput \u003d removeFirstWord(input);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"FadhilPM"},"content":"        String[] array \u003d deadlineInput.split(\" /by \");","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"FadhilPM"},"content":"        Task toAdd \u003d new Deadline(array[0], array[1]);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.add(toAdd);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tadded:\\n\\t%s\\n\\tYou currently have %d task(s)\", toAdd, taskman.size());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"FadhilPM"},"content":"     * Adds a new Event task based on the input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the updated task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleEvent(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"FadhilPM"},"content":"        String eventInput \u003d removeFirstWord(input);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"FadhilPM"},"content":"        String[] array \u003d eventInput.split(\" /\");","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"FadhilPM"},"content":"        // Assumes array[1] starts with \"from \" and array[2] starts with \"to \"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"FadhilPM"},"content":"        Task toAdd \u003d new Event(array[0], array[1].substring(5), array[2].substring(3));","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.add(toAdd);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tadded:\\n\\t%s\\n\\tYou currently have %d task(s)\", toAdd, taskman.size());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"FadhilPM"},"content":"     * Filters tasks based on the input search command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with the filtered task list as a formatted string and the unchanged task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleFind(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"FadhilPM"},"content":"        String toSearchFor \u003d removeFirstWord(input);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d taskman.filter(x -\u003e x.contains(toSearchFor)).listString();","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"FadhilPM"},"content":"     * Returns a Pair containing the list of tasks and the sorted task manager.","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with a confirmation message and the task list as a formatted string and the sorted task manager.","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleSort(Taskman taskman) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"FadhilPM"},"content":"        taskman \u003d taskman.sorted();","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d \"\\tTasks sorted by time\\n\" + taskman.listString();;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleArchive(String input, Taskman taskman) throws BezdelnikException {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"FadhilPM"},"content":"        String path \u003d \"./data/\" + removeFirstWord(input);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"FadhilPM"},"content":"        try {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"FadhilPM"},"content":"            Storage.writeTaskmanToFile(taskman, path);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"FadhilPM"},"content":"            String output \u003d String.format(\"\\tTask list archived to: %s. You have turned over a new leaf.\", path);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"FadhilPM"},"content":"            return new Pair\u003cString, Taskman\u003e(output, new Taskman());","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"FadhilPM"},"content":"        } catch (Throwable t) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"FadhilPM"},"content":"            throw new BezdelnikException(String.format(\"Unknown error accessing path: %s.\", path));","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"FadhilPM"},"content":"     * Returns a default response for unsupported commands.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"FadhilPM"},"content":"     * @param input   The unsupported user input command.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair with an error message and the unchanged task manager.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"FadhilPM"},"content":"    private static Pair\u003cString, Taskman\u003e handleDefault(String input, Taskman taskman) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"FadhilPM"},"content":"        String output \u003d String.format(\"\\tUnsupported command: %s\", input);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(output, taskman);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-02-05","isFullCredit":false}],"authorContributionMap":{"FadhilPM":233}},{"path":"src/main/java/bezdelnik/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":" * Handles storage operations for chatbot","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"public class Storage {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"     * Writes the task manager state to a file at the specified output path.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"     * @param taskman    The current task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"     * @param outputPath The file path where the state is written.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"     * @return A success message including the output file path.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"    public static String writeTaskmanToFile(Taskman taskman, String outputPath) throws IOException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        Path path \u003d Paths.get(outputPath);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"        Files.createDirectories(path.getParent());","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"        String content \u003d taskman.listCommand();","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"        Files.writeString(path, content);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"Success: contents written to file at: %s\", outputPath);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"     * Reads the task manager state from a file at the specified input path.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"     * @param inputPath The file path from which the state is read.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"     * @return A Pair containing a status message and the task manager state.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"     * @throws IOException If an I/O error occurs.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"    public static Pair\u003cString, Taskman\u003e readTaskmanFromFile(String inputPath) throws IOException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"        Taskman toReturn \u003d Files.lines(Paths.get(inputPath))","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"            .reduce(new Taskman(), (x, y) -\u003e Parser.parse(y, x).second(), (a, b) -\u003e a.concat(b));","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"        String status \u003d String.format(\"        Tasks successfully loaded from %s\", inputPath);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"        return new Pair\u003cString, Taskman\u003e(status, toReturn);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-25","isFullCredit":false}],"authorContributionMap":{"FadhilPM":41}},{"path":"src/main/java/bezdelnik/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.io.Serializable;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" * Represents an abstract task in the Bezdelnik application.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":" * Each task has a description and a completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"public abstract class Task implements Serializable, Comparable\u003cTask\u003e {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"    protected final String description;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    protected final boolean isDone;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a Task with the specified description and completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"    Task(String description, boolean isDone) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Task instance marked as done.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Task with isDone set to true.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"    public abstract Task markAsDone();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Task instance marked as undone.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Task with isDone set to false.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"    public abstract Task markAsUndone();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"     * @return True if the task is done, otherwise false.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"    public boolean isDone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"        return isDone;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"     * Checks if the task description contains the specified string.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"     * @param s The string to search for.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"     * @return True if the description contains the string, otherwise false.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"    public boolean contains(String s) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"        return description.contains(s);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"     * Returns the command representation of this task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"     * @return A string command to recreate this task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"    public abstract String returnCommand();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"    public abstract LocalDateTime getStartTime();","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"    public int compareTo(Task otherTask) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"        return otherTask.getStartTime().compareTo(this.getStartTime());","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"[%s] %s\", isDone ? \"X\" : \"\", this.description);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"FadhilPM":75}},{"path":"src/main/java/bezdelnik/Taskman.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.util.List;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import java.util.Optional;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"import java.util.function.Function;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":" * Immutable Task list manager","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"public class Taskman {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"    private final List\u003cTask\u003e taskList;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"     * Constructs an empty Taskman.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"    Taskman() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        this.taskList \u003d List.\u003cTask\u003eof();","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a Taskman with tasks from the provided stream.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"     * @param taskStream A stream of tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"    private Taskman(Stream\u003cTask\u003e taskStream) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"        this.taskList \u003d taskStream.toList();","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Taskman with the specified task added.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"     * @param t The task to add.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with the task added.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"    public Taskman add(Task t) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"        return new Taskman(Stream.concat(taskList.stream(), Stream.\u003cTask\u003eof(t)));","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Taskman with the task at the specified index replaced.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"     * @param i The index of the task to replace.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"     * @param t The new task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with the updated task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"    public Taskman set(int i, Task t) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"        return new Taskman(IntStream.range(0, taskList.size())","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"        .mapToObj(x -\u003e x \u003d\u003d i ? t : taskList.get(x)));","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Taskman with the task at the specified index removed.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"     * @param i The index of the task to remove.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with the task removed.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If the index is out of bounds.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"    public Taskman remove(int i) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"        try {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"            return new Taskman(IntStream.range(0, taskList.size())","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"            .filter(x -\u003e x !\u003d i)","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"            .mapToObj(x -\u003e taskList.get(x)));","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"        } catch (Throwable t) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"            throw new BezdelnikException(t.toString());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"FadhilPM"},"content":"     * Concatenates another Taskman with this one.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"FadhilPM"},"content":"     * @param otherTaskman The other Taskman to concatenate.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance containing tasks from both.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"FadhilPM"},"content":"    public Taskman concat(Taskman otherTaskman) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"FadhilPM"},"content":"        return new Taskman(Stream.concat(taskList.stream(), otherTaskman.taskList.stream()));","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"FadhilPM"},"content":"     * Applies an operation to the task at the specified index.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"FadhilPM"},"content":"     * @param i  The index of the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"FadhilPM"},"content":"     * @param fn The function to apply to the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with the modified task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If the index is out of bounds.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"FadhilPM"},"content":"    public Taskman operate(int i, Function\u003c? super Task, ? extends Task\u003e fn) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"FadhilPM"},"content":"        return this.set(i, fn.apply(get(i)));","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"FadhilPM"},"content":"     * Optionally applies an operation to the task at the specified index.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"FadhilPM"},"content":"     * @param i  The index of the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"FadhilPM"},"content":"     * @param fn The function to apply to the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with the modified task or the task removed.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If the index is out of bounds.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"FadhilPM"},"content":"    public Taskman operateOptional(int i, Function\u003c? super Task, ? extends Optional\u003c? extends Task\u003e\u003e fn)","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"FadhilPM"},"content":"            throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"FadhilPM"},"content":"        return fn.apply(taskList.get(i))","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"FadhilPM"},"content":"        .map(x -\u003e this.set(i, x))","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"FadhilPM"},"content":"        .orElse(this.remove(i));","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Taskman containing only tasks that match the given predicate.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"FadhilPM"},"content":"     * @param pt The predicate to filter tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with filtered tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"FadhilPM"},"content":"    public Taskman filter(Predicate\u003c? super Task\u003e pt) {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"FadhilPM"},"content":"        return new Taskman(taskList.stream().filter(pt));","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"FadhilPM"},"content":"     * Returns a new Taskman with a sorted task list","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"FadhilPM"},"content":"     * @return A new Taskman instance with a {@code List\u003cTask\u003e}","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"FadhilPM"},"content":"    public Taskman sorted() {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"FadhilPM"},"content":"        return new Taskman(taskList.stream().sorted());","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"FadhilPM"},"content":"     * Retrieves the task at the specified index.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"FadhilPM"},"content":"     * @param i The index of the task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"FadhilPM"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"FadhilPM"},"content":"     * @throws BezdelnikException If the index is out of bounds.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"FadhilPM"},"content":"    public Task get(int i) throws BezdelnikException {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"FadhilPM"},"content":"        try {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"FadhilPM"},"content":"            return taskList.get(i);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"FadhilPM"},"content":"        } catch (Throwable t) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"FadhilPM"},"content":"            throw new BezdelnikException(t.toString());","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"FadhilPM"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"FadhilPM"},"content":"     * Returns the number of tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"FadhilPM"},"content":"     * @return The size of the task list.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"FadhilPM"},"content":"    public int size() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"FadhilPM"},"content":"        return taskList.size();","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"FadhilPM"},"content":"     * Returns a formatted string listing all tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"FadhilPM"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"FadhilPM"},"content":"    public String listString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"FadhilPM"},"content":"        return taskList.isEmpty() ? \"\\tNo tasks present!\" : IntStream.range(0, taskList.size())","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"FadhilPM"},"content":"        .mapToObj(x -\u003e String.format(\"\\t%d. %s\", x + 1, taskList.get(x).toString()))","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"FadhilPM"},"content":"        .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"FadhilPM"},"content":"     * Returns a command representation of all tasks for storage.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"FadhilPM"},"content":"     * @return A string containing commands to recreate all tasks.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"FadhilPM"},"content":"    public String listCommand() {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"FadhilPM"},"content":"        return IntStream.range(0, taskList.size())","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"FadhilPM"},"content":"        .mapToObj(x -\u003e {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"FadhilPM"},"content":"            Task t \u003d taskList.get(x);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"FadhilPM"},"content":"            return String.format(\"%s%s\", t.returnCommand(), t.isDone() ? String.format(\"\\nmark %d\", x + 1) : \"\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"FadhilPM"},"content":"        })","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"FadhilPM"},"content":"        .collect(Collectors.joining(\"\\n\"));","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"FadhilPM"},"content":"     * Checks if this Taskman is equal to another object.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"FadhilPM"},"content":"     * @param obj The object to compare.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"FadhilPM"},"content":"     * @return True if both are Taskman instances with equal task lists, otherwise false.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"FadhilPM"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"FadhilPM"},"content":"        return this \u003d\u003d obj ? true : (obj instanceof Taskman taskman) ? taskList.equals(taskman.taskList) : false;","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"FadhilPM"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"FadhilPM"},"content":"        return taskList.toString();","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"FadhilPM":192}},{"path":"src/main/java/bezdelnik/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-26","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":" * Represents a simple Todo task.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Todo with the given description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"    Todo(String description) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"        this(description, false);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     * Constructs a new Todo with the given description and completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"     * @param isDone      The completion status.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"    Todo(String description, boolean isDone) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsDone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"        return new Todo(description, true);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"    public Task markAsUndone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"        return new Todo(description);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"    public LocalDateTime getStartTime() {","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"        return LocalDateTime.MAX;","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-08","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"    public String returnCommand() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"todo %s\", description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"    @Override","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"    public String toString() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"[T] %s\", super.toString());","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"FadhilPM":48}},{"path":"src/main/java/bezdelnik/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"/**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":" * Handles UI operations","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":" */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"public class Ui {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"    private static final String divider \u003d \"_\".repeat(100);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"    private static final String logo \u003d","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"        \" _____   _____   _____     _____     _____    ____    _       _   _   _     _   _   _ \\n\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"        + \"|  ___| |  ___| |___  |   |  _  |   |  ___|  |  _ \\\\  | |     | | | | | |   / | | | / / \\n\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"        + \"| |___  | |___     _| |   | | | |   | |___   | | | | | |___  | |_| | | |  // | | |/ /\\n\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"        + \"|  _  | |  ___|   |_  |  _| |_| |_  |  ___|  | | | | |  _  | |  _  | | | //| | |   (\\n\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"        + \"| |_| | | |___   ___| | |  _____  | | |___   | | | | | |_| | | | | | | |// | | | |\\\\ \\\\\\n\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"        + \"|_____| |_____| |_____| |_|     |_| |_____|  /_/ |_| |_____| |_| |_| |_ /  |_| |_| \\\\_\\\\ \";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"    private static final String greeting \u003d String.format(\"%s\\nHello from\\n%s\\n\\nWhat can I do for you?\\n%s\",","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"                                                         \"_\".repeat(104), logo, \"_\".repeat(104));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"     * Displays a greeting message along with the session status indicating if a data file was read","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"     * @param sessionStatus The initial session status message.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"    public static void greet(String sessionStatus) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"        System.out.println(greeting);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        System.out.println(sessionStatus);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"    public static void bye() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"        print(\"\\tBye. Hope to see you again soon!\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"     * Prints the specified output message in a formatted manner.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"     * @param output The message to be printed.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"    public static void print(String output) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"        System.out.println(responseFormat(output));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"    /**","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"     * Formats the response with dividers.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"     *","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"     * @param input The input message to format.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"     * @return A formatted string with dividers.","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"     */","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"    private static String responseFormat(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"        return String.format(\"\\t%s\\n%s\\n\\t%s\", divider, input, divider);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"FadhilPM":50}},{"path":"src/test/java/bezdelnik/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"public class ParserTest {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"    @Test","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"    void parse_CreateDeadlineTask() {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"        Taskman initialTaskman \u003d new Taskman();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"        String validInput \u003d \"deadline Submit report /by 25/12/2024 1430\";","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"        // Test valid deadline creation","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"        Pair\u003cString, Taskman\u003e result \u003d Parser.parse(validInput, initialTaskman);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"        Taskman updatedTaskman \u003d result.second();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(1, updatedTaskman.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"        assertTrue(result.first().contains(\"added\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        // Test invalid deadline format","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"        String invalidInput \u003d \"deadline Submit report\";","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"        Pair\u003cString, Taskman\u003e invalidResult \u003d Parser.parse(invalidInput, initialTaskman);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"        assertTrue(invalidResult.first().contains(\"Invalid\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(initialTaskman.size(), invalidResult.second().size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"    @Test","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"    void parse_CreateEventTask() {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"        Taskman initialTaskman \u003d new Taskman();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"        String validInput \u003d \"event Team meeting /from 25/12/2024 1430 /to 25/12/2024 1530\";","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"        // Test valid event creation","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"        Pair\u003cString, Taskman\u003e result \u003d Parser.parse(validInput, initialTaskman);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"        Taskman updatedTaskman \u003d result.second();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(1, updatedTaskman.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"        assertTrue(result.first().contains(\"added\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"        // Test invalid event format (missing /to)","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"        String invalidInput \u003d \"event Team meeting /from 25/12/2024 1430\";","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"        Pair\u003cString, Taskman\u003e invalidResult \u003d Parser.parse(invalidInput, initialTaskman);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"        assertTrue(invalidResult.first().contains(\"Invalid\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(initialTaskman.size(), invalidResult.second().size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-02-06","isFullCredit":false}],"authorContributionMap":{"FadhilPM":46}},{"path":"src/test/java/bezdelnik/TaskmanTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"package bezdelnik;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"public class TaskmanTest {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"    @Test","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"    void operate_ModifyTaskAndMaintainImmutability() throws BezdelnikException {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"        Todo initialTask \u003d new Todo(\"Test task\");","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"FadhilPM"},"content":"        Taskman taskman \u003d new Taskman().add(initialTask);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"        // Test marking task as done","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"FadhilPM"},"content":"        Taskman updatedTaskman \u003d taskman.operate(0, Task::markAsDone);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"        assertTrue(updatedTaskman.get(0).isDone());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"FadhilPM"},"content":"        assertFalse(taskman.get(0).isDone()); // Original should be unchanged due to immutability","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"FadhilPM"},"content":"        // Test marking task as undone","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"FadhilPM"},"content":"        Taskman revertedTaskman \u003d updatedTaskman.operate(0, Task::markAsUndone);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"        assertFalse(revertedTaskman.get(0).isDone());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"FadhilPM"},"content":"        // Test operation on invalid index","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"FadhilPM"},"content":"        assertThrows(BezdelnikException.class, () -\u003e","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"FadhilPM"},"content":"        taskman.operate(1, Task::markAsDone)","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"FadhilPM"},"content":"        );","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"FadhilPM"},"content":"    @Test","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"FadhilPM"},"content":"    void filter_ReturnMatchingTasks() {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"FadhilPM"},"content":"        Taskman taskman \u003d new Taskman()","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Buy groceries\"))","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Do laundry\"))","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Buy milk\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"FadhilPM"},"content":"        // Test filtering tasks containing \"Buy\"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"FadhilPM"},"content":"        Taskman filtered \u003d taskman.filter(task -\u003e task.contains(\"Buy\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(2, filtered.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"FadhilPM"},"content":"        // Test filtering tasks containing \"laundry\"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"FadhilPM"},"content":"        Taskman laundryTasks \u003d taskman.filter(task -\u003e task.contains(\"laundry\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(1, laundryTasks.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"FadhilPM"},"content":"        // Test filtering with no matches","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"FadhilPM"},"content":"        Taskman noMatches \u003d taskman.filter(task -\u003e task.contains(\"nonexistent\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(0, noMatches.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"FadhilPM"},"content":"    @Test","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"FadhilPM"},"content":"    void concat_ShouldCombineTaskmansCorrectly() throws BezdelnikException {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"FadhilPM"},"content":"        Taskman taskman1 \u003d new Taskman()","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Task 1\"))","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Task 2\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"FadhilPM"},"content":"        Taskman taskman2 \u003d new Taskman()","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Task 3\"))","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"FadhilPM"},"content":"        .add(new Todo(\"Task 4\"));","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"FadhilPM"},"content":"        // Test concatenation","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"FadhilPM"},"content":"        Taskman combined \u003d taskman1.concat(taskman2);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(4, combined.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(\"Task 1\", combined.get(0).description);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(\"Task 4\", combined.get(3).description);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"FadhilPM"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"FadhilPM"},"content":"        // Test concatenation with empty Taskman","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"FadhilPM"},"content":"        Taskman emptyTaskman \u003d new Taskman();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"FadhilPM"},"content":"        Taskman combinedWithEmpty \u003d taskman1.concat(emptyTaskman);","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"FadhilPM"},"content":"        assertEquals(taskman1.size(), combinedWithEmpty.size());","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"FadhilPM"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"FadhilPM"},"content":"}","lastModifiedDate":"2025-02-06","isFullCredit":false}],"authorContributionMap":{"FadhilPM":72}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"FadhilPM"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"FadhilPM"},"content":"todo go to sleep","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"FadhilPM"},"content":"deadline finish CS2103 Week 2 iP /by 1600","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"FadhilPM"},"content":"event attend CS2103 lecture /from 1600 /to 1800","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"FadhilPM"},"content":"mark 1","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"FadhilPM"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"FadhilPM"},"content":"mark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"FadhilPM"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"FadhilPM"},"content":"unmark 1","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"delete 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"FadhilPM"},"content":"delete 4","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"FadhilPM"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"FadhilPM"},"content":"bye","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"FadhilPM":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"FadhilPM"},"content":"javac --release 17 -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"FadhilPM"},"content":"java -classpath ..\\bin Bezdelnik \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"FadhilPM":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"FadhilPM"},"content":"if ! javac --release 17 -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"FadhilPM"},"content":"java -classpath ../bin Bezdelnik \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"FadhilPM":2,"-":36}}]
