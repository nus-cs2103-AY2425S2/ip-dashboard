[{"path":"data/saved_tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"D | 0 | awef  | Apr 20 2000, 1:00PM","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"E | 0 | sodfij  | Mar 20 2000, 1:00PM | Apr 10 2000, 2:00PM","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"Alolononon":2}},{"path":"src/main/java/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"import java.util.List;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":" * Parses date and time strings into LocalDateTime objects using a list of supported formats.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":" * If the input is only a date, the time is set to 00:00.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"public class DateParser {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"    // List of supported date and time formats","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"    private static final List\u003cDateTimeFormatter\u003e DATE_FORMATS \u003d List.of(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),        // 2000-03-01","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy\"),     // Mar 01 2000","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"),        // 01-03-2000","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),   // 2000-03-01 1800","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"),   // 01-03-2000 1800","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"),  // Mar 01 2000 1800","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"),   // 01/03/2000 1800","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd h:mma\"),   // 2000-03-01 4pm","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd-MM-yyyy h:mma\"),   // 01-03-2000 4pm","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy h:mma\"),  // Mar 01 2000 4pm","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy h:mma\"),    // 01/03/2000 4pm","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"            DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")  // Mar 01 2000, 4pm","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"    );","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"     * Parses a date/time string into a LocalDateTime object.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"     * If the input is only a date, the time is set to 00:00.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Alolononon"},"content":"     * @param input the date/time string to parse","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Alolononon"},"content":"     * @return the parsed LocalDateTime","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Alolononon"},"content":"     * @throws IllegalArgumentException if the input doesn\u0027t match any supported format","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Alolononon"},"content":"    public static LocalDateTime parseDateTime(String input) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Alolononon"},"content":"        for (DateTimeFormatter formatter : DATE_FORMATS) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Alolononon"},"content":"            try {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Alolononon"},"content":"                if (input.length() \u003e 11) { // If time is included","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Alolononon"},"content":"                    return LocalDateTime.parse(input, formatter);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Alolononon"},"content":"                } else { // If only date is given, assume 00:00 time","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Alolononon"},"content":"                    return LocalDate.parse(input, formatter).atStartOfDay();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Alolononon"},"content":"            } catch (DateTimeParseException ignored) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Alolononon"},"content":"                // Try the next format","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Alolononon"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Alolononon"},"content":"        throw new IllegalArgumentException(\"Invalid date format: \" + input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"Alolononon":60}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"    protected LocalDateTime  by;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"     * Creates a deadline task with a description and a deadline.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"     * @param description the task description","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"     * @param by          the deadline date/time as a string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"        super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"        this.by \u003d DateParser.parseDateTime(by);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"     * Returns the formatted deadline date/time.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"     * @return the deadline as a formatted string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"    public String getBy() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"     * @return the formatted deadline task string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"        return \"[D]\" + super.toString() +","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"                \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) + \")\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"Alolononon":41}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":" * Represents an event task with a start and end date/time.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"     * Creates an event task with a description, start date/time, and end date/time.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"     * @param description the task description","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"     * @param from        the start date/time as a string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"     * @param to          the end date/time as a string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"        super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"        this.from \u003d DateParser.parseDateTime(from);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"        this.to \u003d DateParser.parseDateTime(to);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"     * Returns the formatted start date/time.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"     * @return the start date/time as a formatted string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"    public String getFrom() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"        return from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"     * Returns the formatted end date/time.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"     * @return the end date/time as a formatted string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"    public String getTo() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"        return to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Alolononon"},"content":"     * Returns the string representation of the event task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Alolononon"},"content":"     * @return the formatted event task string","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Alolononon"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Alolononon"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Alolononon"},"content":"        return \"[E]\" + super.toString() +","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Alolononon"},"content":"                \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) +","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Alolononon"},"content":"                \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\")) + \")\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"Alolononon":55}},{"path":"src/main/java/FileStoringRetrieving.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"import java.io.File;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"import java.util.*;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":" * Handles file operations such as ensuring file existence,","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":" * reading from a file, writing to a file, and loading tasks.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"public class FileStoringRetrieving {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"     * Ensures that the specified file exists. If not, it creates the necessary directories and file.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"     * @param filePath The path of the file to check and create if necessary.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"    public static void ensureFileExists(String filePath) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"        if (!f.exists()) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"//            System.out.println(\"File does not exist\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"            File folder \u003d f.getParentFile(); // Get \"data/\" folder","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"            if (!folder.exists()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"                folder.mkdirs(); // Create \"data/\" folder if missing","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"            if (!f.exists()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"                try {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"                    f.createNewFile(); // Create \"saved_tasks.txt\" if missing","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"//                    System.out.println(\"Created file: \" + f.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"                } catch (IOException e) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Alolononon"},"content":"     * Prints the contents of a specified file.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Alolononon"},"content":"     * @param filePath The path of the file to read.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Alolononon"},"content":"     * @throws FileNotFoundException If the file does not exist.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Alolononon"},"content":"    public static void printFileContents(String filePath) throws FileNotFoundException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Alolononon"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Alolononon"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Alolononon"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Alolononon"},"content":"            System.out.println(s.nextLine());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Alolononon"},"content":"     * Loads tasks from a file and stores them in the provided ArrayList.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Alolononon"},"content":"     * @param filePath The path of the file to read from.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Alolononon"},"content":"     * @param storage  The ArrayList to store the loaded tasks.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Alolononon"},"content":"    public static void loadTasksFromFile(String filePath, ArrayList\u003cTask\u003e storage) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Alolononon"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Alolononon"},"content":"        try {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Alolononon"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Alolononon"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Alolononon"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Alolononon"},"content":"                String lineArr[] \u003d line.split(\" \\\\| \");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Alolononon"},"content":"                if (lineArr.length \u003c 3) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"Skipping invalid line: \" + line);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Alolononon"},"content":"                    continue;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Alolononon"},"content":"                String type \u003d lineArr[0];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Alolononon"},"content":"                boolean isDone \u003d lineArr[1].equals(\"1\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Alolononon"},"content":"                String description \u003d lineArr[2];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Alolononon"},"content":"                Task task \u003d null;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Alolononon"},"content":"                switch (type) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Alolononon"},"content":"                case \"T\":","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Alolononon"},"content":"                    task \u003d new Todo(description);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Alolononon"},"content":"                    break;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Alolononon"},"content":"                case \"D\":","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Alolononon"},"content":"                    if (lineArr.length \u003c 4)","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Alolononon"},"content":"                        task \u003d null; // Ensure valid deadline format","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Alolononon"},"content":"                    task \u003d new Deadline(description, lineArr[3]); // parts[3] is due date","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Alolononon"},"content":"                    break;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Alolononon"},"content":"                case \"E\":","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Alolononon"},"content":"                    if (lineArr.length \u003c 5)","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Alolononon"},"content":"                        task \u003d null; // Ensure valid event format","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Alolononon"},"content":"                    task \u003d new Event(description, lineArr[3], lineArr[4]); // parts[3] \u003d from, parts[4] \u003d to","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Alolononon"},"content":"                    break;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Alolononon"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Alolononon"},"content":"                    storage.add(task); // Add parsed task to storage","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Alolononon"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Alolononon"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Alolononon"},"content":"            System.out.println(\"File not found.\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Alolononon"},"content":"     * Writes tasks from an ArrayList to a file.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Alolononon"},"content":"     * @param filePath The path of the file to write to.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Alolononon"},"content":"     * @param storage  The ArrayList of tasks to save.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Alolononon"},"content":"     * @throws IOException If an error occurs while writing to the file.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Alolononon"},"content":"    public static void writeToFile(String filePath, ArrayList\u003cTask\u003e storage) throws IOException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Alolononon"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Alolononon"},"content":"        for (Task task : storage) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Alolononon"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Alolononon"},"content":"                fw.write(\"T | \" + (task.getIsTaskDone() ? \"1\" : \"0\") + \" | \" + task.getTaskName() + \"\\n\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Alolononon"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Alolononon"},"content":"                fw.write(\"D | \" + (task.getIsTaskDone() ? \"1\" : \"0\") + \" | \" + task.getTaskName()","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Alolononon"},"content":"                        + \" | \" + ((Deadline) task).getBy() + \"\\n\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Alolononon"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Alolononon"},"content":"                fw.write(\"E | \" + (task.getIsTaskDone() ? \"1\" : \"0\") + \" | \" + task.getTaskName()","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Alolononon"},"content":"                        + \" | \" + ((Event) task).getFrom() + \" | \" + ((Event) task).getTo() + \"\\n\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Alolononon"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Alolononon"},"content":"//        fw.write(textToAdd);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Alolononon"},"content":"        fw.close();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"Alolononon":130}},{"path":"src/main/java/Princess.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"import java.util.*;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":" * A task management application that allows users to add, delete, mark, and unmark tasks.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":" * Tasks can be of type Todo, Deadline, or Event. Tasks are saved to and loaded from a file.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"public class Princess {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"        ArrayList\u003cTask\u003e storage \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"        String filePath \u003d \"data/saved_tasks.txt\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"        FileStoringRetrieving.ensureFileExists(filePath);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"        FileStoringRetrieving.loadTasksFromFile(filePath, storage);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"        // Display welcome message","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"     Hello! I\u0027m your Beautiful Princess\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"     What can I do for you?\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"        System.out.println();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"        while (true) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"            try {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"                String input \u003d sc.nextLine(); String[] inputss \u003d input.split(\" \"); String code \u003d inputss[0];","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"                Task task;","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"                // Exit the application","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"                if (input.equals(\"bye\"))","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"                    break;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"                System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"                if (input.equals(\"list\")) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"                    //listing out all tasks","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"     Here are the tasks in your list for your princess!\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Alolononon"},"content":"                    int num \u003d 1;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Alolononon"},"content":"                    if (storage.isEmpty()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     \" + \"      ---there is nothing in your list---\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Alolononon"},"content":"                    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Alolononon"},"content":"                    for (Task elem : storage) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     \" + Integer.toString(num++) + \".\" +","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Alolononon"},"content":"                                elem.toString());","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Alolononon"},"content":"                    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"delete\")) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Alolononon"},"content":"                    // Delete a task","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Alolononon"},"content":"                    if (inputss.length \u003c 2)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! There is missing value. Please input a value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Alolononon"},"content":"                    else if (!isInteger(inputss[1]) || Integer.parseInt(inputss[1]) \u003c 1 || Integer.parseInt(inputss[1]) \u003e storage.size())","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! INVALID input!! Please input a proper value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Alolononon"},"content":"                    int elemNum \u003d Integer.parseInt(inputss[1]);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"     Alrighty, Princess have removed this task:\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + storage.get(elemNum-1).toString());","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Alolononon"},"content":"                    storage.remove(elemNum-1);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"Alolononon"},"content":"                    System.out.printf(\"     Now you have %d tasks in the list.\\n\", storage.size());","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"mark\")) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"Alolononon"},"content":"                    // Mark a task as done","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"Alolononon"},"content":"                    if (inputss.length \u003c 2)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! There is missing value. Please input a value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"Alolononon"},"content":"                    else if (!isInteger(inputss[1]) || Integer.parseInt(inputss[1]) \u003c 1 || Integer.parseInt(inputss[1]) \u003e storage.size())","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! INVALID input!! Please input a proper value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"Alolononon"},"content":"                    int elemNum \u003d Integer.parseInt(inputss[1]);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"Alolononon"},"content":"                    Task elem \u003d storage.get(elemNum-1);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"Alolononon"},"content":"                    elem.markTask();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"     Nice! You are the best! Princess have help you marked this task as done:\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + elem.toString());","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"unmark\")) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"Alolononon"},"content":"                    // Mark a task as undone","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"Alolononon"},"content":"                    if (inputss.length \u003c 2)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! There is missing value. Please input a value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"Alolononon"},"content":"                    else if (!isInteger(inputss[1]) || Integer.parseInt(inputss[1]) \u003c 1 ||","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"Alolononon"},"content":"                              Integer.parseInt(inputss[1]) \u003e storage.size())","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! INVALID input!! Please input a proper value.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"Alolononon"},"content":"                    int elemNum \u003d Integer.parseInt(inputss[1]);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"Alolononon"},"content":"                    Task elem \u003d storage.get(elemNum-1);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"Alolononon"},"content":"                    elem.unmarkTask();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"     Whattt?!?! Alright... Princess have marked this task as undone:\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + elem.toString());","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"todo\") || code.equals(\"deadline\") || code.equals(\"event\")) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"Alolononon"},"content":"                    // Add a new task","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"Alolononon"},"content":"                    if (inputss.length \u003c 2)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! Sweetheart, There is no task description!\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"Alolononon"},"content":"                    try {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"Alolononon"},"content":"                        if (code.equals(\"todo\")) {     //adding  new item into storage","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"Alolononon"},"content":"                            System.out.println(\"     \" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"Alolononon"},"content":"                            String taskname \u003d input.substring(5);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"Alolononon"},"content":"                            task \u003d new Todo(taskname);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"Alolononon"},"content":"                        } else if (code.equals(\"deadline\")) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"Alolononon"},"content":"                            String[] stringArr \u003d input.substring(9).split(\"/by \");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"Alolononon"},"content":"                            if (stringArr.length \u003c 2)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"Alolononon"},"content":"                                throw new PrincessException(\"     \" + \"OH NOOO!!! There is no Due Date! Please use \u0027/by\u0027 to set Due Date.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"Alolononon"},"content":"                            String taskname \u003d stringArr[0];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"Alolononon"},"content":"                            String by \u003d stringArr[1];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"Alolononon"},"content":"                            task \u003d new Deadline(taskname, by);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"Alolononon"},"content":"                            System.out.println(\"     \" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"Alolononon"},"content":"                        } else {        //if (code.equals(\"event\")) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"Alolononon"},"content":"                            String[] stringArr \u003d input.substring(6).split(\"/from | /to \");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"Alolononon"},"content":"                            if (stringArr.length \u003c 3)","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"Alolononon"},"content":"                                throw new PrincessException(\"     \" + \"OH NOOO!!! There is missing \u0027from\u0027 and \u0027to\u0027 timings! Please use \u0027/from\u0027 and \u0027/to\u0027.\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"Alolononon"},"content":"                            String taskname \u003d stringArr[0];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"Alolononon"},"content":"                            String from \u003d stringArr[1];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"Alolononon"},"content":"                            String to \u003d stringArr[2];","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"Alolononon"},"content":"                            System.out.println(\"     \" + \"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"Alolononon"},"content":"                            task \u003d new Event(taskname, from, to);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"Alolononon"},"content":"                        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"       \" + task.toString());","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"Alolononon"},"content":"                        storage.add(task);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"Alolononon"},"content":"                        System.out.printf(\"     Now you have %d tasks in the list.\\n\", storage.size());","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"Alolononon"},"content":"                    } catch (IllegalArgumentException e) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     \" + e.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     \" + \"try again\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"Alolononon"},"content":"                    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"help\")) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"Alolononon"},"content":"                    // Display help message","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"     \" + \"below are the commands! Command me boi!\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"list\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"delete [index]\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"mark [index]\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"unmark [index]\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"todo [taskname]\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"deadline [taskname] /by [deadline]\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"event [taskname] /from [date/time] /to [date/time]\");","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"find [keyword]\");","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"Alolononon"},"content":"                    System.out.println(\"       \" + \"bye\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"Alolononon"},"content":"                } else if (code.equals(\"find\")) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"Alolononon"},"content":"                    if (inputss.length \u003c 2)","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"Alolononon"},"content":"                        throw new PrincessException(\"     \" + \"OH NOOO!!! There is missing keyword. Please input a keyword to search.\");","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"Alolononon"},"content":"                    String keyword \u003d input.substring(5).toLowerCase();","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"Alolononon"},"content":"                    ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"Alolononon"},"content":"                    for (Task eachtask : storage) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"Alolononon"},"content":"                        if (eachtask.getTaskName().toLowerCase().contains(keyword)) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"Alolononon"},"content":"                            matchingTasks.add(eachtask);","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"Alolononon"},"content":"                        }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"Alolononon"},"content":"                    }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"Alolononon"},"content":"                    if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     No matching tasks found.\");","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"Alolononon"},"content":"                    } else {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"Alolononon"},"content":"                        System.out.println(\"     Here are the matching tasks in your list:\");","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"Alolononon"},"content":"                        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"Alolononon"},"content":"                            System.out.println(\"     \" + (i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"Alolononon"},"content":"                        }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"Alolononon"},"content":"                    }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"Alolononon"},"content":"                } else {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"Alolononon"},"content":"                    throw new PrincessException(\"     \" + \"OH NOOO!!! I don\u0027t understand what that means... type \u0027help\u0027 for help\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"Alolononon"},"content":"                }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"Alolononon"},"content":"          } catch (PrincessException e) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"Alolononon"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"Alolononon"},"content":"          }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"Alolononon"},"content":"            System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"Alolononon"},"content":"            System.out.println();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"     Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"Alolononon"},"content":"        System.out.println(\"    ____________________________________________________________\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"Alolononon"},"content":"        // Save tasks to file before exiting","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"Alolononon"},"content":"        try {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"Alolononon"},"content":"            FileStoringRetrieving.writeToFile(filePath, storage);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"Alolononon"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"Alolononon"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"Alolononon"},"content":"    public static boolean isInteger(String str) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"Alolononon"},"content":"        try {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"Alolononon"},"content":"            Integer.parseInt(str);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"Alolononon"},"content":"            return true; // Successfully parsed, it\u0027s an integer","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"Alolononon"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"Alolononon"},"content":"            return false; // Not an integer","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"Alolononon"},"content":"        }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-25","isFullCredit":false}],"authorContributionMap":{"Alolononon":220}},{"path":"src/main/java/PrincessException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"public class PrincessException extends Exception {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"  public PrincessException(String msg) {","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"    super(msg);","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"  }","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-25","isFullCredit":false}],"authorContributionMap":{"Alolononon":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":" * Represents a task with a name and a completion status.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"public class Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":"    private String taskName;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"    private boolean isDone;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"     * Constructs a new Task with the specified name.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"     * By default, the task is not completed.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"    public Task(String taskName) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"     * Gets the name or description of the task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"     * @return The task name.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"    public String getTaskName() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"        return this.taskName;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"Alolononon"},"content":"     * Checks if the task is completed.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"Alolononon"},"content":"     * @return {@code true} if the task is done, otherwise {@code false}.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"Alolononon"},"content":"    public boolean getIsTaskDone() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"Alolononon"},"content":"        return this.isDone;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"Alolononon"},"content":"     * Marks the task as completed.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"Alolononon"},"content":"    public void markTask() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"Alolononon"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"Alolononon"},"content":"     * Marks the task as not completed.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"Alolononon"},"content":"    public void unmarkTask() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"Alolononon"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"Alolononon"},"content":"     * Returns the string representation of the task,","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"Alolononon"},"content":"     * indicating its completion status and name.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"Alolononon"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"Alolononon"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"Alolononon"},"content":"        return \"[\" + (this.isDone ? \"X\" : \" \") + \"] \" + this.taskName;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"Alolononon":62}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"/**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":" * Represents a Todo task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":" * A Todo is a task that only has a description and completion status.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":" */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"    /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"     * Constructs a Todo task with the specified description.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"     *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"     */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"Alolononon"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"Alolononon"},"content":"      super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"Alolononon"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"  /**","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"Alolononon"},"content":"   * Returns the string representation of the Todo task.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"Alolononon"},"content":"   *","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"Alolononon"},"content":"   * @return A formatted string indicating the task type and its details.","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"Alolononon"},"content":"   */","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"Alolononon"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"Alolononon"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"Alolononon"},"content":"  }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"Alolononon"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"Alolononon"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"Alolononon":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Alolononon"},"content":"todo borrow book","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"Alolononon"},"content":"deadline return book /by 01-03-2000 1300","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"Alolononon"},"content":"event project meeting /from 01/03/2000 1000 /to 01/03/2000 1200","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"Alolononon"},"content":"mark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"Alolononon"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"Alolononon"},"content":"unmark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"Alolononon"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"Alolononon"},"content":"delete 2","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"Alolononon"},"content":"list","lastModifiedDate":"2025-01-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"Alolononon"},"content":"delete 1","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"Alolononon"},"content":"delete 1","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"Alolononon"},"content":"bye","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"Alolononon":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"Alolononon"},"content":"java -classpath ..\\bin Princess \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"Alolononon":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"Alolononon"},"content":"java -classpath ../bin Princess \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"Alolononon":1,"-":37}}]
