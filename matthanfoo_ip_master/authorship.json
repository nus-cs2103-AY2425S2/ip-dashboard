[{"path":"src/main/java/Chatty.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"import tasks.*;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import running.*;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"public class Chatty {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"    private TaskList tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    private UI ui;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    public Chatty(String filePath) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"        ui \u003d new UI(storage, tasks);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"     * this function initialises a new Parser object and starts uses the user interface to welcome the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"     * to the chatbot and read any further input until the user chooses to exit the chatbot","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"    public void run() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"        boolean running \u003d true;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"        try {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"            ui.print(\"Hello! I\u0027m Chatty McChatface\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"            ui.print(\"What can I do for you?\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"            while (running) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"                String command \u003d ui.readCommand();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"                ui.printLine();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"                running \u003d parser.execute(tasks, command, ui);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"            storage.save(tasks);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"            ui.print(\"Data saved successfully. Goodbye!\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"        } finally {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"            ui.printLine();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"        new Chatty(\"ChattyData.csv\").run();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-03","isFullCredit":false}],"authorContributionMap":{"matthanfoo":44}},{"path":"src/main/java/running/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package running;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"public class Parser {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"    public Parser() {}","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string representing a date and checks if it is in dd-mm-yyyy format and","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"     * if the date, month, and year are within reasonable values so that it can be used to create","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"     * a valid date time object","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"     * @param   date    a string representing only the date of a datetime input","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"     * @return          a boolean if the date provided is formatted correctly","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"    public static boolean validateDate(String date) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"        String regex \u003d \"^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-(\\\\d{4})$\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"        Matcher matcher \u003d pattern.matcher(date);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"        return matcher.matches();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string representing a time and checks if it is in HH:mm format and","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"     * if the hour and minute are within reasonable values so that it can be used to create","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"     * a valid date time object","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"     * @param   time    a string representing only the time of a datetime input","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"     * @return          a boolean if the time provided is formatted correctly","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"    public static boolean validateTime(String time) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"        String regex \u003d \"^([01][0-9]|2[0-3]):[0-5][0-9]$\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"        Matcher matcher \u003d pattern.matcher(time);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"        return matcher.matches();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string containing \"mark\", attempts to extract the string following the string \"mark\",","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"matthanfoo"},"content":"     * and tries to convert this string to an integer that can be used to index the item indicated","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"matthanfoo"},"content":"     * @param   s       a string that contains mark (and ideally a valid integer representing an index)","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"matthanfoo"},"content":"     * @return          a non-negative index if a valid integer is found in the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"matthanfoo"},"content":"     *                  and -1 if the input is not valid and an integer cannot be found","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"matthanfoo"},"content":"    public static int parseMark(String s) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"matthanfoo"},"content":"        Pattern p \u003d Pattern.compile(\"([0-9]+$)\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"matthanfoo"},"content":"        Matcher m \u003d p.matcher(s);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"matthanfoo"},"content":"        int markIndex \u003d -1;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"matthanfoo"},"content":"        if (m.find()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"matthanfoo"},"content":"            markIndex \u003d Integer.parseInt(m.group(1)) - 1;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"matthanfoo"},"content":"        return markIndex;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string containing a full task creation command and extracts the title/name of the task","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"matthanfoo"},"content":"     * @param   s       a string representing the full command to create a task","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"matthanfoo"},"content":"     * @param   type    a string representing the task the user is trying to create, identified by the execute function","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"matthanfoo"},"content":"     * @return          a string representing the title/name of the task the user is trying to create \u003cbr\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"matthanfoo"},"content":"     *                  if no title is found, it returns an empty string \"\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"matthanfoo"},"content":"    public static String parseTitle(String s, String type) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"matthanfoo"},"content":"        Pattern titlePattern \u003d Pattern.compile(type + \"\\s*(.*)\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"matthanfoo"},"content":"        Matcher titlePatternMatcher \u003d titlePattern.matcher(s);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"matthanfoo"},"content":"        return titlePatternMatcher.find() ? titlePatternMatcher.group(1) : \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in any string and a regex pattern and extracts the first sequence that matches the pattern","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"matthanfoo"},"content":"     * @param   s       any string of text","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"matthanfoo"},"content":"     * @param   regex   a regex pattern for search","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"matthanfoo"},"content":"     * @return          the first sequence in s that is matched by regex, \u003cbr\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"matthanfoo"},"content":"     *                  if no matches are found it returns an empty string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"matthanfoo"},"content":"    public static String parseRegex(String s, String regex) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"matthanfoo"},"content":"        Pattern p \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"matthanfoo"},"content":"        Matcher m \u003d p.matcher(s);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"matthanfoo"},"content":"        return m.find() ? m.group(1) : \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a possible date-time string and attempts to validate it and","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"matthanfoo"},"content":"     * convert it into a valid datetime format string according to \"dd-mm-yyyy HH:mm\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"matthanfoo"},"content":"     * @param   input   a string identified as a possible representation of a datetime","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"matthanfoo"},"content":"     * @return          a valid datetime formatted string according to \"dd-mm-yyyy HH:mm\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"matthanfoo"},"content":"     * @throws  Exception if the date or time provided were not properly formatted or invalid","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"matthanfoo"},"content":"    public static String readInputIntoIso(String input) throws Exception {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"matthanfoo"},"content":"        // need to throw exception","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"matthanfoo"},"content":"        // validates expected format either \"dd-mm-yyyy\" or \"dd-mm-yyyy hh:mm\" --\u003e return \"dd-mm-yyyy hh:mm\"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"matthanfoo"},"content":"        String[] dateitems \u003d input.split(\" \");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"matthanfoo"},"content":"        String date \u003d \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"matthanfoo"},"content":"        String time \u003d \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"matthanfoo"},"content":"        if (dateitems.length \u003d\u003d 2) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"matthanfoo"},"content":"            if (validateDate(dateitems[0])) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"matthanfoo"},"content":"                date \u003d dateitems[0];","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"matthanfoo"},"content":"            } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"matthanfoo"},"content":"                throw new Exception(\"invalid date, the accepted format is dd-mm-yyyy, input: \" + input);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"matthanfoo"},"content":"            if (validateTime(dateitems[1])) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"matthanfoo"},"content":"                time \u003d dateitems[1];","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"matthanfoo"},"content":"            } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"matthanfoo"},"content":"                throw new Exception(\"invalid time, the accepted format is HH:mm (24-hour time), input: \" + input);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"matthanfoo"},"content":"        } else if (dateitems.length \u003d\u003d 1) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"matthanfoo"},"content":"            if (validateDate(dateitems[0])) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"matthanfoo"},"content":"                date \u003d dateitems[0];","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"matthanfoo"},"content":"                time \u003d \"00:00\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"matthanfoo"},"content":"            } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"matthanfoo"},"content":"                throw new Exception(\"invalid date, the accepted format is dd-mm-yyyy, input: \" + input);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"matthanfoo"},"content":"            throw new Exception(\"invalid date, the accepted format is dd-mm-yyyy, input: \" + input);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"matthanfoo"},"content":"        return date + \" \" + time;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a command, parses it to identify the action to be taken, executes the action,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"matthanfoo"},"content":"     * then prints a reply to the user and returns a true or false to the chatbot run function to indicate","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"matthanfoo"},"content":"     * whether to continue running or terminate","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"matthanfoo"},"content":"     * @param   tasks   the current list of tasks","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"matthanfoo"},"content":"     * @param   command the input read from the user interface","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"matthanfoo"},"content":"     * @param   ui      the user interface used for printing replies","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"matthanfoo"},"content":"     * @return          false if the user would like to exit, and true otherwise","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"matthanfoo"},"content":"    public boolean execute(TaskList tasks, String command, UI ui) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"matthanfoo"},"content":"        String printText \u003d \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"matthanfoo"},"content":"        if (command.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"matthanfoo"},"content":"            return false;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d tasks.list();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.equalsIgnoreCase(\"today\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d tasks.today();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"unmark\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"matthanfoo"},"content":"            int markIndex \u003d parseMark(command);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d markIndex \u003c 0 ? \"Invalid input\" : tasks.unmarkTask(markIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"mark\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"matthanfoo"},"content":"            int markIndex \u003d parseMark(command);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d markIndex \u003c 0 ? \"Invalid input\" : tasks.markTask(markIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"delete\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"matthanfoo"},"content":"            int markIndex \u003d parseMark(command);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d markIndex \u003c 0 ? \"Invalid input\" : tasks.deleteTask(markIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"find\")) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"matthanfoo"},"content":"            String findText \u003d parseRegex(command, \"find\\s*(.*)\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d tasks.find(findText);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"todo\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"matthanfoo"},"content":"            String todoTitle \u003d parseTitle(command, \"todo\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d todoTitle.equals(\"\") ? \"Invalid task title\" : tasks.createTodo(todoTitle);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"event\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"matthanfoo"},"content":"            String eventTitle \u003d parseTitle(command, \"event\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"matthanfoo"},"content":"            if (eventTitle.equals(\"\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"matthanfoo"},"content":"                printText \u003d \"Invalid event title\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"matthanfoo"},"content":"            } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"matthanfoo"},"content":"                String fromString \u003d parseRegex(command, \"/from\\s*(.*?)\\s+/\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"matthanfoo"},"content":"                String toString \u003d parseRegex(command, \"/to\\\\s*(.*)\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"matthanfoo"},"content":"                try {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"matthanfoo"},"content":"                    fromString \u003d readInputIntoIso(fromString);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"matthanfoo"},"content":"                    toString \u003d readInputIntoIso(toString);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"matthanfoo"},"content":"                    printText \u003d tasks.createEvent(eventTitle, fromString, toString);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"matthanfoo"},"content":"                } catch (Exception e){","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"matthanfoo"},"content":"                    printText \u003d e.getMessage();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"matthanfoo"},"content":"                }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"matthanfoo"},"content":"        } else if (command.contains(\"deadline\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"matthanfoo"},"content":"            String deadlineTitle \u003d parseTitle(command, \"deadline\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"matthanfoo"},"content":"            if (deadlineTitle.equals(\"\")) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"matthanfoo"},"content":"                printText \u003d \"Invalid deadline title\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"matthanfoo"},"content":"            } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"matthanfoo"},"content":"                String byString \u003d parseRegex(command, \"/by\\\\s*(.*)\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"matthanfoo"},"content":"                try {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"matthanfoo"},"content":"                    byString \u003d readInputIntoIso(byString);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"matthanfoo"},"content":"                    printText \u003d tasks.createDeadline(deadlineTitle, byString);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"matthanfoo"},"content":"                } catch (Exception e){","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"matthanfoo"},"content":"                    printText \u003d e.getMessage();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"matthanfoo"},"content":"                }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"matthanfoo"},"content":"            printText \u003d \"Invalid command\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"matthanfoo"},"content":"        ui.print(printText);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"matthanfoo"},"content":"        return true;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"matthanfoo":198}},{"path":"src/main/java/running/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package running;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import tasks.*;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import java.io.*;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"public class Storage {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public String filename;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"    public static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"    public Storage(String filename) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"        this.filename \u003d filename;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string array of items in a row downloaded from a csv, and creates a task with the relevant information","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"     * @param   row     a string array containing items corresponding to the columns in the csv for a row","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"     * @return          a task created with the relevant information","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"     * @throws Exception if the task is not either a todo, deadline, or an event","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"    public Task readRowToTask(String[] row) throws Exception {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"        Task t;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"        if (row[0].equals(\"T\")) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"            t \u003d new Todo(row[1]);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"            if (row[2].equals(\"X\")) { t.mark(); }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"        } else if (row[0].equals(\"E\")) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"            t \u003d new Event(row[1], LocalDateTime.parse(row[3], dateTimeFormatter), LocalDateTime.parse(row[3], dateTimeFormatter));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"            if (row[2].equals(\"X\")) { t.mark(); }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"        } else if (row[0].equals(\"D\")) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"            t \u003d new Deadline(row[1], LocalDateTime.parse(row[3], dateTimeFormatter));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"            if (row[2].equals(\"X\")) { t.mark(); }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"            throw new Exception(\"Invalid task\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"        return t;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"     * this function converts a csv file of saved data into an ArrayList of Tasks","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"     * @return          an ArrayList of Tasks as read from the csv file database","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"matthanfoo"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"matthanfoo"},"content":"        File file \u003d new File(filename);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"matthanfoo"},"content":"        ArrayList\u003cTask\u003e userInputs \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"matthanfoo"},"content":"        if (file.exists()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"matthanfoo"},"content":"            System.out.println(\"File exists, reading contents...\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"matthanfoo"},"content":"            try (BufferedReader br \u003d new BufferedReader(new FileReader(filename))) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"matthanfoo"},"content":"                String line;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"matthanfoo"},"content":"                while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"matthanfoo"},"content":"                    String[] row \u003d line.split(\",\"); // Splitting by comma","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"matthanfoo"},"content":"                    userInputs.add(readRowToTask(row));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"matthanfoo"},"content":"                }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"matthanfoo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"matthanfoo"},"content":"                System.out.println(\"Error reading the file.\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"matthanfoo"},"content":"                e.printStackTrace();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"matthanfoo"},"content":"            System.out.println(\"File does not exist, creating new CSV...\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"matthanfoo"},"content":"            try (FileWriter writer \u003d new FileWriter(filename)) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"matthanfoo"},"content":"//                writer.append(\"Type, Title, Done, Date1, Date2\\n\"); // CSV Header","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"matthanfoo"},"content":"                System.out.println(\"CSV file written successfully.\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"matthanfoo"},"content":"            } catch (IOException e) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"matthanfoo"},"content":"                System.out.println(\"Error writing to file.\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"matthanfoo"},"content":"                e.printStackTrace();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"matthanfoo"},"content":"        return userInputs;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a TaskList object and reads it into multiple lines in order to save into a csv file","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"matthanfoo"},"content":"     * @param tasks          a TaskList containing a list of tasks from the chatbot","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"matthanfoo"},"content":"    public void save(TaskList tasks) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"matthanfoo"},"content":"        String fileName \u003d \"ChattyData.csv\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"matthanfoo"},"content":"        try (PrintWriter writer \u003d new PrintWriter(new FileWriter(fileName, false))) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"matthanfoo"},"content":"            writer.println(\"Type,Title,Done,Date1,Date2\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"matthanfoo"},"content":"            ArrayList\u003cTask\u003e taskList \u003d tasks.getTasks();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"matthanfoo"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"matthanfoo"},"content":"                writer.println(task.toCsvFormat());","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"matthanfoo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"matthanfoo"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"matthanfoo":97}},{"path":"src/main/java/running/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package running;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import tasks.*;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"public class TaskList {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"     * this function converts all the tasks stored into a printable, numerated format","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"     * @return          a formatted, numerated string of all the tasks","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"    public String list() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"        String result \u003d \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"        int i \u003d 0;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"        if (!tasks.isEmpty()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"            while (i !\u003d tasks.size()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"                result +\u003d \"\\n\" + String.valueOf(i + 1) + \". \" + tasks.get(i);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"                i++;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"There are no tasks in your list\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"        return result;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"     * this function identifies all tasks that occur / are due today and","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"     * converts all the tasks stored into a printable, numerated format","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"     * @return          a formatted, numerated string of all the tasks with date matching the current date","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"    public String today() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"        String result \u003d \"\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"matthanfoo"},"content":"        ArrayList\u003cTask\u003e todayTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"matthanfoo"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"matthanfoo"},"content":"            if (task.getDt1().toLocalDate().equals(LocalDateTime.now().toLocalDate())) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"matthanfoo"},"content":"                todayTasks.add(task);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"matthanfoo"},"content":"        if (!todayTasks.isEmpty()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"Here are your tasks for today: \";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"matthanfoo"},"content":"            for (Task task : todayTasks) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"matthanfoo"},"content":"                result +\u003d task + \"\\n\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"No tasks for today!\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"matthanfoo"},"content":"        return result;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"matthanfoo"},"content":"    public String createTodo(String title) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"matthanfoo"},"content":"        Todo t \u003d new Todo(title);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"matthanfoo"},"content":"        tasks.add(t);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"matthanfoo"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + t + \"\\nNow you have \" + tasks.size() + \" items in the list.\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"matthanfoo"},"content":"     * this function creates a Deadline object using the provided title and string representing the deadline","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"matthanfoo"},"content":"     * @param   deadlineTitle   the title identified by the Parser","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"matthanfoo"},"content":"     * @param   byString        the formatted datetime string representing the deadline for the task","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"matthanfoo"},"content":"     * @return                  an acknowledgement of the task creation along with task details","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"matthanfoo"},"content":"    public String createDeadline(String deadlineTitle, String byString) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"matthanfoo"},"content":"        Deadline d \u003d new Deadline(deadlineTitle, LocalDateTime.parse(byString, dateTimeFormatter));","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"matthanfoo"},"content":"        tasks.add(d);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"matthanfoo"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + d + \"\\nNow you have \" + tasks.size() + \" items in the list.\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"matthanfoo"},"content":"     * this function creates a Event object using the provided title and strings representing the start and end time of the event","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"matthanfoo"},"content":"     * @param   eventTitle  the title identified by the Parser","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"matthanfoo"},"content":"     * @param   fromString  the formatted datetime string representing the starttime for the task","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"matthanfoo"},"content":"     * @param   toString    the formatted datetime string representing the endtime for the task","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"matthanfoo"},"content":"     * @return              an acknowledgement of the task creation along with task details","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"matthanfoo"},"content":"    public String createEvent(String eventTitle, String fromString, String toString) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"matthanfoo"},"content":"        Event e \u003d new Event(eventTitle, LocalDateTime.parse(fromString, dateTimeFormatter), LocalDateTime.parse(toString, dateTimeFormatter));","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"matthanfoo"},"content":"        tasks.add(e);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"matthanfoo"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + e + \"\\nNow you have \" + tasks.size() + \" items in the list.\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"matthanfoo"},"content":"     * this function ensures the item to be marked as completed is in the list,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"matthanfoo"},"content":"     * if it is, it marks the event as completed, or else it informs the user the item does not exist","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"matthanfoo"},"content":"     * @param   markIndex   an integer representing the index of the item to be marked as completed","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"matthanfoo"},"content":"     * @return              an acknowledgement of the task completion or the task not existing","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"matthanfoo"},"content":"    public String markTask(int markIndex) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"matthanfoo"},"content":"        if (markIndex \u003c tasks.size()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"matthanfoo"},"content":"            Task task \u003d tasks.get(markIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"matthanfoo"},"content":"            task.mark();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"matthanfoo"},"content":"            return (\"OK, I\u0027ve marked this task as done:\\n   \" + task);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"matthanfoo"},"content":"            return \"Invalid index: \" + markIndex;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"matthanfoo"},"content":"     * this function ensures the item to be marked as not completed is in the list,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"matthanfoo"},"content":"     * if it is, it marks the event as not completed, or else it informs the user the item does not exist","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"matthanfoo"},"content":"     * @param   markIndex   an integer representing the index of the item to be marked as not completed","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"matthanfoo"},"content":"     * @return              an acknowledgement of the task de-completion or the task not existing","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"matthanfoo"},"content":"    public String unmarkTask(int markIndex) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"matthanfoo"},"content":"        if (markIndex \u003c tasks.size()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"matthanfoo"},"content":"            Task task \u003d tasks.get(markIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"matthanfoo"},"content":"            task.unmark();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"matthanfoo"},"content":"            return (\"OK, I\u0027ve marked this task as not done yet:\\n   \" + task);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"matthanfoo"},"content":"            return \"Invalid index: \" + markIndex;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"matthanfoo"},"content":"     * this function ensures the item to be deleted is in the list,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"matthanfoo"},"content":"     * if it is, it marks the event as deleted, or else it informs the user the item does not exist","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"matthanfoo"},"content":"     * @param   delIndex   an integer representing the index of the item to be deleted","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"matthanfoo"},"content":"     * @return              an acknowledgement of the task deletion and number of tasks remaining or the task not existing","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"matthanfoo"},"content":"    public String deleteTask(int delIndex) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"matthanfoo"},"content":"        if (delIndex \u003c tasks.size()) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"matthanfoo"},"content":"            Task task \u003d tasks.get(delIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"matthanfoo"},"content":"            tasks.remove(delIndex);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"matthanfoo"},"content":"            return \"Noted. I\u0027ve removed this task:\\n   \" + task + \"\\n Now you have \" + tasks.size() + \" items in the list.\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"matthanfoo"},"content":"            return \"Invalid index: \" + delIndex;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"matthanfoo"},"content":"     * this function takes in a string findText and finds all tasks","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"matthanfoo"},"content":"     * containining findText (case-insensitive) in its description and returns a readbale list as a string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"matthanfoo"},"content":"     * @param   findText    a string containing target text to search for","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"matthanfoo"},"content":"     * @return              a list of all tasks containing findText","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"matthanfoo"},"content":"    public String find(String findText) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"matthanfoo"},"content":"        String result \u003d \"\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"matthanfoo"},"content":"        ArrayList\u003cTask\u003e findTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"matthanfoo"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"matthanfoo"},"content":"            if (Pattern.compile(Pattern.quote(findText), Pattern.CASE_INSENSITIVE).matcher(task.getDescription()).find()) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"matthanfoo"},"content":"                findTasks.add(task);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"matthanfoo"},"content":"        if (!findTasks.isEmpty()) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"Here are the matching tasks in your list: \";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"matthanfoo"},"content":"            for (Task task : findTasks) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"matthanfoo"},"content":"                result +\u003d \"\\n\" + task;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"matthanfoo"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"matthanfoo"},"content":"        } else {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"matthanfoo"},"content":"            result \u003d \"No tasks matching your search were found.\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"matthanfoo"},"content":"        return result;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"matthanfoo"},"content":"     * this function returns the underlying ArrayList of Tasks","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"matthanfoo"},"content":"     * @return  an ArrayList of Tasks stored in the TaskList","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"matthanfoo"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"matthanfoo"},"content":"        return tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"matthanfoo":185}},{"path":"src/main/java/running/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package running;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import java.io.InputStreamReader;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"public class UI {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"    protected Storage storage;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    protected TaskList taskList;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public BufferedReader br;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    public UI(Storage storage, TaskList taskList) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        this.br \u003d new BufferedReader(new InputStreamReader(System.in));","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"     * this function reads the next line from the reader and returns it as a string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"     * @return  the next line from the reader","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"     * @throws  if the reader throws an exception","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"    public String readCommand() throws IOException {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"        // validate and convert command into text","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"        String command \u003d this.br.readLine();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"        return command;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"    public void printLine() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"    public void print(String s) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"        System.out.println(s);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"        printLine();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"matthanfoo":39}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"        super(description, by, LocalDateTime.of(1990, 01, 01, 00, 00, 00, 00));","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    @Override","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public String toString() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dt1 + \")\";","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"    public String toCsvFormat() {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        return \"D,\" + super.toCsvFormat();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-03","isFullCredit":false}],"authorContributionMap":{"matthanfoo":18}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"public class Event extends Task {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"    public Event(String description, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"        super(description, start, end);","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    @Override","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public String toString() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + dt1 + \" to: \" + dt2 + \")\";","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"    public String toCsvFormat() {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        return \"E,\" + super.toCsvFormat();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-03","isFullCredit":false}],"authorContributionMap":{"matthanfoo":18}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"public class Task {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"    protected String description;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    protected boolean isDone;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"    protected LocalDateTime dt1;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    protected LocalDateTime dt2;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public static DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    public Task(String description, LocalDateTime dt1, LocalDateTime dt2) {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        this.dt1 \u003d dt1;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"        this.dt2 \u003d dt2;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"     * this function returns the completion status of a Task as a string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"     * @return  \"X\" is the task is done, \"\" if the task is not","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"     * this function marks an item as completed","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"    public void mark() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"     * this function marks an item as not completed","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"    public void unmark() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"     * this function converts a task into a readable string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"matthanfoo"},"content":"     * @return  task details as a readbale string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"matthanfoo"},"content":"    public String toString() {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"matthanfoo"},"content":"        return \" [\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"matthanfoo"},"content":"     * this function returns the first date of a Task (none for todo, deadline for deadline, start for event)","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"matthanfoo"},"content":"     * this datetime object is used for identifying if the task is occurring today, and for sorting (not implemented yet)","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"matthanfoo"},"content":"     * @return  DateTime object representing the datetime tagged to the event","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"matthanfoo"},"content":"    public LocalDateTime getDt1() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"matthanfoo"},"content":"        return dt1;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"matthanfoo"},"content":"    public String getDescription() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"matthanfoo"},"content":"        return description;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"matthanfoo"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"matthanfoo"},"content":"     * this function converts the task details into a string that can be saved in the csv file","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"matthanfoo"},"content":"     * @return  task details as comma-separated string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"matthanfoo"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"matthanfoo"},"content":"    public String toCsvFormat() {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"matthanfoo"},"content":"        String doneText \u003d this.isDone ? \"X\" : \" \";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"matthanfoo"},"content":"        return description + \",\" + doneText + \",\" + dt1.format(dateTimeFormatter)+ \",\" + dt2.format(dateTimeFormatter);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-03","isFullCredit":false}],"authorContributionMap":{"matthanfoo":74}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package tasks;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"        super(description, LocalDateTime.of(1990, 01, 01, 00, 00, 00, 00), LocalDateTime.of(1990, 01, 01, 00, 00, 00, 00));","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"    @Override","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    public String toString() {","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-04","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"    public String toCsvFormat() {","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        return \"T,\" + super.toCsvFormat();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-04","isFullCredit":false}],"authorContributionMap":{"matthanfoo":18}},{"path":"src/test/java/running/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"matthanfoo"},"content":"package running;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"matthanfoo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"matthanfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"matthanfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"matthanfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"matthanfoo"},"content":"public class TaskListTest {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"matthanfoo"},"content":"    public void validateDate_validDateTrue(){","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.validateDate(\"16-02-2025\"), true);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"matthanfoo"},"content":"    public void validateDate_invalidDateFalse(){","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.validateDate(\"02-16-25 12:45\"), false);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.validateDate(\"16/13/25\"), false);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"matthanfoo"},"content":"    public void validateTime_validTimeTrue(){","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.validateDate(\"12:45\"), true);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"matthanfoo"},"content":"    public void validateTime_validTimeFalse(){","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.validateDate(\"32:45\"), false);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"matthanfoo"},"content":"    public void parseMark_returnsDigit() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.parseMark(\"mark 3\"), 3);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.parseMark(\"unmark 31\"), 31);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"matthanfoo"},"content":"    public void parseTitle_returnsTitle() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.parseTitle(\"/todo testtitle\", \"todo\"), \"testtitle\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.parseTitle(\"/todo twoword title\", \"todo\"), \"twoword title\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"matthanfoo"},"content":"        assertEquals(Parser.parseTitle(\"/deadline twoword title /by date\", \"deadline\"), \"twoword title\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"matthanfoo"},"content":"    @Test","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"matthanfoo"},"content":"    public void readInputIntoIso_returnsIsoOrException() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"matthanfoo"},"content":"        try {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"matthanfoo"},"content":"            assertEquals(Parser.readInputIntoIso(\"16-02-2025 12:00\"), \"16-02-2025 12:00\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"matthanfoo"},"content":"            assertEquals(Parser.readInputIntoIso(\"16-02-2025\"), \"16-02-2025 00:00\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"matthanfoo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"matthanfoo"},"content":"            System.out.println(\"Testing readInputIntoIso, expected true, got: \" + e.getMessage());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"matthanfoo"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"matthanfoo"},"content":"        assertThrows(Exception.class, () -\u003e {Parser.readInputIntoIso(\"16-2-2025\");});","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"matthanfoo"},"content":"        assertThrows(Exception.class, () -\u003e {Parser.readInputIntoIso(\"16-22-2025\");});","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"matthanfoo"},"content":"        assertThrows(Exception.class, () -\u003e {Parser.readInputIntoIso(\"16-22-2025 1200\");});","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"matthanfoo"},"content":"        assertThrows(Exception.class, () -\u003e {Parser.readInputIntoIso(\"16-22-2025 25:00\");});","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"matthanfoo"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"matthanfoo"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"matthanfoo"},"content":"}","lastModifiedDate":"2025-02-16","isFullCredit":false}],"authorContributionMap":{"matthanfoo":59}}]
