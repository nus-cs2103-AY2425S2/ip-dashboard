[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"# NiniNana project template","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _NiniNana_. Given below are instructions on how to use it.","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"1. After that, locate the `src/main/java/NiniNana.java` file, right-click it, and choose `Run NiniNana.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":3,"-":23}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"checkstyle {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"    mainClass.set(\"NiniNana\")","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    archiveBaseName \u003d \"Nininana\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":7,"-":39}},{"path":"src/main/java/NiniNana.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.util.List;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import commands.Command;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import components.Parser;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":" * The main class for the NiniNana task management application.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":" * It handles user input, processes commands, and manages tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"public class NiniNana {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    private final Ui ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    private final Storage storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    private final Parser parser;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    private final Scanner scanner;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a NiniNana instance with specified components.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface handler.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage system for saving and loading tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * @param parser   The parser for processing user input.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * @param scanner  The scanner for reading user input.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"    public NiniNana(Ui ui, Storage storage, Parser parser, Scanner scanner) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        this.parser \u003d parser;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        this.scanner \u003d scanner;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"        List\u003cTask\u003e tasks;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"            tasks \u003d storage.loadTasks();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IOException | NiniException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"            tasks \u003d new ArrayList\u003c\u003e(); // Provide an empty list if loading fails","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"        this.taskList \u003d new TaskList(tasks);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a NiniNana instance with default components.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"    public NiniNana() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"        this(new Ui(), new Storage(), new Parser(), new Scanner(System.in));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     * Starts the task management application.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"     * Continuously reads user input, processes commands, and updates tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"    public void run() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"        ui.showGreeting();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"        while (true) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"            try {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"                String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"                if (!input.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"                    Command command \u003d parser.parseCommand(input);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"                    command.execute(taskList, ui, storage);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"                    if (command.isExit()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"                        break;","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"                    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"                }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"            } catch (NiniException e) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"     * The main entry point of the application.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"        new NiniNana().run();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-17","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":90}},{"path":"src/main/java/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to add a task to the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * This command updates the task list, notifies the user, and saves the task to storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    private final Task task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs an {@code AddCommand} with the specified task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"        this.task \u003d task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the add task command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * Adds the task to the task list, displays a confirmation message to the user,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * and saves the task to storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list to which the task is added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component responsible for saving tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        ui.showTaskAdded(task, taskList.size());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"            storage.saveTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the task associated with this command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"     * @return The task that was added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    public Task getAddedTask() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"        return this.task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":56}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * Represents an abstract command that can be executed within the task management system.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" * Subclasses should implement the {@code execute} method to define specific command behaviors.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"public abstract class Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the command using the provided task list, user interface, and storage components.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list that stores tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface responsible for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component that handles saving and loading tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If an error occurs during execution.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"     * Determines whether the command should cause the program to exit.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"     * By default, commands do not cause an exit.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     * Subclasses can override this method if needed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * @return {@code true} if the command should terminate the program, {@code false} otherwise.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"        return false;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":35}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidTaskNumberException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" * This command removes a task from the list, updates storage, and notifies the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a {@code DeleteCommand} with the specified task index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskIndex The index of the task to be deleted (zero-based).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the delete task command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * Removes the task from the task list, displays a confirmation message,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * and updates the storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list from which the task is deleted.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component responsible for saving tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the task index is invalid or an error occurs while updating storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"    @SuppressWarnings(\"checkstyle:LineLength\")","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"        if (!taskList.isValidIndex(taskIndex)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidTaskNumberException(\"Invalid task number. Please enter a number between 1 and \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"                    + taskList.size() + \".\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"            Task removedTask \u003d taskList.removeTask(taskIndex);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            ui.showTaskRemoved(removedTask, taskList.size());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"            storage.overwriteTasks(taskList.getTasks());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error saving updated task list: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the index of the task to be deleted.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     * @return The zero-based index of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"    public int getDeleteIndex() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"        return this.taskIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":64}},{"path":"src/main/java/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to exit the program.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * This command displays a goodbye message and signals the application to terminate.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the exit command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     * Displays a goodbye message to the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list (not modified by this command).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component (not used by this command).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"        ui.showGoodbye();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     * Indicates that this command will terminate the program.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * @return {@code true}, indicating that this command triggers an exit.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"        return true;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":35}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.util.List;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command that finds tasks in the task list based on a keyword.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":" * The search is case-insensitive and matches tasks whose descriptions contain the keyword.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    private final String keyword;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a FindCommand with the specified keyword.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the find command by searching for tasks that contain the specified keyword.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * If matching tasks are found, they are displayed to the user. Otherwise, a message","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * indicating no matches is shown.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The list of tasks to search within.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface component to display messages.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If an error occurs during execution.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws NiniException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"        List\u003cTask\u003e matchingTasks \u003d taskList.getTasks().stream()","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"                .filter(task -\u003e task.getDescription().toLowerCase().contains(keyword.toLowerCase()))","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"            ui.printLineWithMessage(\"No matching tasks found\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"        } else {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            ui.showTaskList((ArrayList\u003cTask\u003e) matchingTasks);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-29","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":54}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to display the list of tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * This command retrieves the tasks from the task list and displays them to the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the list command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     * Retrieves and displays all tasks stored in the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list containing the tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface responsible for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"        ui.showTaskList(taskList.getTasks());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":25}},{"path":"src/main/java/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidTaskNumberException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * This command updates the task\u0027s status, notifies the user, and updates storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    private final int markIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a {@code MarkCommand} with the specified task index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     * @param markIndex The index of the task to be marked as done (zero-based).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    public MarkCommand(int markIndex) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"        this.markIndex \u003d markIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the mark task command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * Marks the specified task as done, displays a confirmation message,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * and updates the storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list containing the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component responsible for saving tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the task index is invalid or an error occurs while updating storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"        if (!taskList.isValidIndex(markIndex)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidTaskNumberException(\"Invalid task number. Please enter a number between 1 and \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"                    + taskList.size() + \".\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"            taskList.markTask(markIndex);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"            ui.printLineWithMessage(\"Nice! I\u0027ve marked this task as done:\\n  \" + taskList.getTask(markIndex));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"            storage.overwriteTasks(taskList.getTasks());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IllegalStateException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error: Task is already marked as done.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error saving updated task list: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the index of the task to be marked as done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     * @return The zero-based index of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"    public int getTaskIndex() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"        return markIndex;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":64}},{"path":"src/main/java/commands/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to sort tasks by their deadlines or event start times.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" * This command modifies the task list and notifies the user of the sorting operation.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the sort command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"     * Sorts the tasks in the task list based on their deadlines or event start times","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"     * and displays a confirmation message to the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list containing tasks to be sorted.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException Not thrown in this implementation.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        taskList.sortTasks();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        ui.printLineWithMessage(\"Tasks sorted by date!\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":29}},{"path":"src/main/java/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package commands;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import components.Storage;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import components.TaskList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import components.Ui;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidTaskNumberException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * Represents a command to unmark a task as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * This command updates the task\u0027s status, notifies the user, and updates storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    private final int unmarkIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs an {@code UnmarkCommand} with the specified task index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * @param unmarkIndex The index of the task to be unmarked as not done (zero-based).","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    public UnmarkCommand(int unmarkIndex) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        this.unmarkIndex \u003d unmarkIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * Executes the unmark task command.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * Marks the specified task as not done, displays a confirmation message,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * and updates the storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * @param taskList The task list containing the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     * @param storage  The storage component responsible for saving tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the task index is invalid or an error occurs while updating storage.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"        if (!taskList.isValidIndex(unmarkIndex)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidTaskNumberException(\"Invalid task number. Please enter a number between 1 and \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"                    + taskList.size() + \".\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"            taskList.unmarkTask(unmarkIndex);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"            ui.printLineWithMessage(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + taskList.getTask(unmarkIndex));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            storage.overwriteTasks(taskList.getTasks());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IllegalStateException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error: Task is already unmarked.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"            ui.showError(\"Error saving updated task list: \" + e.getMessage());","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the index of the task to be unmarked.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     * @return The zero-based index of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"    public int getUnmarkIndex() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        return this.unmarkIndex;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":65}},{"path":"src/main/java/components/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import commands.AddCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import commands.Command;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import commands.ExitCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import commands.FindCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import commands.ListCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import commands.MarkCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import commands.SortCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"import commands.UnmarkCommand;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"import tasks.EventTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"import tasks.ToDoTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":" * Parses user input and returns the corresponding {@code Command} object.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":" * This class processes different commands and extracts necessary arguments","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":" * for task operations such as adding, marking, unmarking, deleting, and sorting tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"public class Parser {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     * Parses the user input and returns the appropriate {@code Command} object.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * @param input The raw input string entered by the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * @return A {@code Command} object corresponding to the parsed input.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the input command is invalid or has missing/incorrect arguments.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    public Command parseCommand(String input) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"        String commandType \u003d parts[0].toLowerCase();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"        String details \u003d parts.length \u003e 1 ? parts[1].trim() : \"\";","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        switch (commandType) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"        case \"list\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"            return new ListCommand();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"        case \"bye\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"            return new ExitCommand();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        case \"mark\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"            return new MarkCommand(parseIndex(details));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"        case \"unmark\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"            return new UnmarkCommand(parseIndex(details));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"        case \"todo\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            validateArguments(details, \"Description for todo cannot be empty\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"            return new AddCommand(new ToDoTask(details));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        case \"event\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            return parseEvent(details);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        case \"deadline\":","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"            return parseDeadline(details);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"        case \"sort\":","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"            return new SortCommand();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"        case \"delete\":","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"            return new DeleteCommand(parseIndex(details));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"        case \"find\":","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"            return new FindCommand(details);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"        default:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidCommandException(\"Unknown command\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    private Command parseDeadline(String details) throws NiniException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"        validateArguments(details, \"Description cannot be empty for deadline\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        if (!details.contains(\"/by\")) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid format for deadline. Use: deadline \u003cdescription\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"        String[] deadlineParts \u003d details.split(\"/by\", 2);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"        if (deadlineParts.length \u003c 2) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid format for deadline. Use: deadline \u003cdescription\u003e /by \u003ctime\u003e\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"        validateArguments(deadlineParts[0].trim(), \"Description cannot be empty\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"        return new AddCommand(new DeadlineTask(deadlineParts[0].trim(), deadlineParts[1].trim()));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"    private int parseIndex(String input) throws InvalidFormatException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"            return Integer.parseInt(input) - 1;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid task index. Please enter a valid number.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"    private void validateArguments(String input, String errorMessage) throws InvalidFormatException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"        if (input.isEmpty()) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(errorMessage);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"    private Command parseEvent(String details) throws NiniException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"        validateArguments(details, \"Description cannot be empty for event\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"        if (!details.contains(\"/from\") || !details.contains(\"/to\")) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid format for event.\"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"                    + \" Use: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"        String[] eventParts \u003d details.split(\"/from|/to\", 3);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"        if (eventParts.length \u003c 3) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid format for event.\"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"                    + \"Use: event \u003cdescription\u003e /from \u003cstart\u003e /to \u003cend\u003e\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"        validateArguments(eventParts[0].trim(), \"Description cannot be empty\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"        return new AddCommand(new EventTask(eventParts[0].trim(), eventParts[1].trim(), eventParts[2].trim()));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":114}},{"path":"src/main/java/components/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.io.File;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import java.io.IOException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import java.util.List;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":" * Handles file storage operations for saving and loading tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":" * This class manages reading and writing task data to a file, ensuring","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":" * persistence of task lists between program runs.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"public class Storage {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    private static final String DEFAULT_FILE_PATH \u003d \"./data/chat.txt\";","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"    private final String fileName;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a {@code Storage} object with the default file path {@code ./data/chat.txt}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    public Storage() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"        fileName \u003d DEFAULT_FILE_PATH;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a {@code Storage} object with a specified file path.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * @param fileName The path to the file where tasks will be stored.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"    public Storage(String fileName) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        this.fileName \u003d fileName;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"     * Ensures that the directory for the storage file exists.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"     * If the directory does not exist, it attempts to create it.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"     * Displays an error message if the directory creation fails.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"    private void ensureFileDirectoryExists() throws IOException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"        File directory \u003d new File(new File(fileName).getParent());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"        if (!directory.exists() \u0026\u0026 !directory.mkdirs()) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            throw new IOException(\"Failed to create the \u0027data\u0027 directory for saving tasks.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"     * Reads the file line by line, deserializing each line into a {@code Task} object.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"     * If the file does not exist, it returns an empty list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     * @return An {@code ArrayList} of tasks loaded from the file.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException, NiniException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"        File file \u003d new File(fileName);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"        if (!file.exists()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"            return tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"                Task task \u003d Task.deserialize(line);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"                tasks.add(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"        return tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"     * Saves a single task to the storage file by appending it to the existing file.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"     * @param task The task to be saved.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If an error occurs while writing to the file.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"    public void saveTask(Task task) throws IOException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        ensureFileDirectoryExists();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(fileName, true))) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"            writer.write(task.serialize() + System.lineSeparator());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"     * Overwrites the storage file with the given list of tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"     * This method removes all previous data in the file and writes the new tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If an error occurs while writing to the file.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"    public void overwriteTasks(List\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"        ensureFileDirectoryExists();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(fileName))) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"                writer.write(task.serialize() + System.lineSeparator());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":106}},{"path":"src/main/java/components/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.util.List;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import tasks.EventTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * Manages a list of tasks, providing methods to add, remove, mark, unmark,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * retrieve, and sort tasks based on deadlines or event start times.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"public class TaskList {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs an empty {@code TaskList}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    public TaskList() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a {@code TaskList} with an existing list of tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * @param tasks The list of tasks to initialize the task list with.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     * @return The {@code ArrayList} containing all tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"        return tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        tasks.add(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"     * @return The total number of tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"    public int size() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"        return tasks.size();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"     * Removes a task from the task list at the specified index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"     * @return The removed task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"    public Task removeTask(int index) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"        if (!isValidIndex(index)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"            throw new IndexOutOfBoundsException(\"Error: Invalid task index.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"        return tasks.remove(index);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"     * Retrieves a task from the task list at the specified index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"     * @return The task at the given index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"        if (!isValidIndex(index)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"            throw new IndexOutOfBoundsException(\"Error: Invalid task index.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        return tasks.get(index);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"     * Marks a task as done at the specified index.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"     * @param index The index of the task to mark as done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"    public void markTask(int index) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"        if (!isValidIndex(index)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"            throw new IndexOutOfBoundsException(\"Error: Invalid task index.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"        tasks.get(index).markAsDone();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"     * Unmarks a task at the specified index, setting it as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"     * @param index The index of the task to unmark.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"    public void unmarkTask(int index) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"        if (!isValidIndex(index)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"            throw new IndexOutOfBoundsException(\"Error: Invalid task index.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"        tasks.get(index).unmark();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasohjj"},"content":"     * Checks if the provided index is valid within the task list.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasohjj"},"content":"     * @param index The index to validate.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasohjj"},"content":"     * @return {@code true} if the index is valid, {@code false} otherwise.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasohjj"},"content":"    public boolean isValidIndex(int index) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasohjj"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasohjj"},"content":"     * Sorts tasks based on their deadlines or event start times.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code DeadlineTask} objects are sorted by their deadline.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code EventTask} objects are sorted by their start time.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003eOther tasks remain in their original order.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasohjj"},"content":"     * Tasks without dates (e.g., {@code ToDoTask}) are placed at the end.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasohjj"},"content":"    public void sortTasks() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasohjj"},"content":"        tasks.sort((task1, task2) -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasohjj"},"content":"            LocalDateTime date1 \u003d getTaskDate(task1);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasohjj"},"content":"            LocalDateTime date2 \u003d getTaskDate(task2);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasohjj"},"content":"            if (date1 \u003d\u003d null \u0026\u0026 date2 \u003d\u003d null) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasohjj"},"content":"                return 0;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasohjj"},"content":"            if (date1 \u003d\u003d null) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasohjj"},"content":"                return 1;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasohjj"},"content":"            if (date2 \u003d\u003d null) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasohjj"},"content":"                return -1;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasohjj"},"content":"            return date1.compareTo(date2);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasohjj"},"content":"    private LocalDateTime getTaskDate(Task task) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasohjj"},"content":"        if (task instanceof DeadlineTask) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasohjj"},"content":"            return ((DeadlineTask) task).getDeadline();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasohjj"},"content":"        } else if (task instanceof EventTask) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasohjj"},"content":"            return ((EventTask) task).getStartDateTime();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasohjj"},"content":"        return null;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":157}},{"path":"src/main/java/components/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.util.List;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":" * Handles user interface interactions by displaying messages to the user.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * This class provides methods to print system messages, task lists, and error messages.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"public class Ui {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"     * Displays a greeting message when the program starts.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    public void showGreeting() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"        printLineWithMessage(\" Hello! I\u0027m NiniNana\\n What can I do for you?\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * Displays a goodbye message when the program exits.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    public void showGoodbye() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        printLineWithMessage(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     * Displays an error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * @param errorMessage The error message to be displayed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        printLineWithMessage(errorMessage);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     * Displays the list of tasks currently stored.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"     * @param tasks The list of tasks to be displayed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"    public void showTaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        printLine();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"            System.out.println(\"The list is empty.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"        } else {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"                System.out.printf(\"%d. %s%n\", i + 1, tasks.get(i));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        printLine();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"     * Displays a message confirming that a task has been added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     * @param task The task that was added.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     * @param size The total number of tasks after the addition.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"    public void showTaskAdded(Task task, int size) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        printLineWithMessage(String.format(","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"                \"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"                task, size));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"     * Displays a message confirming that a task has been removed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"     * @param task The task that was removed.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"     * @param size The total number of tasks after the removal.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"    public void showTaskRemoved(Task task, int size) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"        printLineWithMessage(String.format(","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"                \"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"                task, size));","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"     * Prints a horizontal line to separate sections in the output.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"    public void printLine() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"     * Prints a horizontal line along with a specified message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The message to be displayed between the lines.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"    public void printLineWithMessage(String message) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"        printLine();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"        System.out.println(message);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"        printLine();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":98}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents an exception that is thrown when an invalid command is encountered.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This exception extends {@code NiniException} and provides a specific error message","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for command-related errors.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class InvalidCommandException extends NiniException {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code InvalidCommandException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The message is prefixed with \"INVALID COMMAND!\" to indicate the nature of the error.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the invalid command issue.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(\"INVALID COMMAND! \" + message);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":19}},{"path":"src/main/java/exceptions/InvalidDataException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents an exception that is thrown when invalid data is encountered.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This exception extends {@code NiniException} and provides a specific error message","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for data-related issues.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class InvalidDataException extends NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code InvalidDataException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The message is prefixed with \"INVALID DATA!\" to indicate the nature of the error.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the invalid data issue.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public InvalidDataException(String message) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(\"INVALID DATA! \" + message);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":19}},{"path":"src/main/java/exceptions/InvalidFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents an exception that is thrown when an input format is invalid.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This exception extends {@code NiniException} and provides a specific error message","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for format-related errors.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class InvalidFormatException extends NiniException {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code InvalidFormatException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The message is prefixed with \"INVALID FORMAT!\" to indicate the nature of the error.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the invalid format issue.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public InvalidFormatException(String message) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(\"INVALID FORMAT! \" + message);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":19}},{"path":"src/main/java/exceptions/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents an exception that is thrown when an invalid task number is encountered.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This exception extends {@code NiniException} and provides a specific error message","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for invalid task numbers.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class InvalidTaskNumberException extends NiniException {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code InvalidTaskNumberException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The message is prefixed with \"INVALID TASK NUMBER!\" to indicate the nature of the error.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the invalid task number.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public InvalidTaskNumberException(String message) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(\"INVALID TASK NUMBER! \" + message);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":19}},{"path":"src/main/java/exceptions/MissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents an exception that is thrown when a required argument is missing.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This exception extends {@code NiniException} and provides a specific error message","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for missing arguments.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class MissingArgumentException extends NiniException {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code MissingArgumentException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The message is prefixed with \"MISSING ARGUMENT!\" to indicate the nature of the error.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the missing argument.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public MissingArgumentException(String message) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(\"MISSING ARGUMENT! \" + message);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":19}},{"path":"src/main/java/exceptions/NiniException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents a custom exception used in the application.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This serves as the base exception class for handling application-specific errors.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"public class NiniException extends Exception {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code NiniException} with the specified error message.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * @param message The error message describing the exception.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"    public NiniException(String message) {","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"        super(message);","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":17}},{"path":"src/main/java/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":" * Represents a deadline task with a specific due date and time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * This class extends {@code Task} and includes functionality to store,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * validate, and format the deadline.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code DeadlineTask} with the given description and deadline.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"     * @param deadline    The deadline of the task in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the provided date-time format is invalid.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"    public DeadlineTask(String description, String deadline) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"        super(description);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"        this.deadline \u003d parseDeadline(deadline);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code DeadlineTask} with the given description, deadline, and completion status.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     * @param deadline    The deadline of the task in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"     *                    {@code true} if the task is completed, {@code false} otherwise.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the provided date-time format is invalid.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"    public DeadlineTask(String description, String deadline, boolean isDone) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        this.deadline \u003d parseDeadline(deadline);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"    private LocalDateTime parseDeadline(String deadline) throws InvalidFormatException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"            return LocalDateTime.parse(deadline.trim(), INPUT_FORMATTER);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid deadline format. Please use the format: \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"                    + \"d/M/yyyy HHmm (e.g., 25/12/2025 1800)\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the deadline date and time of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"     * @return The {@code LocalDateTime} representing the task\u0027s deadline.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        return deadline;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"     * Serializes the deadline task into a formatted string representation.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"     * The format used is: {@code D|\u003cstatus\u003e|\u003cdescription\u003e|\u003cdeadline\u003e}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code D} represents a deadline task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cstatus\u003e} is {@code 1} if the task is done, otherwise {@code 0}.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cdescription\u003e} is the textual description of the task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cdeadline\u003e} is the formatted deadline date and time.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"     * @return A serialized string representation of the deadline task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"    public String serialize() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"        int isDoneValue \u003d isDone ? 1 : 0;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"D|%d|%s|%s\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"                isDoneValue,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"                description,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"                deadline.format(INPUT_FORMATTER)","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        );","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"     * The format is {@code [D]\u003cdescription\u003e (deadline: \u003cdeadline time\u003e)}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code [D]} signifies a deadline task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cdeadline time\u003e} is formatted using {@code MMM dd yyyy, h:mma}.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"     * @return A formatted string representing the deadline task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"    public String toString() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"[D]%s (deadline: %s)\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"                super.toString(),","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"                deadline.format(OUTPUT_FORMATTER)","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"        );","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-17","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":106}},{"path":"src/main/java/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":" * Represents an event task with a specific start and end time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":" * This class extends {@code Task} and includes functionality to store,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":" * validate, and format event times.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"public class EventTask extends Task {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mma\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    private final LocalDateTime from;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    private final LocalDateTime to;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code EventTask} with the given description and event times.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the event.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"     * @param from        The start time of the event in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"     * @param to          The end time of the event in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the provided date-time format is invalid or the start time is after the end time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    public EventTask(String description, String from, String to) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"        super(description);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"        this.from \u003d parseDateTime(from);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"        this.to \u003d parseDateTime(to);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        validateDateOrder();","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code EventTask} with the given description, event times, and completion status.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the event.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"     * @param from        The start time of the event in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"     * @param to          The end time of the event in the format {@code d/M/yyyy HHmm}.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"     * @param isDone      The completion status of the event.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"     *                    {@code true} if the event is completed, {@code false} otherwise.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the provided date-time format is invalid or the start time is after the end time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"    public EventTask(String description, String from, String to, boolean isDone) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"            this.from \u003d LocalDateTime.parse(from.trim(), INPUT_FORMATTER);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            this.to \u003d LocalDateTime.parse(to.trim(), INPUT_FORMATTER);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"            if (this.from.isAfter(this.to)) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"                throw new InvalidFormatException(\"The start time must be earlier than the end time.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid deadline format. Please use the format: \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"                    + \"d/M/yyyy HHmm (e.g., 25/12/2025 1800)\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"    private LocalDateTime parseDateTime(String dateTime) throws InvalidFormatException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"            return LocalDateTime.parse(dateTime.trim(), INPUT_FORMATTER);","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"Invalid deadline format. Please use the format: \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"                    + \"d/M/yyyy HHmm (e.g., 25/12/2025 1800)\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"    private void validateDateOrder() throws InvalidFormatException {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"        if (this.from.isAfter(this.to)) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidFormatException(\"The start time must be earlier than the end time.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the start date and time of the event.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"     * @return The {@code LocalDateTime} representing the event\u0027s start time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"        return from;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the end date and time of the event.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"     * @return The {@code LocalDateTime} representing the event\u0027s end time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"        return to;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"     * Serializes the event task into a formatted string representation.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"     * The format used is: {@code E|\u003cstatus\u003e|\u003cdescription\u003e|\u003cstart time\u003e|\u003cend time\u003e}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code E} represents an event task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cstatus\u003e} is {@code 1} if the task is done, otherwise {@code 0}.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cdescription\u003e} is the textual description of the task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cstart time\u003e} is the formatted start date and time of the event.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cend time\u003e} is the formatted end date and time of the event.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"     * @return A serialized string representation of the event task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"    public String serialize() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasohjj"},"content":"        int isDoneValue \u003d isDone ? 1 : 0;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"E|%d|%s|%s|%s\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasohjj"},"content":"                isDoneValue,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasohjj"},"content":"                description,","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasohjj"},"content":"                from.format(INPUT_FORMATTER),","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasohjj"},"content":"                to.format(INPUT_FORMATTER)","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasohjj"},"content":"        );","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasohjj"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasohjj"},"content":"     * The format is {@code [E]\u003cdescription\u003e (from: \u003cstart time\u003e to: \u003cend time\u003e)}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code [E]} signifies an event task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cstart time\u003e} and {@code \u003cend time\u003e} are formatted using {@code MMM dd yyyy, h:mma}.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasohjj"},"content":"     * @return A formatted string representing the event task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasohjj"},"content":"    public String toString() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\",","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasohjj"},"content":"                super.toString(),","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasohjj"},"content":"                from.format(OUTPUT_FORMATTER),","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasohjj"},"content":"                to.format(OUTPUT_FORMATTER)","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasohjj"},"content":"        );","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-17","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":138}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidDataException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" * Represents a generic task with a description and completion status.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":" * This class serves as a base class for different types of tasks such as","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":" * ToDoTask, DeadlineTask, and EventTask.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"public class Task {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"    private static final int TYPE_INDEX \u003d 0;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"    private static final int DONE_INDEX \u003d 1;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"    private static final int DESCRIPTION_INDEX \u003d 2;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    protected String description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    protected boolean isDone;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code Task} with the given description.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    public Task(String description) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        isDone \u003d false;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code Task} with the given description and completion status.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     *                    {@code true} if the task is completed, {@code false} otherwise.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        this(description);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"     * @return The task description.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"    public String getDescription() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"        return description;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"     * Returns the completion status of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"     * @return {@code true} if the task is completed, {@code false} otherwise.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    public boolean isDone() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"        return isDone;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"     * Marks the task as done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"     * @throws IllegalStateException If the task is already marked as done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"    public void markAsDone() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"        if (isDone) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"            throw new IllegalStateException(\"Task is already marked as done\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        } else {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"            isDone \u003d true;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"     * Unmarks the task, setting it as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"     * @throws IllegalStateException If the task is already unmarked.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"    public void unmark() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"        if (!isDone) {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"            throw new IllegalStateException(\"Task is already unmarked.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"        } else {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"            isDone \u003d false;","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"     * Serializes the task into a string format.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"     * This method is intended to be overridden by subclasses.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"     * @return A serialized string representation of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"    public String serialize() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"        return \"\";","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"     * Deserializes a given string into a {@code Task} object.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"     * The string format should follow the pattern used in the {@code serialize} method.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"     * @param data The serialized string representation of a task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"     * @return A {@code Task} object reconstructed from the serialized data.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"     * @throws NiniException If the data is invalid, incorrectly formatted, or incomplete.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"    public static Task deserialize(String data) throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"        if (data \u003d\u003d null || data.isEmpty()) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidDataException(\"Cannot deserialize null or empty data.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"        String[] parts \u003d data.split(\"\\\\|\");","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasohjj"},"content":"        if (parts.length \u003c 3) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidDataException(\"Incomplete data for task deserialization.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasohjj"},"content":"        if (!parts[DONE_INDEX].equals(\"1\") \u0026\u0026 !parts[DONE_INDEX].equals(\"0\")) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidDataException(\"Data has invalid values for is_done status\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasohjj"},"content":"        String type \u003d parts[TYPE_INDEX].trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasohjj"},"content":"        boolean isDone \u003d parts[DONE_INDEX].trim().equals(\"1\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasohjj"},"content":"        String description \u003d parts[DESCRIPTION_INDEX].trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasohjj"},"content":"        switch (type) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasohjj"},"content":"        case \"T\":","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasohjj"},"content":"            return new ToDoTask(description, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasohjj"},"content":"        case \"D\":","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasohjj"},"content":"            if (parts.length \u003c 4) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasohjj"},"content":"                throw new InvalidDataException(\"Missing deadline information.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasohjj"},"content":"            String deadlineStr \u003d parts[3].trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasohjj"},"content":"            return new DeadlineTask(description, deadlineStr, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasohjj"},"content":"        case \"E\":","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasohjj"},"content":"            if (parts.length \u003c 5) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasohjj"},"content":"                throw new InvalidDataException(\"Missing event start or end time.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasohjj"},"content":"            }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasohjj"},"content":"            String fromStr \u003d parts[3].trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasohjj"},"content":"            String toStr \u003d parts[4].trim();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasohjj"},"content":"            return new EventTask(description, fromStr, toStr, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasohjj"},"content":"        default:","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasohjj"},"content":"            throw new InvalidDataException(\"Unknown task type.\");","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasohjj"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasohjj"},"content":"     * The format is {@code [\u003cstatus\u003e] \u003cdescription\u003e}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code X} indicates the task is completed.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \" \"} (space) indicates the task is not completed.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasohjj"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasohjj"},"content":"    public String toString() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"[%s] %s\", isDone ? \"X\" : \" \", description);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-17","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":158}},{"path":"src/main/java/tasks/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"/**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":" * Represents a to-do task that does not have any specific date or time.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":" * This class extends the {@code Task} class and provides implementation","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":" * for serialization and string representation specific to to-do tasks.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":" */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"public class ToDoTask extends Task {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code ToDoTask} with the given description.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    public ToDoTask(String description) {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"        super(description);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"     * Constructs a new {@code ToDoTask} with the given description and status.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"     *                    {@code true} if the task is completed, {@code false} otherwise.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    public ToDoTask(String description, boolean isDone) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"        super(description, isDone);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"     * Serializes the to-do task into a formatted string representation.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"     * The format used is: {@code T|\u003cstatus\u003e|\u003cdescription\u003e}, where:","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code T} represents a to-do task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cstatus\u003e} is {@code 1} if the task is done, otherwise {@code 0}.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"     *     \u003cli\u003e{@code \u003cdescription\u003e} is the textual description of the task.\u003c/li\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"     * @return A serialized string representation of the to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"    public String serialize() {","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        return String.format(\"T|%d|%s\", isDone ? 1 : 0, description);","lastModifiedDate":"2025-01-27","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"    /**","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"     * Returns a string representation of the to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"     * The format is {@code [T]\u003cdescription\u003e}, where {@code [T]} signifies a to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"     *","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"     * @return A formatted string representing the to-do task.","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"     */","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    @Override","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    public String toString() {","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-17","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":57}},{"path":"src/test/java/NiniNanaTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"public class NiniNanaTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"    public void dummyTest() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":11}},{"path":"src/test/java/components/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import commands.AddCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import commands.Command;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import commands.DeleteCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"import commands.ExitCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import commands.ListCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"import commands.MarkCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"import commands.SortCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"import commands.UnmarkCommand;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"import tasks.EventTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"import tasks.ToDoTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"class ParserTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"    void testParseListCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"list\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof ListCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    void testParseExitCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"bye\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof ExitCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    void testParseMarkCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"mark 1\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof MarkCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(0, ((MarkCommand) command).getTaskIndex());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"    void testParseUnmarkCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"unmark 2\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof UnmarkCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(1, ((UnmarkCommand) command).getUnmarkIndex());","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddToDoCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"todo Buy groceries\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof AddCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(((AddCommand) command).getAddedTask() instanceof ToDoTask);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"Buy groceries\", ((AddCommand) command).getAddedTask().getDescription());","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddEventCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"event Meeting /from 1/1/2025 1000 /to 1/1/2025 1200\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof AddCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(((AddCommand) command).getAddedTask() instanceof EventTask);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"        EventTask task \u003d (EventTask) ((AddCommand) command).getAddedTask();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"Meeting\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"2025-01-01T10:00\", task.getStartDateTime().toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"2025-01-01T12:00\", task.getEndDateTime().toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddDeadlineCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"deadline Submit report /by 1/1/2025 1800\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof AddCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(((AddCommand) command).getAddedTask() instanceof DeadlineTask);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"        DeadlineTask task \u003d (DeadlineTask) ((AddCommand) command).getAddedTask();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"Submit report\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"2025-01-01T18:00\", task.getDeadline().toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"    void testParseSortCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"sort\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof SortCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"    void testParseDeleteCommand() throws NiniException {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"        Command command \u003d parser.parseCommand(\"delete 3\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(command instanceof DeleteCommand);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(2, ((DeleteCommand) command).getDeleteIndex());","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"    void testParseInvalidCommand() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e parser.parseCommand(\"invalidcommand\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasohjj"},"content":"    void testParseMarkCommandWithInvalidIndex() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e parser.parseCommand(\"mark abc\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasohjj"},"content":"    void testParseUnmarkCommandWithInvalidIndex() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e parser.parseCommand(\"unmark abc\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddToDoCommandWithEmptyDescription() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e parser.parseCommand(\"todo \"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddEventCommandWithInvalidFormat() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e parser.parseCommand(\"event Meeting /from 10:00\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasohjj"},"content":"    void testParseAddDeadlineCommandWithInvalidFormat() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasohjj"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e parser.parseCommand(\"deadline Submit report\"));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":139}},{"path":"src/test/java/components/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package components;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"import tasks.EventTask;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import tasks.Task;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"class TaskListTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    void testAddTask() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(task, taskList.getTask(0));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    void testRemoveTask() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"        Task removedTask \u003d taskList.removeTask(0);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(task, removedTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(taskList.getTasks().isEmpty());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"    void testMarkTask() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"        taskList.markTask(0);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    void testUnmarkTask() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"        task.markAsDone();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"        taskList.unmarkTask(0);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    void testIsValidIndex() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(taskList.isValidIndex(0));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"        assertFalse(taskList.isValidIndex(1));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"    void testSortTasks() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask deadlineTask \u003d new DeadlineTask(\"Deadline Task\", \"25/12/2025 1800\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"            EventTask eventTask \u003d new EventTask(\"Event Task\", \"24/12/2025 0900\", \"24/12/2025 1700\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"            Task simpleTask \u003d new Task(\"Simple Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"            taskList.addTask(simpleTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"            taskList.addTask(deadlineTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"            taskList.addTask(eventTask);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"            taskList.sortTasks();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(eventTask, taskList.getTask(0));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(deadlineTask, taskList.getTask(1));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(simpleTask, taskList.getTask(2));","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasohjj"},"content":"    void testSize() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasohjj"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(0, taskList.size());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasohjj"},"content":"        Task task \u003d new Task(\"Test Task\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasohjj"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(1, taskList.size());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":110}},{"path":"src/test/java/exceptions/InvalidCommandExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package exceptions;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"class InvalidCommandExceptionTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"    void testExceptionMessage() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"        InvalidCommandException exception \u003d new InvalidCommandException(\"Unknown command\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"INVALID COMMAND! Unknown command\", exception.getMessage());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    void testExceptionWithDifferentMessage() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"        InvalidCommandException exception \u003d new InvalidCommandException(\"Command not recognised\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"INVALID COMMAND! Command not recognised\", exception.getMessage());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":22}},{"path":"src/test/java/tasks/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    public void testConstructorWithValidInput() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Submit report\", \"25/12/2025 1800\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"Submit report\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 18, 0), task.getDeadline());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"            assertFalse(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithInvalidDeadlineFormat() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"            new DeadlineTask(\"Submit report\", \"25-12-2025 1800\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithValidInputAndIsDone() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Submit report\", \"25/12/2025 1800\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"Submit report\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 18, 0), task.getDeadline());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"            assertTrue(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"    void testSerialize() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Submit report\", \"25/12/2025 1800\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"D|1|Submit report|25/12/2025 1800\", task.serialize());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"    void testToString() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"Submit report\", \"25/12/2025 1800\", false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"[D][ ] Submit report (deadline: Dec 25 2025, 6:00pm)\", task.toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"    void testInvalidDeadlineThrowsException() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"            new DeadlineTask(\"Invalid date\", \"invalid-date\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"    void testEdgeCaseDeadline() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"            DeadlineTask task \u003d new DeadlineTask(\"New Year\u0027s Eve Party\", \"31/12/2025 2359\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 31, 23, 59), task.getDeadline());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid edge case.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":85}},{"path":"src/test/java/tasks/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.InvalidFormatException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"import exceptions.NiniException;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"class EventTaskTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithValidInput() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"            EventTask task \u003d new EventTask(\"Conference\", \"25/12/2025 0900\", \"25/12/2025 1700\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"Conference\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 9, 0), task.getStartDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 17, 0), task.getEndDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"            assertFalse(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithInvalidFormat() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"            new EventTask(\"Conference\", \"25-12-2025 0900\", \"25/12/2025 1700\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"            new EventTask(\"Conference\", \"25/12/2025 0900\", \"invalid-date\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithValidInputAndIsDone() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"            EventTask task \u003d new EventTask(\"Conference\", \"25/12/2025 0900\", \"25/12/2025 1700\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"Conference\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 9, 0), task.getStartDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 25, 17, 0), task.getEndDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasohjj"},"content":"            assertTrue(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasohjj"},"content":"    void testSerialize() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasohjj"},"content":"            EventTask task \u003d new EventTask(\"Conference\", \"25/12/2025 0900\", \"25/12/2025 1700\", false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"E|0|Conference|25/12/2025 0900|25/12/2025 1700\", task.serialize());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasohjj"},"content":"    void testToString() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasohjj"},"content":"            EventTask task \u003d new EventTask(\"Conference\", \"25/12/2025 0900\", \"25/12/2025 1700\", false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(\"[E][ ] Conference (from: Dec 25 2025, 9:00am to: Dec 25 2025, 5:00pm)\", task.toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid input.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasohjj"},"content":"    void testInvalidDateOrder() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasohjj"},"content":"        assertThrows(InvalidFormatException.class, () -\u003e {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasohjj"},"content":"            new EventTask(\"Conference\", \"25/12/2025 1700\", \"25/12/2025 0900\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasohjj"},"content":"        });","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasohjj"},"content":"    void testEdgeCaseDates() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasohjj"},"content":"        try {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasohjj"},"content":"            EventTask task \u003d new EventTask(\"Overnight Event\", \"31/12/2025 2300\", \"01/01/2026 0200\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2025, 12, 31, 23, 0), task.getStartDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasohjj"},"content":"            assertEquals(LocalDateTime.of(2026, 1, 1, 2, 0), task.getEndDateTime());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasohjj"},"content":"        } catch (NiniException e) {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasohjj"},"content":"            fail(\"Exception should not have been thrown for valid edge case.\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasohjj"},"content":"        }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":93}},{"path":"src/test/java/tasks/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"package tasks;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"class ToDoTaskTest {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithValidDescription() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"        ToDoTask task \u003d new ToDoTask(\"Buy groceries\");","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"Buy groceries\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"        assertFalse(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"    void testConstructorWithValidDescriptionAndIsDone() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"        ToDoTask task \u003d new ToDoTask(\"Buy groceries\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"Buy groceries\", task.getDescription());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"        assertTrue(task.isDone());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"    void testSerialize() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"        ToDoTask task \u003d new ToDoTask(\"Buy groceries\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"T|1|Buy groceries\", task.serialize());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"        task \u003d new ToDoTask(\"Buy groceries\", false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"T|0|Buy groceries\", task.serialize());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    @Test","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"    void testToString() {","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"        ToDoTask task \u003d new ToDoTask(\"Buy groceries\", false);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"[T][ ] Buy groceries\", task.toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"        task \u003d new ToDoTask(\"Buy groceries\", true);","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"        assertEquals(\"[T][X] Buy groceries\", task.toString());","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"    }","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"}","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":42}},{"path":"text-ui-test/data/chat.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"T|1|Clean the room","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"D|0|Submit assignment|2/12/2025 1800","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"D|0|Prepare slides|10/2/2025 1500","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"E|0|Team meeting|29/1/2025 1000|29/1/2025 1200","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"E|0|Workshop|30/1/2025 0900|30/1/2025 1700","lastModifiedDate":"2025-01-28","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasohjj"},"content":"todo Read a book","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasohjj"},"content":"todo Clean the room","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"todo","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"todo","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"deadline Submit assignment /by 2/12/2025 1800","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"deadline Prepare slides /by 10/2/2025 1500","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"deadline Submit project","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasohjj"},"content":"deadline Review /by Sunday","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"deadline Complete report /by 2025-01-31","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"event Team meeting /from 29/1/2025 1000 /to 29/1/2025 1200","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"event Workshop /from 30/1/2025 0900 /to 30/1/2025 1700","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasohjj"},"content":"event Seminar /from /to 29/1/2025 1500","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasohjj"},"content":"event Conference /from 30/1/2025","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"event Party","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasohjj"},"content":"mark 1","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasohjj"},"content":"mark 2","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasohjj"},"content":"mark 10","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"mark -1","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasohjj"},"content":"unmark 1","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"unmark 3","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"unmark 10","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"delete 1","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"delete 10 # Invalid index (out of range)","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"list","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"sort","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"randomCommand","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"todo","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"deadline /by 2/12/2025 1800","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"event /from 10:00 AM /to 12:00 PM","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasohjj"},"content":"bye","lastModifiedDate":"2025-01-19","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":43}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"if exist .\\data\\chat.TXT del .\\data\\chat.TXT","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"java -classpath ..\\bin NiniNana \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":3,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasohjj"},"content":"SRC_DIR\u003d\"../src/main/java\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasohjj"},"content":"BIN_DIR\u003d\"../bin\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasohjj"},"content":"TEST_DIR\u003d\"text-ui-test\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasohjj"},"content":"INPUT_FILE\u003d\"$TEST_DIR/input.txt\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasohjj"},"content":"EXPECTED_FILE\u003d\"$TEST_DIR/EXPECTED.TXT\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasohjj"},"content":"ACTUAL_FILE\u003d\"$TEST_DIR/ACTUAL.TXT\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasohjj"},"content":"OUTPUT_DATA\u003d\"$TEST_DIR/data/chat.txt\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasohjj"},"content":"EXPECTED_UNIX_FILE\u003d\"$TEST_DIR/EXPECTED-UNIX.TXT\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasohjj"},"content":"# Create bin directory if it doesn\u0027t exist","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasohjj"},"content":"mkdir -p \"$BIN_DIR\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasohjj"},"content":"# Clean previous build files","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasohjj"},"content":"rm -rf \"$BIN_DIR\"/*","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasohjj"},"content":"echo \"Compiling source files...\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasohjj"},"content":"if ! javac -cp \"$SRC_DIR\" -Xlint:none -d \"$BIN_DIR\" \"$SRC_DIR\"/*.java; then","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasohjj"},"content":"echo \"Compilation successful.\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasohjj"},"content":"# Delete previous test outputs","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasohjj"},"content":"rm -f \"$ACTUAL_FILE\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasohjj"},"content":"rm -f \"$OUTPUT_DATA\"","lastModifiedDate":"2025-01-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasohjj"},"content":"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasohjj"},"content":"# Run the program with input redirection and capture output","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasohjj"},"content":"echo \"Running program...\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasohjj"},"content":"if ! java -classpath \"$BIN_DIR\" NiniNana \u003c \"$INPUT_FILE\" \u003e \"$ACTUAL_FILE\"; then","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasohjj"},"content":"    echo \"********** PROGRAM FAILURE **********\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasohjj"},"content":"    exit 1","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasohjj"},"content":"fi","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasohjj"},"content":"echo \"Program executed successfully.\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasohjj"},"content":"# Convert to UNIX format","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasohjj"},"content":"echo \"Converting files to UNIX format...\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasohjj"},"content":"cp \"$EXPECTED_FILE\" \"$EXPECTED_UNIX_FILE\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasohjj"},"content":"dos2unix \"$ACTUAL_FILE\" \"$EXPECTED_UNIX_FILE\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasohjj"},"content":"# Compare actual output with expected output","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasohjj"},"content":"echo \"Comparing output...\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasohjj"},"content":"if diff \"$ACTUAL_FILE\" \"$EXPECTED_UNIX_FILE\" \u003e /dev/null; then","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasohjj"},"content":"    echo \"Differences found:\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasohjj"},"content":"    diff \"$ACTUAL_FILE\" \"$EXPECTED_UNIX_FILE\"","lastModifiedDate":"2025-01-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"nicholasohjj":37,"-":17}}]
