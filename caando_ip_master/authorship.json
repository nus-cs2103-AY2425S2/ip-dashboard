[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"caando":2,"-":40}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.command.Command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.ReadStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.parser.Parser;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.storage.FileStorage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.task.TaskList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.ui.Cli;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * The main entry point for the Duke application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * This class initializes and runs the Duke task manager application. It sets up the storage, task list,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" * and user interface, then enters an interactive loop where user commands are parsed, executed, and handled.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":" * The application continues running until the user inputs the \"bye\" command, at which point the program terminates.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * The main method that runs the Duke application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * It sets up the necessary components such as the storage, task list, and user interface. It attempts","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * to load existing tasks from storage, and then enters a loop where user input is continually parsed and","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * processed. Commands are executed accordingly, and errors are displayed if they occur. The program terminates","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * when the user inputs the \"bye\" command.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        Storage storage \u003d new FileStorage(\"./data/duke.txt\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        Ui ui \u003d new Cli(System.in, System.out);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        ui.start();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"            storage.load(tasks, ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        } catch (ReadStorageException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        while (true) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"            String input \u003d ui.getInput();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"                Command command \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"                command.execute(tasks, storage, ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"                if (command instanceof ByeCommand) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                    break;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            } catch (ParseCommandException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29","isFullCredit":false}],"authorContributionMap":{"caando":57,"-":3}},{"path":"src/main/java/duke/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * Utility class for handling date parsing and formatting.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * Provides methods to parse a string into a {@link LocalDate} and format a {@link LocalDate} into a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"public class Utils {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * Parses a string into a {@link LocalDate}. The method tries to parse the date string in multiple formats.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     * The first attempt is to parse it using the default {@link LocalDate} format, and if that fails, it tries the","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     * \"MMM d yyyy\" format (e.g., \"Jan 1 2022\").","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     * @param dateString The string representing the date to be parsed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     * @return The parsed {@link LocalDate}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"     * @throws DateTimeParseException If the date string cannot be parsed using both formats.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    public static LocalDate parseDate(String dateString) throws DateTimeParseException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        LocalDate date;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"            date \u003d LocalDate.parse(dateString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        } catch (DateTimeParseException e1) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"                date \u003d LocalDate.parse(dateString, formatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"            } catch (DateTimeParseException e2) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"                throw e1;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        return date;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * Converts a {@link LocalDate} to a string representation in the format \"MMM d yyyy\" (e.g., \"Jan 1 2022\").","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     * @param date The {@link LocalDate} to be formatted.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * @return The formatted date as a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"    public static String dateToString(LocalDate date) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        return date.format(formatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":47}},{"path":"src/main/java/duke/command/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.Utils;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.Deadline;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * Represents a command to add a deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * This command is responsible for parsing the input,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" * creating a {@code Deadline} task, and adding it to the task container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"public class AddDeadlineCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    private final String taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    private final LocalDate date;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * Creates an {@code AddDeadlineCommand} with the specified task description and date.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @param taskDescription the description of the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @param date the deadline date for the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    public AddDeadlineCommand(String taskDescription, LocalDate date) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        this.date \u003d date;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * Parses the input string to create an {@code AddDeadlineCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * The input must follow the format: {@code \"deadline \u003cdescription\u003e /by \u003cdate\u003e\"}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * @return the parsed {@code AddDeadlineCommand} instance","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input is invalid or cannot be parsed","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        String regex \u003d \"deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"            String description \u003d matcher.group(1).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"            String dateString \u003d matcher.group(2).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Deadline command requires a description.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"            if (dateString.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Deadline command requires [/by] argument.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"                LocalDate date \u003d Utils.parseDate(dateString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"                return new AddDeadlineCommand(description, date);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"                        \"Unable to parse [%s] as date for deadline command.\", dateString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(String.format(\"Unable to parse [%s] to deadline command.\", input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"     * @return the task description","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        return taskDescription;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"     * Returns the deadline date of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"     * @return the deadline date","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"        return date;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"     * Executes the {@code AddDeadlineCommand} by creating a new {@code Deadline} task,","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"     * adding it to the task list, and displaying the result to the user.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"     * @param taskList the task container to which the task is added","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"     * @param storage the storage used for persisting tasks","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"     * @param ui the user interface for displaying outputs","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer taskList, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"        Deadline deadline \u003d new Deadline(taskDescription, date);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        taskList.add(deadline);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"        ui.showOutput(\"Got it. I\u0027ve added this task:\", deadline.toString(),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"                \"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":106}},{"path":"src/main/java/duke/command/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.Utils;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.Event;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * Represents a command to add an event task. This command parses user input,","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * creates an {@code Event} task, and adds it to the task container.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"public class AddEventCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    private final String taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    private final LocalDate from;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    private final LocalDate to;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * Creates an {@code AddEventCommand} with the specified task description","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * and time period.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @param taskDescription the description of the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @param from the starting date of the event","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * @param to the ending date of the event","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    public AddEventCommand(String taskDescription, LocalDate from, LocalDate to) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     * Parses the input string to create an {@code AddEventCommand}. The input","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * must follow the format:","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * {@code \"event \u003cdescription\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e\"}.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"     * @return the parsed {@code AddEventCommand} instance","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input is invalid or cannot be parsed","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        String regex \u003d \"event\\\\s+(.+)\\\\s+/from\\\\s+(.+)\\\\s+/to\\\\s+(.+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            String description \u003d matcher.group(1).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"            String fromDateString \u003d matcher.group(2).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            String toDateString \u003d matcher.group(3).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Event command requires a description.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"            if (fromDateString.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Event command requires [/from] argument.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"            if (toDateString.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Event command requires [/to] argument.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"            LocalDate fromDate;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"                fromDate \u003d Utils.parseDate(fromDateString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(\"Unable to parse [%s] to date.\", fromDateString));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"            LocalDate toDate;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"                toDate \u003d Utils.parseDate(toDateString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(\"Unable to parse [%s] to date.\", toDateString));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"            return new AddEventCommand(description, fromDate, toDate);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(String.format(\"Unable to parse [%s] to event command.\", input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"     * @return the task description","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"        return taskDescription;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"     * Returns the starting date of the event.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"     * @return the starting date","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"    public LocalDate getFrom() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        return from;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"     * Returns the ending date of the event.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"     * @return the ending date","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"    public LocalDate getTo() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"        return to;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"     * Executes the {@code AddEventCommand} by creating a new {@code Event}","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"     * task, adding it to the task list, and displaying the result to the user.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"     * @param taskList the task container to which the task is added","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"     * @param storage the storage used for persisting tasks","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"     * @param ui the user interface for displaying outputs","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer taskList, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"caando"},"content":"        Event event \u003d new Event(taskDescription, from, to);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"caando"},"content":"        taskList.add(event);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"caando"},"content":"        ui.showOutput(\"Got it. I\u0027ve added this task:\", event.toString(),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"caando"},"content":"                \"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":132}},{"path":"src/main/java/duke/command/AddTodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.task.Todo;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":" * Represents a command to add a todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":" * This command parses user input, creates a {@code Todo} task, and adds it to the task container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"public class AddTodoCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    private final String taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     * Creates an {@code AddTodoCommand} with the specified task description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     * @param taskDescription the description of the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    public AddTodoCommand(String taskDescription) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * Parses the input string to create an {@code AddTodoCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * The input must follow the format: {@code \"todo \u003cdescription\u003e\"}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * @return the parsed {@code AddTodoCommand} instance","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input is invalid or cannot be parsed","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"        String regex \u003d \"todo\\\\s+(.+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"            String description \u003d matcher.group(1).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Todo command requires a description.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"            return new AddTodoCommand(description);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(String.format(\"Unable to parse [%s] to todo command.\", input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"     * @return the task description","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"    public String getTaskDescription() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        return taskDescription;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     * Executes the {@code AddTodoCommand} by creating a new {@code Todo} task,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"     * adding it to the task list, and displaying the result to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     * @param taskList the task container to which the task is added","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     * @param storage the storage used for persisting tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     * @param ui the user interface for displaying outputs","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer taskList, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        Todo todo \u003d new Todo(taskDescription);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        taskList.add(todo);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"        ui.showOutput(\"Got it. I\u0027ve added this task:\", todo.toString(),","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"                \"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":77}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * Represents a command to exit the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * This command is triggered by the user input \"bye\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * Parses the input string to create a {@code ByeCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     * The input is expected to be simply \"bye\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     * @return a new instance of {@code ByeCommand}","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        return new ByeCommand();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * Executes the {@code ByeCommand} by closing the user interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * No changes are made to the task list or storage.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @param tasks the task container (not used in this command)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler (not used in this command)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @param ui the user interface, which will be closed","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        ui.close();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":36}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * Represents a command that can be executed by the Duke application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * Commands are responsible for manipulating tasks, interacting with storage, and producing user outputs.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"public interface Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * Enum representing the various types of commands supported by the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public enum Type {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        /** Command to exit the application. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"        BYE,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"        /** Command to add a deadline task. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        DEADLINE,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        /** Command to delete a task. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        DELETE,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        /** Command to add an event task. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        EVENT,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        /** Command to find task description. */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"        FIND,","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        /** Command to list all tasks. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        LIST,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        /** Command to mark a task as completed. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        MARK,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"        /** Command to add a todo task. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        TODO,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        /** Command to unmark a completed task. */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        UNMARK","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"     * Executes the command using the given task list, storage, and user interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"     * @param taskList the container holding the current tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler for reading and writing tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"     * @param ui the user interface for displaying outputs to the user","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer taskList, Storage storage, Ui ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":53}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * The user must specify a valid positive integer index of the task to be deleted.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    /** The index of the task to be deleted (1-based). */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * Constructs a {@code DeleteCommand} with the specified task index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * @param taskIndex the 1-based index of the task to delete","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * Parses the user input to create a {@code DeleteCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * The input should match the pattern `delete XXX`, where `XXX` is a positive integer.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @return a new instance of {@code DeleteCommand}","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input does not match the expected pattern or the index is invalid","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        String regex \u003d \"delete\\\\s+(\\\\d+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"            String indexString \u003d matcher.group(1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"                int index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"                if (index \u003c 1) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"                    throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"                            \"Delete index [%d] should be a positive integer\", index));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"                return new DeleteCommand(index);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(\"Unable to parse [%s] as integer.\", indexString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(\"Delete command requires an integer index.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     * Returns the index of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     * @return the task idnex","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"    public int getTaskIndex() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        return taskIndex;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"     * Executes the delete command by removing the task from the task list,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"     * updating storage, and displaying the relevant output to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"     * @param tasks the task container from which the task will be removed","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler to persist the updated task list","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display output and error messages","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"            Task task \u003d tasks.remove(taskIndex - 1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"            ui.showOutput(\"Noted. I\u0027ve removed this task:\", task.toString(),","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"                    \"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"            task.markAsNotDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"            storage.save(tasks, ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"        } catch (WriteStorageException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":96}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":" * Represents a command that finds tasks with a description matching a given keyword.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * This command parses the user input, searches for the keyword in the descriptions of all tasks in","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * the {@code TaskContainer}, and displays the tasks that match the keyword.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    private final String keyword;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * Constructs a {@code FindCommand} with the specified keyword.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * Parses the input string to create a {@code FindCommand} instance.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * This method extracts the keyword from the input string and creates a {@code FindCommand}","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     * if the input is in the correct format. If the input does not match the expected format,","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * a {@code ParseCommandException} is thrown.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     * @param input The input string to parse.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     * @return A new {@code FindCommand} instance with the parsed keyword.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException If the input is invalid or cannot be parsed.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        String regex \u003d \"find\\\\s+(.+)\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"            String keyword \u003d matcher.group(1).trim();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"            if (keyword.isEmpty()) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(\"Find command requires a keyword.\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(String.format(\"Unable to parse [%s] to find command.\", input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"     * Executes the find command, searching for tasks that contain the keyword in their descriptions.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"     * This method iterates through all tasks in the provided {@code TaskContainer}, filters the tasks","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     * that contain the keyword in their description, and displays them using the provided {@code Ui}.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     * @param tasks The {@code TaskContainer} containing all the tasks to search.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     * @param storage The {@code Storage} instance used to access the task data (not used in this method).","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     * @param ui The {@code Ui} instance used to display the filtered tasks.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        tasks.list((index, task) -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"        output.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        for (int i \u003d 0; i \u003c filteredTasks.size(); i++) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"            Task task \u003d filteredTasks.get(i);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"            output.add(String.format(\"%d. %s\", i + 1, task.toString()));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        ui.showOutput(output);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":85}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" * Represents a command to list all the tasks in the task container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" * The command retrieves all tasks and formats them for display to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     * Parses the user input to create a new {@code ListCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * Since the list command does not require additional parameters, it directly returns a new {@code ListCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"     * @return a new instance of {@code ListCommand}","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        return new ListCommand();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * Executes the list command by retrieving all tasks in the task container and displaying them to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * The tasks are formatted as a numbered list, and the output is shown via the user interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @param tasks the task container containing all tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler (not used in this command)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display the list of tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        tasks.list((index, task) -\u003e {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"            output.add(String.format(\"%d. %s\", index + 1, task.toString()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        ui.showOutput(output);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":42}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * The command takes the task index, retrieves the task from the container, and marks it as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     * Constructs a {@code MarkCommand} with the specified task index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * @param taskIndex the index of the task to be marked as done","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    private MarkCommand(int taskIndex) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     * Parses the user input to create a new {@code MarkCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * The input should contain the `mark` keyword followed by a positive integer index,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * representing the task to mark as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @return a new instance of {@code MarkCommand} with the task index","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input is invalid or the task index is not a positive integer","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        // Captures `mark XXX` where XXX is a positive integer","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        String regex \u003d \"mark\\\\s+(\\\\d+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"            String indexString \u003d matcher.group(1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"                int index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"                if (index \u003c\u003d 0) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                    throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"                            \"Invalid index [%d]. Task index should be a positive integer.\", index));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"                return new MarkCommand(index);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"                        \"Unable to parse [%s] as integer. Task index should be a positive integer.\",","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"                        indexString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(\"Mark command requires an integer index.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     * Executes the mark command by retrieving the task from the task container","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     * using the specified index and marking it as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"     * The task is then saved, and appropriate messages are shown via the user interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"     * @param tasks the task container containing all tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler for saving tasks (not used in this command directly)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display the success or error message","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"            Task task \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"            task.markAsDone();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"            ui.showOutput(\"Nice! I\u0027ve marked this task as done:\", task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"            storage.save(tasks, ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        } catch (WriteStorageException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":91}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * Represents a command to mark a task as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * The command takes the task index, retrieves the task from the container,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * and marks it as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * Constructs an {@code UnmarkCommand} with the specified task index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * @param taskIndex the index of the task to be marked as not done","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    private UnmarkCommand(int taskIndex) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * Parses the user input to create a new {@code UnmarkCommand}.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * The input should contain the `unmark` keyword followed by a positive integer index,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * representing the task to mark as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @param input the user input string","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * @return a new instance of {@code UnmarkCommand} with the task index","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException if the input is invalid or the task index is not a positive integer","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    public static Command parse(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        // Captures `unmark XXX` where XXX is a positive integer","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        String regex \u003d \"unmark\\\\s+(\\\\d+)\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"            String indexString \u003d matcher.group(1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"            try {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"                int index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"                if (index \u003c\u003d 0) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                    throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"                            \"Invalid index [%d]. Task index should be a positive integer.\", index));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"                return new UnmarkCommand(index);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"                throw new ParseCommandException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"                        \"Unable to parse [%s] as integer. Task index should be a positive integer.\",","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"                        indexString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        } else {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(\"Unmark command requires an integer index.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     * Executes the unmark command by retrieving the task from the task container","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     * using the specified index and marking it as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"     * The task is then saved, and appropriate messages are shown via the user interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"     * @param tasks the task container containing all tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"     * @param storage the storage handler for saving tasks (not used in this command directly)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display the success or error message","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    public void execute(TaskContainer tasks, Storage storage, Ui ui) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"            Task task \u003d tasks.get(taskIndex - 1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"            task.markAsNotDone();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"            ui.showOutput(\"Nice! I\u0027ve marked this task as not done yet:\", task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        } catch (TaskNotFoundException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"            storage.save(tasks, ui);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        } catch (WriteStorageException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":91}},{"path":"src/main/java/duke/exception/InvalidStatusIconException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when an invalid status icon is encountered.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when a status icon provided in the context of a task is not recognized","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * or is invalid. It holds the invalid status icon as additional information that can be retrieved","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * for debugging or logging purposes.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"public class InvalidStatusIconException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"    private final String statusIcon;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code InvalidStatusIconException} with the specified detail message and invalid status icon.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     * @param statusIcon The invalid status icon that caused the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    public InvalidStatusIconException(String message, String statusIcon) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"        this.statusIcon \u003d statusIcon;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * Retrieves the invalid status icon that caused the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @return The invalid status icon.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"        return statusIcon;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":33}},{"path":"src/main/java/duke/exception/ParseCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when there is an error in parsing a command.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when the input command cannot be parsed properly, typically due to an","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * invalid or unknown command format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public class ParseCommandException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code ParseCommandException} with the specified detail message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public ParseCommandException(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":19}},{"path":"src/main/java/duke/exception/ParseTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when there is an error in parsing a task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when a task cannot be parsed properly, often due to invalid formatting","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * or data related to the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public class ParseTaskException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code ParseTaskException} with the specified detail message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public ParseTaskException(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":19}},{"path":"src/main/java/duke/exception/ReadStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when there is an error reading from storage.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when the application is unable to read the task data from the storage","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * system, such as from a file or database.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public class ReadStorageException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code ReadStorageException} with the specified detail message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public ReadStorageException(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":19}},{"path":"src/main/java/duke/exception/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when a task is not found.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when an operation is attempted on a task that does not exist, such as","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * when trying to delete or access a task by an invalid index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public class TaskNotFoundException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code TaskNotFoundException} with the specified detail message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public TaskNotFoundException(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":19}},{"path":"src/main/java/duke/exception/WriteStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":" * Exception thrown when there is an error writing to storage.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * This exception is thrown when the application is unable to write the task data to the storage","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * system, such as when saving to a file or database.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public class WriteStorageException extends Exception {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * Constructs a new {@code WriteStorageException} with the specified detail message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * @param message The detail message explaining the reason for the exception.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    public WriteStorageException(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        super(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":19}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.parser;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.command.Command;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * A utility class responsible for parsing user input into corresponding {@link Command} objects.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * The input string is parsed to identify the type of command, which is then mapped to a specific","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" * command implementation.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"public class Parser {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     * Parses the given input string into a corresponding {@link Command} object.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * The method splits the input string to identify the command type, and based on that, delegates the parsing to","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * the appropriate command class. If the command is unknown or invalid, a {@link ParseCommandException} is thrown.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * @param input The input string from the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @return A {@link Command} object corresponding to the parsed command.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @throws ParseCommandException If the input does not match a known command type.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    public static Command parseCommand(String input) throws ParseCommandException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        String[] parts \u003d input.split(\"\\\\s+\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        String command \u003d parts[0].toUpperCase();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        Command.Type commandType;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"            commandType \u003d Command.Type.valueOf(command);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"            throw new ParseCommandException(String.format(\"Unknown command [%s]\", parts[0]));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        return switch (commandType) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        case DEADLINE -\u003e AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        case DELETE -\u003e DeleteCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        case EVENT -\u003e AddEventCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        case FIND -\u003e FindCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        case LIST -\u003e ListCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        case MARK -\u003e MarkCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        case TODO -\u003e AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        case UNMARK -\u003e UnmarkCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"        case BYE -\u003e ByeCommand.parse(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        };","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":55}},{"path":"src/main/java/duke/storage/FileStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.io.File;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import java.io.FileReader;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.exception.ParseTaskException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.exception.ReadStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":" * A storage implementation that handles saving and loading tasks to/from a file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":" * The tasks are stored in a file in the PSV (Pipe-Separated Values) format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":" * This class is responsible for reading from and writing to the storage file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"public class FileStorage implements Storage {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    private final File file;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * Constructs a {@code FileStorage} object with the specified file name.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * The file will be used to save and load the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * @param filename the name of the file where tasks will be stored","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    public FileStorage(String filename) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        file \u003d new File(filename);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * Saves the tasks in the given task container to the storage file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     * If the file does not exist, it will be created along with its parent directories.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * Each task is written to the file in PSV format (Pipe-Separated Values).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * Any errors encountered while writing the tasks are collected and displayed to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     * @param tasks the task container containing the tasks to be saved","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display any error messages","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"     * @throws WriteStorageException if there is an error writing to the storage file","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"    public void save(TaskContainer tasks, Ui ui) throws WriteStorageException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"            if (!file.exists()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"                file.createNewFile();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"            ArrayList\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"            tasks.list((index, task) -\u003e {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"                try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"                    writer.write(task.toPsvString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"                    writer.write(\u0027\\n\u0027);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"                } catch (IOException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"                    errors.add(String.format(\"Error writing task to PSV [%s]\", e.getMessage()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"            });","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"            writer.flush();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"            writer.close();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"            if (!errors.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"                ui.showError(errors);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"            throw new WriteStorageException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"                    \"Error writing tasklist to file [%s] \" + e.getMessage()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"     * Loads the tasks from the storage file into the given task container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"     * If any errors are encountered while parsing the tasks, they are displayed to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"     * @param taskContainer the container where tasks will be added","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display any error messages","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"     * @throws ReadStorageException if there is an error reading from the storage file","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    public void load(TaskContainer taskContainer, Ui ui) throws ReadStorageException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"            String line;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"            ArrayList\u003cString\u003e errors \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"                try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"                    Task task \u003d Task.fromPsvString(line);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"                    taskContainer.add(task);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"                } catch (ParseTaskException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"                    errors.add(e.getMessage());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"                }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"            if (!errors.isEmpty()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"                ui.showError(errors);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"            throw new ReadStorageException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"                    \"Error reading tasklist from file [%s] \", e.getMessage()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":107}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.storage;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.exception.ReadStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * Represents the contract for any storage system used to persist task data.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" * This interface defines methods for saving and loading tasks from a storage medium.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" * Implementations of this interface are responsible for handling the persistence of tasks","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":" * in a way that can be retrieved and updated.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"public interface Storage {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * Saves the current list of tasks to a storage medium.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     * @param taskList the container of tasks to be saved","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display any errors encountered during the saving process","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     * @throws WriteStorageException if there is an error during the write process to the storage medium","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    public void save(TaskContainer taskList, Ui ui) throws WriteStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * Loads the list of tasks from a storage medium into the task container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @param taskContainer the container where tasks will be loaded","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @param ui the user interface to display any errors encountered during the loading process","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @throws ReadStorageException if there is an error during the reading process from the storage medium","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    public void load(TaskContainer taskContainer, Ui ui) throws ReadStorageException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":33}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.Utils;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.InvalidStatusIconException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.ParseTaskException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" * Represents a Deadline task in the task management system.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":" * A Deadline task has a description and a specific deadline time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":" * The task can be parsed from a string representation in PSV (Pipe-Separated Values) format","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":" * and can also be converted to such a format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    private final LocalDate time;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     * Constructs a new Deadline task with the specified description and deadline time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * @param by The deadline time for the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"    public Deadline(String description, LocalDate by) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"        this.time \u003d by;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     * Creates a Deadline task from a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * The PSV string is expected to have the format: \"TaskType | StatusIcon | Description | Time\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * @param input The PSV string representing the deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     * @return A Deadline task created from the provided PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @throws ParseTaskException If the input string is not in the expected format or contains invalid data.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    public static Task fromPsvString(String input) throws ParseTaskException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        String[] parts \u003d input.split(\"\\\\|\", 4);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        if (parts.length !\u003d 4) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"                    \"Deadline PSV string [%s] have invalid number of columns\", input));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        String statusIconString \u003d parts[1].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        String timeString \u003d parts[3].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        LocalDate time;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            time \u003d Utils.parseDate(timeString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(\"Unable to parse deadline time [%s]\", timeString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        Deadline deadline \u003d new Deadline(description, time);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"            deadline.markFromStatusIcon(statusIconString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"        } catch (InvalidStatusIconException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"                    \"Invalid status icon [%s] for deadline task\", statusIconString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        return deadline;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"     * Returns the icon representing the task type.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"     * For Deadline tasks, the icon is always \"D\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"     * @return The task type icon as a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        return Task.Type.D.name();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"     * Converts this Deadline task to a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"     * The format of the PSV string is: \"TaskType | StatusIcon | Description | Time\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"     * @return A PSV string representing this Deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"    public String toPsvString() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"        return String.format(\"%s | %s | %s | %s\", getTaskIcon(), getStatusIcon(), this.description,","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"        Utils.dateToString(this.time));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"     * Returns a string representation of the Deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"     * The string representation includes the task type icon, the status icon, the description,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"     * and the deadline time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"     * @return A string representation of the Deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"        return String.format(\"[%s][%s] %s (by: %s)\", getTaskIcon(), getStatusIcon(), this.description,","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"                Utils.dateToString(this.time));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":106}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.Utils;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.exception.InvalidStatusIconException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.ParseTaskException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" * Represents an Event task in the task management system.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":" * An Event task has a description, a start time, and an end time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":" * The task can be parsed from a string representation in PSV (Pipe-Separated Values) format","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":" * and can also be converted to such a format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    private final LocalDate from;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"    private final LocalDate to;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"     * Constructs a new Event task with the specified description, start time, and end time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * @param description The description of the event.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    public Event(String description, LocalDate from, LocalDate to) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * Creates an Event task from a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     * The PSV string is expected to have the format: \"TaskType | StatusIcon | Description | FromTime | ToTime\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     * @param input The PSV string representing the event task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"     * @return An Event task created from the provided PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"     * @throws ParseTaskException If the input string is not in the expected format or contains invalid data.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"    public static Task fromPsvString(String input) throws ParseTaskException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        String[] parts \u003d input.split(\"\\\\|\", 5);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        if (parts.length !\u003d 5) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"                    \"Event PSV string [%s] have invalid number of columns\", input));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        String statusIconString \u003d parts[1].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"        String fromTimeString \u003d parts[3].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        String toTimeString \u003d parts[4].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        LocalDate fromTime;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"            fromTime \u003d Utils.parseDate(fromTimeString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"                    \"Unable to parse event time [%s]\", fromTimeString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"        LocalDate toTime;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"            toTime \u003d Utils.parseDate(fromTimeString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"                    \"Unable to parse event time [%s]\", toTimeString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        Event event \u003d new Event(description, fromTime, toTime);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"            event.markFromStatusIcon(statusIconString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"        } catch (InvalidStatusIconException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"                    \"Invalid status icon [%s] for event task\", statusIconString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"        return event;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"     * Returns the icon representing the task type.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"     * For Event tasks, the icon is always \"E\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"     * @return The task type icon as a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"        return Task.Type.E.name();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"     * Converts this Event task to a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"     * The format of the PSV string is: \"TaskType | StatusIcon | Description | FromTime | ToTime\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"     * @return A PSV string representing this Event task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"    public String toPsvString() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        return String.format(\"%s | %s | %s | %s | %s\", getTaskIcon(), getStatusIcon(),","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"                this.description, Utils.dateToString(this.from), Utils.dateToString(this.to));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"     * Returns a string representation of the Event task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"     * The string representation includes the task type icon, the status icon, the description,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"     * the start time, and the end time of the event.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"     * @return A string representation of the Event task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"        return String.format(\"[%s][%s] %s (from: %s to: %s)\", getTaskIcon(), getStatusIcon(),","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"                this.description, Utils.dateToString(this.from), Utils.dateToString(this.to));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":118}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.exception.InvalidStatusIconException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.exception.ParseTaskException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * Represents an abstract task in the task management system.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * A task has a description, a completion status, and a task type (Deadline, Event, or Todo).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * Subclasses of this class represent specific types of tasks such as Deadline, Event, and Todo.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"public abstract class Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * Enum representing the possible types of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     * D \u003d Deadline, E \u003d Event, T \u003d Todo.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"    public enum Type {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"        D, // Deadline","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"        E, // Event","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"        T // Todo","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    public static final String DONE_ICON \u003d \"X\"; // Icon representing a completed task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"    public static final String NOT_DONE_ICON \u003d \"_\"; // Icon representing an incomplete task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"    protected String description; // Description of the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    protected boolean isDone; // Completion status of the task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * Constructs a new Task with the given description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     * By default, the task is marked as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"    public Task(String description) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * The icon is \"X\" if the task is done, otherwise it is \"_\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     * @return The status icon of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        return (isDone ? DONE_ICON : NOT_DONE_ICON);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     * Marks the task as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    public void markAsDone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"        isDone \u003d true;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"     * Marks the task as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        isDone \u003d false;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     * Gets the description of the task.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"    public String getDescription() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        return description;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"     * Sets the completion status of the task based on the given status icon.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"     * Valid status icons are:","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"     * \u003cli\u003e\"_\" for not done tasks\u003c/li\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"     * \u003cli\u003e\"X\" for done tasks\u003c/li\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"     * If an invalid status icon is provided, an {@link InvalidStatusIconException} is thrown.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"     * @param statusIcon The status icon representing the task\u0027s completion status.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"     * @throws InvalidStatusIconException If the status icon is invalid.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"    protected void markFromStatusIcon(String statusIcon) throws InvalidStatusIconException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"        switch (statusIcon) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        case NOT_DONE_ICON -\u003e markAsNotDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        case DONE_ICON -\u003e markAsDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        default -\u003e throw new InvalidStatusIconException(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"                String.format(\"Invalid status icon [%s]\", statusIcon), statusIcon);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"     * Converts the task to a PSV (Pipe-Separated Values) string representation.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"     * The exact format depends on the specific task subclass (e.g., Deadline, Event, Todo).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"     * @return A PSV string representing the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"    public abstract String toPsvString();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"     * Creates a Task from a PSV string representation.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"     * The input string should have the format: \"TaskType | StatusIcon | Description\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"     * The task type is inferred from the first part of the string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"     * @param input The PSV string representation of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"     * @return A Task object created from the given PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"     * @throws ParseTaskException If the PSV string is not in the expected format or cannot be parsed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"    public static Task fromPsvString(String input) throws ParseTaskException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"        String[] parts \u003d input.split(\"\\\\|\", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"        Task.Type taskType;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"            taskType \u003d Type.valueOf(parts[0].trim());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"                    \"Unable to parse task type from [%s]\", input));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"        return switch (taskType) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"        case D -\u003e Deadline.fromPsvString(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"        case E -\u003e Event.fromPsvString(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"        case T -\u003e Todo.fromPsvString(input);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"        };","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"caando"},"content":"     * Returns the task icon representing the type of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"caando"},"content":"     * Each subclass (e.g., Deadline, Event, Todo) will provide its own implementation.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"caando"},"content":"     * @return The task type icon as a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"caando"},"content":"    public abstract String getTaskIcon();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"caando"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"caando"},"content":"     * Each subclass (e.g., Deadline, Event, Todo) will provide its own implementation of this method.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"caando"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"caando"},"content":"    public abstract String toString();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":143}},{"path":"src/main/java/duke/task/TaskContainer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * Represents a container for storing and managing tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * Provides methods to add, list, retrieve, remove, and get the size of tasks in the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"public interface TaskContainer {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"     * A functional interface used for accepting a task and its index in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"    @FunctionalInterface","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"    public interface TaskConsumer {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"        /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"         * Accepts a task and its index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"         * This method is used to process a task in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"         *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"         * @param index The index of the task in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"         * @param task The task at the specified index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"         */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        void accept(int index, Task task);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * Adds a task to the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    public void add(Task task);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * Lists all tasks in the container by passing each task to the specified consumer.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @param consumer A {@link TaskConsumer} that processes each task along with its index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    public void list(TaskConsumer consumer);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * Retrieves the task at the specified index in the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"     * @throws TaskNotFoundException If the index is out of range (invalid index).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    public Task get(int index) throws TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     * Removes the task at the specified index from the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"     * @param index The index of the task to remove.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"     * @return The task that was removed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"     * @throws TaskNotFoundException If the index is out of range (invalid index).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"    public Task remove(int index) throws TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"     * Returns the number of tasks currently stored in the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"     * @return The number of tasks in the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    public int size();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":65}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.util.List;","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * Represents a container for managing a list of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" * This class provides methods to add, list, retrieve, and remove tasks in the container.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"public class TaskList implements TaskContainer {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"    private final List\u003cTask\u003e tasks; // List of tasks in the task list","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     * Initializes the internal list of tasks as an empty ArrayList.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    public TaskList() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    public void add(Task task) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"        tasks.add(task);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * Lists all tasks in the task list, providing each task to the given consumer.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @param consumer A {@link TaskConsumer} to accept each task and its index in the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    public void list(TaskConsumer consumer) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"            consumer.accept(i, tasks.get(i));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"     * Retrieves the task at the specified index in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"     * @param index The index of the task to be retrieved.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     * @throws TaskNotFoundException If the index is out of range (i.e., invalid index).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"    public Task get(int index) throws TaskNotFoundException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"            throw new TaskNotFoundException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"                    \"Index [%d] out of range [%d]\", index, tasks.size()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        return tasks.get(index);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     * Removes the task at the specified index from the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     * @param index The index of the task to be removed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     * @return The task that was removed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     * @throws TaskNotFoundException If the index is out of range (i.e., invalid index).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"    public Task remove(int index) throws TaskNotFoundException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"            throw new TaskNotFoundException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"                    \"Index [%d] out of range [%d]\", index, tasks.size()));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"        return tasks.remove(index);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"    public int size() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        return tasks.size();","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":88}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import duke.exception.InvalidStatusIconException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import duke.exception.ParseTaskException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * Represents a Todo task in the task management system.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * A Todo task is a basic task that has a description and a completion status.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * The task can be parsed from a string representation in PSV (Pipe-Separated Values) format","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" * and can also be converted to such a format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     * Constructs a new Todo task with the specified description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"        super(description);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     * Creates a Todo task from a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * The PSV string is expected to have the format: \"TaskType | StatusIcon | Description\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     * @param input The PSV string representing the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * @return A Todo task created from the provided PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     * @throws ParseTaskException If the input string is not in the expected format or contains invalid data.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    public static Task fromPsvString(String input) throws ParseTaskException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        String[] parts \u003d input.split(\"\\\\|\", 3);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        if (parts.length !\u003d 3) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"                    \"Todo PSV string [%s] have invalid number of columns\", input));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        String statusIconString \u003d parts[1].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        Todo todo \u003d new Todo(description);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"            todo.markFromStatusIcon(statusIconString);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        } catch (InvalidStatusIconException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"            throw new ParseTaskException(String.format(\"Invalid status icon [%s] for todo task\", statusIconString));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        return todo;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"     * Converts this Todo task to a PSV string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"     * The format of the PSV string is: \"TaskType | StatusIcon | Description\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"     * @return A PSV string representing this Todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    public String toPsvString() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        return String.format(\"%s | %s | %s\", getTaskIcon(), getStatusIcon(), this.description);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     * Returns the icon representing the task type.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     * For Todo tasks, the icon is always \"T\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"     * @return The task type icon as a string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"    public String getTaskIcon() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        return Task.Type.T.name();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"     * Returns a string representation of the Todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"     * The string representation includes the task type icon, the status icon, and the description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"     * @return A string representation of the Todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"    public String toString() {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        return String.format(\"[%s][%s] %s\", getTaskIcon(), getStatusIcon(), description);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":85}},{"path":"src/main/java/duke/ui/Cli.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import java.util.List;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":" * Represents a Command Line Interface (CLI) for the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":" * This class interacts with the user through the terminal/command line.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":" * It handles taking user input and displaying output or error messages.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":" *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":" * The CLI prompts the user, processes input, and displays task-related outputs","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":" * or errors. It also provides methods to display formatted messages and a","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * method to close the interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"public class Cli implements Ui {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    private final Scanner scanner;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    private final PrintStream printStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"     * Constructs a new instance of the CLI, initializes the scanner for input,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"     * and displays a welcome message to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    public Cli(InputStream inputStream, PrintStream printStream) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        scanner \u003d new Scanner(inputStream);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"        this.printStream \u003d printStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"     * Displays a separator line for visual clarity in the terminal output.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"    private void showLineSeparator() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        printStream.println(\"   _____________________________________________________________________________\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"     * Displays a single line of text with indentation for formatting.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     * @param line The text to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"    private void showLine(String line) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        printStream.println(String.format(\"    %s\", line));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"     * Reads a line of input from the user, trims any surrounding whitespace,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     * and returns the input string.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"     * @return The trimmed input string from the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"    public String getInput() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        String input \u003d scanner.nextLine().trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        return input;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"     * Displays a list of strings as output in the terminal, each on a new line.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"     * A separator line is added at the end for formatting.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"     * @param lines The list of lines to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"    public void showOutput(List\u003cString\u003e lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        for (String line : lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"            showLine(line);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"     * Displays one or more strings as output in the terminal.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"     * Each string is displayed on a new line with a separator line at the end.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"     * @param lines The strings to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"    public void showOutput(String... lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"        showOutput(new ArrayList\u003c\u003e(Arrays.asList(lines)));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"     * Displays a list of error messages, each prefixed with \"OOPS!!!\",","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"     * with a separator line at the end.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"     * @param lines The list of error messages to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"    public void showError(List\u003cString\u003e lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"        for (String line : lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"            showLine(String.format(\"OOPS!!! %s\", line));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"     * Displays one or more error messages, each prefixed with \"OOPS!!!\",","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"     * with a separator line at the end.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"     * @param lines The error messages to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"    public void showError(String... lines) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"        showError(new ArrayList\u003c\u003e(Arrays.asList(lines)));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"     * Displays a greeting message to the user when the program starts.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"     * The greeting provides a welcome message and asks the user for input.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"    public void start() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"        showLine(\"Hello! I\u0027m Mr Meeseeks\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"        showLine(\"What can I do for you?\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"     * Displays a goodbye message and a separator line before closing the interface.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"caando"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"caando"},"content":"    public void close() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"caando"},"content":"        showLine(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"caando"},"content":"        showLineSeparator();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":132}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.List;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":" * Represents the user interface for interacting with the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":" * This interface defines methods for receiving user input, displaying output,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":" * showing error messages, and closing the interface. Implementing classes","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":" * will handle the actual interaction with the user (e.g., via the command line).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"public interface Ui {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"     * Retrieves a line of input from the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"     * @return The input string provided by the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    public String getInput();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"     * Displays a list of strings as output to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"     * @param lines The list of strings to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"    public void showOutput(List\u003cString\u003e lines);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"     * Displays one or more strings as output to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"     * @param lines The strings to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    public void showOutput(String... lines);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"     * Displays a list of error messages to the user, usually prefixed with \"OOPS!!!\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"     * @param lines The list of error messages to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    public void showError(List\u003cString\u003e lines);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"     * Displays one or more error messages to the user, usually prefixed with \"OOPS!!!\".","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"     * @param lines The error messages to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"    public void showError(String... lines);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"     * Starts the user interface.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"     *","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"     * This method initializes any necessary resources and prepares the UI","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"     * for interaction with the user.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"    public void start();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"     * Closes the user interface and displays a goodbye message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"    public void close();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":60}},{"path":"src/test/java/duke/command/AddDeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import org.mockito.ArgumentMatchers;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import org.mockito.Mockito;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.Deadline;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"public class AddDeadlineCommandTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"    public void testParse_validInput_createsAddDeadlineCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        AddDeadlineCommand command \u003d (AddDeadlineCommand) AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        Assertions.assertNotNull(command);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Finish homework\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 1), command.getDate());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"    public void testParse_missingDescription_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"            AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"                \"Unable to parse [deadline /by 2025-02-01] to deadline command.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    public void testParse_missingDate_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"            AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"                \"Unable to parse [deadline Finish homework /by] to deadline command.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"    public void testParse_invalidDate_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by invalid-date\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"            AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(exception.getMessage().contains(\"Unable to parse\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"    public void testParse_invalidFormat_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        String input \u003d \"finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"            AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(exception.getMessage().contains(\"Unable to parse\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"    public void testExecute_addsTaskToContainerAndShowsOutput() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"        // Prepare the input string and deadline command","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"        AddDeadlineCommand command \u003d (AddDeadlineCommand) AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"        // Mocking the dependencies","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"        TaskContainer taskContainer \u003d Mockito.mock(TaskContainer.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"        Storage storage \u003d Mockito.mock(Storage.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"        Ui ui \u003d Mockito.mock(Ui.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        Mockito.verify(taskContainer).add(ArgumentMatchers.any(Deadline.class));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showOutput(ArgumentMatchers.eq(\"Got it. I\u0027ve added this task:\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"                ArgumentMatchers.eq(\"[D][_] Finish homework (by: Feb 1 2025)\"), ArgumentMatchers.anyString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"    public void testGetDate_returnsCorrectDate() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"        AddDeadlineCommand command \u003d (AddDeadlineCommand) AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 1), command.getDate());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"    public void testGetTaskDescription_returnsCorrectDescription() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"caando"},"content":"        AddDeadlineCommand command \u003d (AddDeadlineCommand) AddDeadlineCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Finish homework\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":133}},{"path":"src/test/java/duke/command/AddEventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import org.mockito.ArgumentMatchers;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import org.mockito.Mockito;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.Event;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"/**","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":" * Unit tests for AddEventCommand.","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":" */","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    public void testParse_validInput_createsAddEventCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Conference /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        AddEventCommand command \u003d (AddEventCommand) AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"        Assertions.assertNotNull(command);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Conference\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 1), command.getFrom());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 3), command.getTo());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"    public void testParse_missingDescription_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        String input \u003d \"event /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"            AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Unable to parse [event /from 2025-02-01 /to 2025-02-03] to event command.\",","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"                exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"    public void testParse_missingFromDate_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Meeting /from /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"            AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Unable to parse [event Meeting /from /to 2025-02-03] to event command.\",","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"                exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"    public void testParse_missingToDate_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Workshop /from 2025-02-01 /to\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"            AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Unable to parse [event Workshop /from 2025-02-01 /to] to event command.\",","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"                exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"    public void testParse_invalidDateFormat_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Party /from invalid-date /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"            AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(exception.getMessage().contains(\"Unable to parse\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"    public void testExecute_addsTaskToContainerAndShowsOutput() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"        // Prepare the input string and command","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Conference /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"        AddEventCommand command \u003d (AddEventCommand) AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"        // Mocking dependencies","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        TaskContainer taskContainer \u003d Mockito.mock(TaskContainer.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"        Storage storage \u003d Mockito.mock(Storage.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"        Ui ui \u003d Mockito.mock(Ui.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"        Mockito.verify(taskContainer).add(ArgumentMatchers.any(Event.class));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showOutput(ArgumentMatchers.eq(\"Got it. I\u0027ve added this task:\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"                ArgumentMatchers.eq(\"[E][_] Conference (from: Feb 1 2025 to: Feb 3 2025)\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"                ArgumentMatchers.anyString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"    public void testGetTaskDescription_returnsCorrectDescription() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Workshop /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"        AddEventCommand command \u003d (AddEventCommand) AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Workshop\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"caando"},"content":"    public void testGetFromDate_returnsCorrectDate() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Party /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"caando"},"content":"        AddEventCommand command \u003d (AddEventCommand) AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 1), command.getFrom());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"caando"},"content":"    public void testGetToDate_returnsCorrectDate() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Party /from 2025-02-01 /to 2025-02-03\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"caando"},"content":"        AddEventCommand command \u003d (AddEventCommand) AddEventCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(LocalDate.of(2025, 2, 3), command.getTo());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":151}},{"path":"src/test/java/duke/command/AddTodoCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.util.Objects;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import org.mockito.Mockito;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.Todo;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"public class AddTodoCommandTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    public void testParse_validInput_createsAddTodoCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"        String input \u003d \"todo Buy groceries\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        AddTodoCommand command \u003d (AddTodoCommand) AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        Assertions.assertNotNull(command);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Buy groceries\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    public void testParse_missingDescription_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        String input \u003d \"todo \";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"            AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Unable to parse [todo ] to todo command.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"    public void testParse_invalidFormat_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"        String input \u003d \"do homework\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(ParseCommandException.class, () -\u003e {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"            AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"        });","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(Objects.requireNonNull(exception.getMessage()).contains(\"Unable to parse\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"    public void testExecute_addsTaskToContainerAndShowsOutput() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"        // Prepare the input string and command","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        String input \u003d \"todo Read a book\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"        AddTodoCommand command \u003d (AddTodoCommand) AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"        TaskContainer taskContainer \u003d Mockito.mock(TaskContainer.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"        Storage storage \u003d Mockito.mock(Storage.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"        Ui ui \u003d Mockito.mock(Ui.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        Mockito.verify(taskContainer).add(Mockito.any(Todo.class));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showOutput(Mockito.eq(\"Got it. I\u0027ve added this task:\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"                Mockito.eq(\"[T][_] Read a book\"),","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"                Mockito.anyString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    public void testGetTaskDescription_returnsCorrectDescription() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"        String input \u003d \"todo Complete project\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        AddTodoCommand command \u003d (AddTodoCommand) AddTodoCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Complete project\", command.getTaskDescription());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":88}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import org.mockito.Mockito;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.exception.TaskNotFoundException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.exception.WriteStorageException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.storage.Storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.task.Task;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.task.TaskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"import duke.ui.Ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"class DeleteCommandTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    private TaskContainer taskContainer;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    private Ui ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"    void setUp() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        taskContainer \u003d Mockito.mock(TaskContainer.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"        storage \u003d Mockito.mock(Storage.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"        ui \u003d Mockito.mock(Ui.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    // Test parse() for valid input","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    void testParse_validInput_returnsDeleteCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"        String input \u003d \"delete 3\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        DeleteCommand command \u003d (DeleteCommand) DeleteCommand.parse(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(3, command.getTaskIndex());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"    // Test parse() for invalid input (non-integer)","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    void testParse_nonIntegerInput_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"        String input \u003d \"delete abc\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"                ParseCommandException.class, () -\u003e DeleteCommand.parse(input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Delete command requires an integer index.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"    // Test parse() for missing index","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"    void testParse_missingIndex_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        String input \u003d \"delete\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"                ParseCommandException.class, () -\u003e DeleteCommand.parse(input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Delete command requires an integer index.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"    // Test parse() for negative index","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"    void testParse_negativeIndex_throwsParseCommandException() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        String input \u003d \"delete -1\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"                ParseCommandException.class, () -\u003e DeleteCommand.parse(input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Delete command requires an integer index.\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"    // Test execute() for successful deletion","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"    void testExecute_successfulDeletion_showsCorrectOutput() throws TaskNotFoundException, WriteStorageException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        Task task \u003d Mockito.mock(Task.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"        Mockito.when(taskContainer.remove(2)).thenReturn(task);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        Mockito.when(task.toString()).thenReturn(\"Task 3\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        Mockito.when(taskContainer.size()).thenReturn(4);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        DeleteCommand command \u003d new DeleteCommand(3);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"        Mockito.verify(taskContainer).remove(2); // Ensure task was removed at correct index","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showOutput(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"                \"Noted. I\u0027ve removed this task:\",","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"                \"Task 3\",","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"                \"Now you have 4 tasks in the list.\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        Mockito.verify(task).markAsNotDone();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        Mockito.verify(storage).save(taskContainer, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"    // Test execute() for task not found","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    void testExecute_taskNotFound_showsError() throws TaskNotFoundException, WriteStorageException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"        Mockito.when(taskContainer.remove(2)).thenThrow(new TaskNotFoundException(\"Task not found\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"        DeleteCommand command \u003d new DeleteCommand(3);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showError(\"Task not found\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"        Mockito.verify(storage).save(taskContainer, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"    // Test execute() for WriteStorageException","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"    void testExecute_writeStorageException_showsError() throws TaskNotFoundException, WriteStorageException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"        Task task \u003d Mockito.mock(Task.class);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"        Mockito.when(taskContainer.remove(2)).thenReturn(task);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"        Mockito.doThrow(new WriteStorageException(\"Storage error\")).when(storage).save(taskContainer, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"        DeleteCommand command \u003d new DeleteCommand(3);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        command.execute(taskContainer, storage, ui);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"        Mockito.verify(ui).showError(\"Storage error\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":109}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.parser;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import duke.command.AddDeadlineCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import duke.command.AddEventCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"import duke.command.AddTodoCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import duke.command.Command;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"import duke.exception.ParseCommandException;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"public class ParserTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    public void testParseTodoCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"        String input \u003d \"todo Buy groceries\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof AddTodoCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    public void testParseDeadlineCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        String input \u003d \"deadline Finish homework /by 2025-02-01\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof AddDeadlineCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"    public void testParseEventCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        String input \u003d \"event Attend meeting /from 2025-02-01 /to 2025-02-02\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof AddEventCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"    public void testParseListCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        String input \u003d \"list\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof ListCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"    public void testParseDeleteCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        String input \u003d \"delete 1\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof DeleteCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"    public void testParseMarkCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        String input \u003d \"mark 1\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof MarkCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"    public void testParseUnmarkCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"        String input \u003d \"unmark 1\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof UnmarkCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"    public void testParseByeCommand() throws ParseCommandException {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        // Prepare the input string","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"        String input \u003d \"bye\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"        Command result \u003d Parser.parseCommand(input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"        Assertions.assertTrue(result instanceof ByeCommand);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"caando"},"content":"    public void testParseUnknownCommand() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"caando"},"content":"        // Prepare the input string with an unknown command","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"caando"},"content":"        String input \u003d \"unknowncommand something\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"caando"},"content":"        // Act \u0026 Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"caando"},"content":"        ParseCommandException exception \u003d Assertions.assertThrows(","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"caando"},"content":"            ParseCommandException.class, () -\u003e Parser.parseCommand(input));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Unknown command [unknowncommand]\", exception.getMessage());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":125}},{"path":"src/test/java/duke/ui/CliTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"package duke.ui;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"import java.io.InputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"import java.io.PrintStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"import java.util.Arrays;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"public class CliTest {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"    private InputStream mockInputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"    private PrintStream mockPrintStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"    private ByteArrayOutputStream byteArrayOutputStream;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    private Cli cli;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"    public void setUp() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"        // Mock InputStream and PrintStream","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"        mockInputStream \u003d new ByteArrayInputStream(\"Test input\".getBytes());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"caando"},"content":"        byteArrayOutputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"        mockPrintStream \u003d new PrintStream(byteArrayOutputStream);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"caando"},"content":"        // Initialize the Cli object","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"caando"},"content":"        cli \u003d new Cli(mockInputStream, mockPrintStream);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"    public void testGetInput() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"caando"},"content":"        String input \u003d cli.getInput();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(\"Test input\", input);","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"caando"},"content":"    public void testShowOutput_withList() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"caando"},"content":"        cli.showOutput(Arrays.asList(\"Line 1\", \"Line 2\", \"Line 3\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"    Line 1\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"caando"},"content":"                + \"    Line 2\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"caando"},"content":"                + \"    Line 3\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"caando"},"content":"    public void testShowOutput_withVarargs() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"caando"},"content":"        cli.showOutput(\"Line 1\", \"Line 2\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"    Line 1\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"caando"},"content":"                + \"    Line 2\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"caando"},"content":"    public void testShowError_withList() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"caando"},"content":"        cli.showError(Arrays.asList(\"Error 1\", \"Error 2\"));","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"    OOPS!!! Error 1\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"caando"},"content":"                + \"    OOPS!!! Error 2\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"caando"},"content":"    public void testShowError_withVarargs() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"caando"},"content":"        cli.showError(\"Error 1\", \"Error 2\");","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"    OOPS!!! Error 1\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"caando"},"content":"                + \"    OOPS!!! Error 2\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"caando"},"content":"    public void testStart() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"caando"},"content":"        cli.start();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"   _____________________________________________________________________________\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"caando"},"content":"                + \"    Hello! I\u0027m Mr Meeseeks\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"caando"},"content":"                + \"    What can I do for you?\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"caando"},"content":"    @Test","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"caando"},"content":"    public void testClose() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"caando"},"content":"        // Act","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"caando"},"content":"        cli.close();","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"caando"},"content":"        // Assert","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"caando"},"content":"        String expectedOutput \u003d \"    Bye. Hope to see you again soon!\\n\"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"caando"},"content":"                + \"   _____________________________________________________________________________\\n\";","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"caando"},"content":"        Assertions.assertEquals(expectedOutput, byteArrayOutputStream.toString());","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"caando"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"caando"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"caando":112}},{"path":"text-ui-test/data-initial/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"D | _ | return book | Dec 1 2019","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"E | X | project meeting | Dec 1 2019 | Dec 2 2019","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"T | _ | water plants","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"caando":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"caando"},"content":"hi","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"caando"},"content":"todo borrow book","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"caando"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"caando"},"content":"deadline return book /by 2024-12-01","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"caando"},"content":"event project meeting /from 2024-12-01 /to 2024-12-02","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"caando"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"caando"},"content":"todo","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"caando"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"caando"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"caando"},"content":"event mysterious meeting","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"caando"},"content":"find book","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"caando"},"content":"deadline mysterious deadline","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"caando"},"content":"delete 1","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"caando"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"mark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"unmark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"delete 10","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"bye","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"caando":18}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"caando"},"content":"# delete saved data from previous run","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"caando"},"content":"if [ -e \"./data\" ]","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"caando"},"content":"then","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"caando"},"content":"    rm -r data","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"caando"},"content":"fi","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"caando"},"content":"# copy initial data to state","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"caando"},"content":"cp -r data-initial data","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"caando"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"caando"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*/*.java","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"caando"},"content":"java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"caando":11,"-":36}}]
