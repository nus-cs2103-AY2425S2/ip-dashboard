[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"plugins {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"    id \u0027java\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"    id \u0027application\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"checkstyle {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"repositories {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    mavenCentral()","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"dependencies {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"test {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    useJUnitPlatform()","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    testLogging {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        showExceptions true","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        showCauses true","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        showStackTraces true","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"application {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    mainClass.set(\"introblaise.gui.Launcher\")","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"shadowJar {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    archiveBaseName \u003d \"IntroBlaise\"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"run{","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    // enableAssertions \u003d true","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":61}},{"path":"data/introBlaise.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"T | 0 | Exercise | 0 | ","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"jniaorx":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"# IntroBlaise User Guide","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"![IntroBlaise Screenshot](Ui.png)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"Welcome to **IntroBlaise**, an introverted bot named Blaise! Your friendly task management bot! IntroBlaise helps you organize your tasks efficiently using simple commands.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"## 📌 Features \u0026 Commands","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"### 1️⃣ Adding a To-Do Task: `todo`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"Adds a simple to-do task to your list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"todo [DESCRIPTION]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"todo laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"[T][ ] laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"Now you have 1 task in the list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"### 2️⃣ Adding a Deadline Task: `deadline`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"Adds a task with a specific due date.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"deadline [DESCRIPTION] /by [dd-mm-yyyy HHmm]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"deadline CS2103T IP /by 21-02-2025 2359","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"[D][ ] CS2103T IP (by: Feb 21 2025 23:59)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"### 3️⃣ Adding an Event Task: `event`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"Adds an event with a specific start and end time.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"event [DESCRIPTION] /from [dd-mm-yyyy HHmm] /to [dd-mm-yyyy HHmm]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"event presentation /from 19-02-2025 1200 /to 19-02-2025 1300","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"[E][ ] presentation (from: Feb 19 2025 12:00 to: Feb 19 2025 13:00)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"### 4️⃣ Viewing Your Task List: `list`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"Displays all tasks in your list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"list","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"list","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"1. [T][ ] laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"2. [D][ ] CS2103T IP (by: Feb 21 2025 23:59)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"3. [E][ ] presentation (from: Feb 19 2025 12:00 to: Feb 19 2025 13:00)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"### 5️⃣ Marking a Task as Done: `mark`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"Marks a task as completed.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"mark [TASKINDEX]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"mark 1","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"Well done! I\u0027ve marked this task as done:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"[T][X] laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"### 6️⃣ Unmarking a Task: `unmark`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"Marks a task as incomplete.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"unmark [TASKINDEX]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"unmark 1","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"[T][ ] laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"### 7️⃣ Deleting a Task: `delete`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"Removes a task from the list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"delete [TASKINDEX]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"delete 1","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"[T][ ] laundry","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jniaorx"},"content":"Now you have 2 tasks in the list.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jniaorx"},"content":"### 8️⃣ Searching for Tasks by Date: `tasks on`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jniaorx"},"content":"Finds tasks (deadlines/events) occurring on a specific date.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jniaorx"},"content":"tasks on [dd-mm-yyyy]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jniaorx"},"content":"tasks on 19-02-2025","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jniaorx"},"content":"[E][ ] presentation (from: Feb 19 2025 12:00 to: Feb 19 2025 13:00)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jniaorx"},"content":"### 9️⃣ Searching for Tasks by Keyword: `find`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jniaorx"},"content":"Finds tasks that contain the given keyword.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"jniaorx"},"content":"find [KEYWORD]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"jniaorx"},"content":"find IP","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jniaorx"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"jniaorx"},"content":"1. [D][ ] CS2103T IP (by: Feb 21 2025 23:59)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"jniaorx"},"content":"### 🔟 Tagging a Task: `tag`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jniaorx"},"content":"Adds a label to a task for easy identification.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jniaorx"},"content":"tag [TASKINDEX] [LABEL]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"jniaorx"},"content":"tag 1 assignment","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"jniaorx"},"content":"Task tagged: [D][ ] |assignment| CS2103T IP (by: Feb 21 2025 23:59)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"jniaorx"},"content":"### 1️⃣1️⃣ Removing a Tag: `untag`","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"jniaorx"},"content":"Removes the label from a task.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"jniaorx"},"content":"untag [TASKINDEX]","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"jniaorx"},"content":"untag 1","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"jniaorx"},"content":"Tag for [D][ ] |assignment| CS2103T IP (by: Feb 21 2025 23:59) has been successfully removed!","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"jniaorx"},"content":"### 1️⃣2️⃣ Clearing task list: `clear`","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"jniaorx"},"content":"Clears the entire task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"jniaorx"},"content":"clear","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"jniaorx"},"content":"clear","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"jniaorx"},"content":"Yay! Your task list has been cleared!","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"jniaorx"},"content":"### 1️⃣3️⃣ Displaying valid commands `help`","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"jniaorx"},"content":"Shows a list of valid commands.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"jniaorx"},"content":"**Format:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"jniaorx"},"content":"help","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"jniaorx"},"content":"**Example:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"jniaorx"},"content":"help","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"jniaorx"},"content":"**Response:**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"jniaorx"},"content":"Hi! Here are the valid commands for IntroBlaise:","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"jniaorx"},"content":"1. todo [DESCRIPTION]: Add a To-Do task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"jniaorx"},"content":"2. deadline [DESCRIPTION] /by [dd-mm-yyyy HHmm]: Add a Deadline task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"jniaorx"},"content":"3. event [DESCRIPTION] /from [dd-mm-yyyy HHmm] /to [dd-mm-yyyy HHmm]: Add an Event task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"jniaorx"},"content":"4. list: View all tasks","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"jniaorx"},"content":"5. mark [TASKINDEX]: Mark a task as done","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"jniaorx"},"content":"6. unmark [TASKINDEX]: Unmark a task as not done","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"jniaorx"},"content":"7. delete [TASKINDEX]: Delete a task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"jniaorx"},"content":"8. tasks on [dd-mm-yyyy]: Search tasks by date","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"jniaorx"},"content":"9. find [KEYWORD]: Search tasks by keyword","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"jniaorx"},"content":"10. tag [TASKINDEX] [LABEL]: Add a tag to a task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"jniaorx"},"content":"11. untag [TASKINDEX]: Remove a tag from a task","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"jniaorx"},"content":"12. clear: Clears the entire task list","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"jniaorx"},"content":"13. help: Show this help message\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"jniaorx"},"content":"```","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"jniaorx"},"content":"---","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"jniaorx"},"content":"## 🎯 Conclusion","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"jniaorx"},"content":"With **IntroBlaise**, managing your tasks is simple and efficient. Use the commands above to stay organized and never miss a deadline again!","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"jniaorx"},"content":"📌 Happy task managing! 🚀","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":240,"-":22}},{"path":"src/main/java/introblaise/commands/AddDealineTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.DeadlineTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Deadline;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * Command class that handles the addition of a Deadline task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * This class implements the {@code TaskCommand} interface and performs the necessary","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * parsing and validation to add a {@code Deadline} task to the {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"public class AddDealineTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final DeadlineTaskParser deadlineTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs an {@code AddDeadlineTaskCommand} with the specified {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * Initializes the {@code DeadlineTaskParser} for parsing deadline-related tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The task list to which the deadline task will be added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    public AddDealineTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.deadlineTaskParser \u003d new DeadlineTaskParser();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * Executes the command to add a {@code Deadline} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * The user input is expected to be in the format: \"deadline [description] /by [date] [time]\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * where [description] is the task description, and [date] is the due date in a specific format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The input string from the user that contains the description and deadline date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *                  It should be in the format \"deadline [description] /by [date] [time]\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @return A response message indicating whether the task was successfully added or if an error occurred.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         The message includes the details of the added task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"            Deadline deadlineTask \u003d (Deadline) deadlineTaskParser.parse(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            addTaskToList(deadlineTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            return buildResponseString(deadlineTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"     * Adds the provided {@code Deadline} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     * Also checks that the task list is not empty after adding the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * @param deadlineTask The deadline task to be added to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    private void addTaskToList(Deadline deadlineTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(deadlineTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        assert numOfTask \u003e 0 : \"The task list should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * Builds a response string to indicate the successful addition of a deadline task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * The response includes the details of the task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * @param deadlineTask The deadline task that was added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * @return A string response indicating the success of the task addition, formatted with task details.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    private String buildResponseString(Deadline deadlineTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        response.append(\"Got it. I\u0027ve added this task: \").append(\"\\n\").append(deadlineTask).append(\"\\n\")","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"                .append(\"Now you have \").append(numOfTask).append(\" tasks in the list.\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        return response.toString().trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":75}},{"path":"src/main/java/introblaise/commands/AddEventTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.EventTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Event;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * Command class that handles the addition of an Event task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * This class implements the {@code TaskCommand} interface and performs the necessary","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * parsing and validation to add a {@code Event} task to the {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"public class AddEventTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final EventTaskParser eventTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs an {@code AddEventTaskCommand} with the specified {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * Initializes the {@code EventTaskParser} for parsing event-related tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The task list to which the event task will be added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    public AddEventTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.eventTaskParser \u003d new EventTaskParser();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * Executes the command to add a {@code Event} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * The user input is expected to be in the format: \"event [description] /from [date] [time] /to [date] [time]\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * where [description] is the task description, and [date] is the event duration in a specific format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The input string from the user that contains the description and deadline date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     *                  It should be in the format \"event [description] /from [date] [time] /to [date] [time]\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * @return A response message indicating whether the task was successfully added or if an error occurred.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *         The message includes the details of the added task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"            Event eventTask \u003d (Event) eventTaskParser.parse(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"            addTaskToList(eventTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            return buildResponseString(eventTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            return \"Please enter a description and a duration for your task in the format: \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"                    + \"event [DESCRIPTION] /from [dd-mm-yyyy HHmm] /to [dd-mm-yyyy HHmm]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     * Adds the provided {@code Event} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * Also checks that the task list is not empty after adding the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * @param eventTask The event task to be added to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    private void addTaskToList(Event eventTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"        assert numOfTask \u003e 0 : \"The task list should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * Builds a response string to indicate the successful addition of an event task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * The response includes the details of the task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * @param eventTask The event task that was added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * @return A string response indicating the success of the task addition, formatted with task details.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    private String buildResponseString(Event eventTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize(); // no of task in task list","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        assert numOfTask \u003e 0 : \"The task list should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        String response \u003d \"Got it. I\u0027ve added this task: \" + \"\\n\" + eventTask","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"                + \"\\n\" + \"Now you have \" + numOfTask + \" tasks in the list.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        return response.trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":76}},{"path":"src/main/java/introblaise/commands/AddToDoTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.ToDoTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.ToDo;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * Command class that handles the addition of a ToDo task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * This class implements the {@code TaskCommand} interface and performs the necessary","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * parsing and validation to add a {@code ToDo} task to the {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"public class AddToDoTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final ToDoTaskParser toDoTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs an {@code AddToDoTaskCommand} with the specified {@code TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * Initializes the {@code ToDoParser} for parsing todo-related tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The task list to which the todo task will be added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    public AddToDoTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.toDoTaskParser \u003d new ToDoTaskParser();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * Executes the command to add a {@code ToDo} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * The user input is expected to be in the format: \"todo [description]\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * where [description] is the task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The input string from the user that contains the description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *                  It should be in the format \"todo [description]\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @return A response message indicating whether the task was successfully added or if an error occurred.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         The message includes the details of the added task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"            ToDo todoTask \u003d (ToDo) toDoTaskParser.parse(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            addTaskToList(todoTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            return buildResponseString(todoTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            return \"Errr...Please enter a description...It should be in the format: todo [DESCRIPTION]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     * Adds the provided {@code ToDo} task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * Also checks that the task list is not empty after adding the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * @param toDoTask The todo task to be added to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    private void addTaskToList(ToDo toDoTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(toDoTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getTasksList().size();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"        assert numOfTask \u003e 0 : \"The task list should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * Builds a response string to indicate the successful addition of a todo task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * The response includes the details of the task and the current number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * @param toDoTask The todo task that was added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * @return A string response indicating the success of the task addition, formatted with task details.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    private String buildResponseString(ToDo toDoTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        String response \u003d \"Got it. I\u0027ve added this task: \" + \"\\n\" + toDoTask + \"\\n\"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"                + \"Now you have \" + numOfTask + \" tasks in the list.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        return response.trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":76}},{"path":"src/main/java/introblaise/commands/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * The {@code ClearCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * and is responsible for clearing the task list. This command removes everything","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * from the task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"public class ClearCommand implements TaskCommand {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code ClearCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} to be deleted.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    public ClearCommand(TaskList taskList) {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"clear\" command. This method clears all tasks from the task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"clear\".","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming the task list has been cleared.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        taskList.clearTaskList();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        return \"Yay! Your task list has been cleared!\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-19","isFullCredit":false}],"authorContributionMap":{"jniaorx":33}},{"path":"src/main/java/introblaise/commands/CommandFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.HashMap;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.util.Map;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.CommandParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code CommandFactory} class is responsible for creating and registering","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * instances of {@link TaskCommand} implementations. It maintains a map of","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * command names to their corresponding command objects, which can then be","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * accessed by the {@link CommandParser} to execute user commands.  This class","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" * uses the provided {@link TaskList} to inject the necessary dependencies","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" * into the command objects.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"public class CommandFactory {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    private final Map\u003cString, TaskCommand\u003e commandMap;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code CommandFactory} with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} instance to be used by the commands.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     *                 This is typically the same {@link TaskList} used by the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     *                 main application.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    public CommandFactory(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        this.commandMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * Initializes the command map by registering all available commands.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * This method creates instances of each {@link TaskCommand} implementation","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * and associates them with their corresponding command names (e.g., \"list\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * \"todo\", \"deadline\").  The {@link TaskList} is provided to the commands","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     * that require it.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"    public void initializeCommandMap() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"list\", new ListTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"mark\", new MarkTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"unmark\", new UnmarkTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"todo\", new AddToDoTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"deadline\", new AddDealineTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"event\", new AddEventTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"delete\", new DeleteTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"tasks\", new GetTasksOnDateCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"find\", new FindTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"tag\", new TagTaskCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"untag\", new RemoveTagCommand(taskList));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"help\", new HelpCommand());","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        commandMap.put(\"clear\", new ClearCommand(taskList));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     * Returns the map of command names to {@link TaskCommand} objects.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * This map is used by the {@link CommandParser} to look up and execute","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     * commands based on user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * @return The map of commands.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    public Map\u003cString, TaskCommand\u003e getCommandMap() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"        return commandMap;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":66}},{"path":"src/main/java/introblaise/commands/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.DeleteEmptyTaskListException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code DeleteTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"delete\" command. This command removes a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * specific task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class DeleteTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code DeleteTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} from which tasks will be deleted.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    public DeleteTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"delete\" command. This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * the task number (index), retrieves the corresponding task from the task list,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * removes the task, and then builds a formatted string to inform the user","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * about the deletion.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"delete x\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *                  where \u0027x\u0027 is the index (starting from 1) of the task to be deleted.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming the task deletion, or an error message","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *         if the input is invalid (e.g., invalid index, empty task list).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @throws DeleteEmptyTaskListException If the task list is empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException    If the provided task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException       If the task index cannot be parsed as a number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            if (taskList.getTasksList().isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"                throw new DeleteEmptyTaskListException(\"Your task list is empty. You can\u0027t delete anything. \"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"                        + \"Please add tasks.\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d extractTaskNo(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d getTaskByTaskNo(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            deleteTask(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            return buildResponseString(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"        } catch (DeleteEmptyTaskListException | InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid index. Have you entered the index? Are you sure \"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"                    + \"you are deleting the correct task? It should be in the format: delete [TASKNUMBER]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid number. Please enter a number after \u0027delete\u0027.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: delete [TASKNUMBER]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number (index) from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (0-based index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    private int extractTaskNo(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTaskNumber(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * @param taskNo The index of the task (0-based).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the task number is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    private Task getTaskByTaskNo(int taskNo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003e\u003d 0 : \"Task number must be non-negative\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003c taskList.getSize() : \"Task number must not exceed size of task list\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        return taskList.getTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     * Removes the specified task from the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The {@link Task} object to be removed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"    private void deleteTask(Task currTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"        taskList.removeTask(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"     * Builds the formatted string response to inform the user about the task deletion.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The deleted {@link Task} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"     * @return The formatted string response.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"    private String buildResponseString(Task currTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"        int numOfTask \u003d taskList.getSize();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"        String response \u003d \"Noted. I\u0027ve removed this task: \" + \"\\n\" + currTask","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"                + \"\\n\" + \"Now you have \" + numOfTask + \" tasks in the list.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"        return response.trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":106}},{"path":"src/main/java/introblaise/commands/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.List;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * The {@code FindTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"find\" command.  This command searches","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * the task list for tasks whose descriptions contain a specified keyword","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" * and displays the matching tasks to the user.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"public class FindTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code FindTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} to search within.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    public FindTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"find\" command.  This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * the keyword, searches the task list for matching tasks, and then builds a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * formatted string containing the results.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"find x\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *                  where \u0027x\u0027 is the keyword to search for.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @return A string containing the list of matching tasks, or a message","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         indicating that no matching tasks were found.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"            String keyword \u003d extractKeyword(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            List\u003cTask\u003e matchingTasks \u003d findMatchingTasks(keyword);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"                return \"Oops! No tasks found with the keyword: \" + keyword;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"            } else {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"                return buildResponseString(matchingTasks);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException | StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * Extracts the keyword from the user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * @return The keyword to search for.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the user input is invalid or does not contain a keyword.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    private String extractKeyword(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseFindKeyword(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * Searches the task list for tasks whose descriptions contain the specified keyword.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     * @return A list of {@link Task} objects whose descriptions contain the keyword.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    private List\u003cTask\u003e findMatchingTasks(String keyword) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        return taskList.findTasksByKeyword(keyword);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     * Builds a formatted string containing the list of matching tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"     * @param matchingTasks The list of {@link Task} objects to format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string containing the list of matching tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"    private String buildResponseString(List\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"        response.append(\"Here are the matching tasks in your list:\").append(\"\\n\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"            Task task \u003d matchingTasks.get(i);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"            response.append((i + 1)).append(\". \").append(task).append(\"\\n\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"        return response.toString().trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":91}},{"path":"src/main/java/introblaise/commands/GetTasksOnDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyDateException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * The {@code GetTasksOnDateCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"tasks on\" command. This command retrieves","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" * and displays tasks from the task list that are scheduled for a specific date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"public class GetTasksOnDateCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code GetTasksOnDateCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} to retrieve tasks from.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    public GetTasksOnDateCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"tasks on\" command. This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * the date, formats it, retrieves the tasks scheduled for that date from the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * task list, and then builds a formatted string containing the list of tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"tasks on d-MM-yyyy\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * @return A string containing the list of tasks scheduled for the specified date,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *         or an error message if the input is invalid (e.g., invalid date format,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         missing date).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * @throws DateTimeParseException If the date part of the user input cannot be parsed","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     *                                  as a date in the \"d-MM-yyyy\" format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * @throws EmptyDateException     If no date is provided after \"tasks on\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            String taskDateStr \u003d extractStringDate(userInput);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            LocalDate formattedDate \u003d convertDateStr(taskDateStr);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            return getTasksForDate(formattedDate);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            return \"Invalid date format. Please enter the date in d-MM-yyyy format.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"        } catch (EmptyDateException | InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     * Parses a date string from the user input.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     * @return The date string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * @throws EmptyDateException If no date is provided.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    private String extractStringDate(String userInput) throws EmptyDateException, InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"            String date \u003d userInput.substring(9).trim();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"            if (date.isEmpty()) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"                throw new EmptyDateException(\"Please enter a date! It should be in the format: tasks on [dd-mm-yyyy]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"            if (date.contains(\" \")) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"                date \u003d date.split(\" \")[0];","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"            return date;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please enter a date! It should be in the format: tasks on [dd-mm-yyyy]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"     * Convert the date string into a {@link LocalDate} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"     * @param dateString The date string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link LocalDate} object representing the parsed date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"    private LocalDate convertDateStr(String dateString) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertDateString(dateString);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     * Retrieves and formats the tasks for the specified date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     * @param formattedDate The date for which to retrieve tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * @return A string containing the formatted list of tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    private String getTasksForDate(LocalDate formattedDate) throws EmptyDateException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        return taskList.printTasksForDate(formattedDate);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":96}},{"path":"src/main/java/introblaise/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * The {@code HelpCommand} class provides a list of available commands","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * for the IntroBlaise task management application.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" *","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * This command helps users understand the valid inputs they can use","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * to interact with the application.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"public class HelpCommand implements TaskCommand {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"     * Executes the help command and returns a list of valid commands.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input (not used in this command).","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string containing a list of valid commands.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"        return helpCommands();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * Returns a formatted list of all valid commands for the application.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @return A string containing the list of valid commands.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    private String helpCommands() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        return \"Hi! Here are the valid commands for IntroBlaise:\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"                + \"1. todo [DESCRIPTION]: Add a To-Do task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"                + \"2. deadline [DESCRIPTION] /by [dd-mm-yyyy HHmm]: Add a Deadline task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"                + \"3. event [DESCRIPTION] /from [dd-mm-yyyy HHmm] /to [dd-mm-yyyy HHmm]: Add an Event task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"                + \"4. list: View all tasks\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"                + \"5. mark [TASKINDEX]: Mark a task as done\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"                + \"6. unmark [TASKINDEX]: Unmark a task as not done\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"                + \"7. delete [TASKINDEX]: Delete a task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"                + \"8. tasks on [dd-mm-yyyy]: Search tasks by date\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"                + \"9. find [KEYWORD]: Search tasks by keyword\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"                + \"10. tag [TASKINDEX] [LABEL]: Add a tag to a task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"                + \"11. untag [TASKINDEX]: Remove a tag from a task\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"                + \"12. clear: Clears the entire task list\\n\"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"                + \"13. help: Show this help message\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-18","isFullCredit":false}],"authorContributionMap":{"jniaorx":43}},{"path":"src/main/java/introblaise/commands/ListTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * The {@code ListTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"list\" command.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * This command displays all tasks currently stored in the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"public class ListTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code ListTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} to retrieve tasks from.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    public ListTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"list\" command.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * This method retrieves all tasks from the task list and formats them into a string for display to the user.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string (which is ignored for this command).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * @return A string containing the formatted list of tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        return taskList.printTaskList();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":33}},{"path":"src/main/java/introblaise/commands/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * The {@code MarkTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"mark\" command. This command marks a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * specific task as done in the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"public class MarkTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code MarkTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} containing the tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    public MarkTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"mark\" command. This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * the task number (index), retrieves the corresponding task from the task list,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * marks the task as done, saves the updated task list, and then builds a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * formatted string to inform the user about the update.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"mark x\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *                  where \u0027x\u0027 is the index (starting from 1) of the task to be marked.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming that the task has been marked as done,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *         or an error message if the input is invalid (e.g., invalid index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the provided task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException       If the task index cannot be parsed as a number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d extractTaskNo(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d retrieveTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            markAsDone(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            saveTask();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            return \"Well done! I\u0027ve marked this task as done: \" + \"\\n\" + currTask;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid index. Are you sure you are marking the correct task? It should be \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"                    + \"in the format: mark [TASKNUMBER]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid number. Please enter a number after \u0027unmark\u0027.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: mark [TASKNUMBER]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number (index) from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (0-based index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    private int extractTaskNo(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTaskNumber(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     * @param taskNo The index of the task (0-based).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the task number is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    private Task retrieveTask(int taskNo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003e\u003d 0 : \"Task number must be non-negative\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003c taskList.getTasksList().size() : \"Task number must not exceed size of task list\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        return taskList.getTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     * Marks the specified task as done.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The {@link Task} object to be marked as done.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"    private void markAsDone(Task currTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"        currTask.markAsDone();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * Saves the updated task list to storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    private void saveTask() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        taskList.saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":96}},{"path":"src/main/java/introblaise/commands/RemoveTagCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * The {@code RemoveTagCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"untag\" or \"removetag\" command.  This command","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * removes the tag from a specified task in the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"public class RemoveTagCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code RemoveTagCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} containing the tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    public RemoveTagCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"untag\" or \"removetag\" command. This method parses the user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * to extract the task number (index), retrieves the corresponding task,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * removes the tag from the task, saves the updated task list, and then builds","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * a formatted string to inform the user about the update.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"untag x\" or","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *                  \"removetag x\", where \u0027x\u0027 is the index (starting from 1) of","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *                  the task to remove the tag from.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming that the tag has been removed, or an","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *         error message if the input is invalid (e.g., invalid index, task","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *         is not tagged).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the provided task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException       If the task index cannot be parsed as a number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d extractTaskNo(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d retrieveTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            if (!currTask.getIsTagged()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"                return \"This task is not tagged.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            deleteTag(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            saveTask();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            return \"Tag for \" + currTask + \" has been successfully deleted!\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid index. Have you entered the correct index?\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        } catch (InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number (index) from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (0-based index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    private int extractTaskNo(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTaskNumber(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     * @param taskNo The index of the task (0-based).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the task number is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    private Task retrieveTask(int taskNo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003e\u003d 0 : \"Task number must be non-negative\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003c taskList.getTasksList().size() : \"Task number must not exceed size of task list\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        return taskList.getTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     * Removes the tag from the specified task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The {@link Task} object to remove the tag from.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"    private void deleteTag(Task currTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"        currTask.deleteTag();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * Saves the updated task list to storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    private void saveTask() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        taskList.saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":96}},{"path":"src/main/java/introblaise/commands/TagTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyLabelException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code TagTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"tag\" command. This command adds a tag","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * (label) to a specified task in the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class TagTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code TagTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} containing the tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    public TagTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"tag\" command. This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * the task number (index) and the tag label, retrieves the corresponding","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * task, adds the tag to the task, saves the updated task list, and then","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * builds a formatted string to inform the user about the update.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"tag x y\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     *                  where \u0027x\u0027 is the index (starting from 1) of the task to","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *                  be tagged, and \u0027y\u0027 is the tag label.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming that the task has been tagged, or an","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         error message if the input is invalid (e.g., invalid index, missing","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     *         label, task already tagged).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the provided task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException   If the task index cannot be parsed as a number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d extractTaskNo(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d retrieveTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            String label \u003d extractLabel(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            if (currTask.getIsTagged()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"                return \"This task is already tagged!\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            setTag(currTask, label);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"            saveTask();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"            return \"I\u0027ve tagged this task: \" + currTask;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid index. Have you entered the correct index?\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        } catch (EmptyLabelException | InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number (index) from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (0-based index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    private int extractTaskNo(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTaskNumber(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     * @param taskNo The index of the task (0-based).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the task number is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    private Task retrieveTask(int taskNo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003e\u003d 0 : \"Task number must be non-negative\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003c taskList.getTasksList().size() : \"Task number must not exceed size of task list\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"        return taskList.getTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     * Extracts the tag label from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * @return The tag label.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     * @throws EmptyLabelException If the tag label is empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"    private String extractLabel(String userInput) throws EmptyLabelException, InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTagLabel(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     * Sets the tag (label) for the specified task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The {@link Task} object to add the tag to.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"     * @param label    The tag label to set.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"    private void setTag(Task currTask, String label) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"        currTask.setTag(label);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"     * Saves the updated task list to storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"    private void saveTask() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"        taskList.saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":115}},{"path":"src/main/java/introblaise/commands/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * Command interface for all task-related operations.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"public interface TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"    String execute(String userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":8}},{"path":"src/main/java/introblaise/commands/UnmarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.commands;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.AlreadyUndoneException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code UnmarkTaskCommand} class implements the {@link TaskCommand} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * and is responsible for handling the \"unmark\" command. This command marks a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * specific task as not done (undone) in the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class UnmarkTaskCommand implements TaskCommand {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code UnmarkTaskCommand} object with the specified {@link TaskList}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * @param taskList The {@link TaskList} containing the tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    public UnmarkTaskCommand(TaskList taskList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * Executes the \"unmark\" command. This method parses the user input to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * the task number (index), retrieves the corresponding task from the task list,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * marks the task as undone, saves the updated task list, and then builds a","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * formatted string to inform the user about the update.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string, expected in the format \"unmark x\",","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     *                  where \u0027x\u0027 is the index (starting from 1) of the task to be unmarked.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * @return A string message confirming that the task has been marked as undone,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *         or an error message if the input is invalid (e.g., invalid index,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     *         task is already undone).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the provided task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException       If the task index cannot be parsed as a number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    public String execute(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d parseTaskNo(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d retrieveTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            if (!currTask.getIsDone()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"                throw new AlreadyUndoneException(\"This task has already been marked undone!\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            markAsUndone(currTask);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            saveTask();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"            return \"OK, I\u0027ve marked this task as not done yet: \" + \"\\n\" + currTask;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid index. Are you sure you are unmarking the correct task?\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"            return \"Uh oh! Invalid number. Please enter a number after \u0027unmark\u0027.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"        } catch (AlreadyUndoneException | InvalidInputException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number (index) from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (0-based index).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"    private int parseTaskNo(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.parseTaskNumber(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the task from the task list based on its index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     * @param taskNo The index of the task (0-based).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the task number is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"    private Task retrieveTask(int taskNo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003e\u003d 0 : \"Task number must be non-negative\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"        assert taskNo \u003c taskList.getTasksList().size() : \"Task number must not exceed size of task list\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"        return taskList.getTask(taskNo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     * Marks the specified task as undone.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     * @param currTask The {@link Task} object to be marked as undone.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"    private void markAsUndone(Task currTask) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"        currTask.markAsUndone();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"     * Saves the updated task list to storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"    private void saveTask() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"        taskList.saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":99}},{"path":"src/main/java/introblaise/exceptions/AlreadyUndoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * Exception class representing an error condition where an attempt is made to mark a task","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * as \"undone\" when it has already been marked as not done.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"public class AlreadyUndoneException extends IntroBlaiseException {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code AlreadyUndoneException} with the specified detail message.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message that explains the reason for this exception.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"    public AlreadyUndoneException(String exception) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":15}},{"path":"src/main/java/introblaise/exceptions/DeleteEmptyTaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * Exception class representing an error condition where an attempt is made to delete a task from an","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * empty task list.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"public class DeleteEmptyTaskListException extends IntroBlaiseException {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code introBlaise.exceptions.DeleteEmptyTaskListException} with the specified detail message.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message that explains the reason for this exception.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"    public DeleteEmptyTaskListException(String exception) {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-23","isFullCredit":false}],"authorContributionMap":{"jniaorx":15}},{"path":"src/main/java/introblaise/exceptions/EmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * The {@code EmptyDateException} class represents an exception that is thrown","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * when a required date input is missing or empty. This exception is typically","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * used when parsing user commands that require a date argument.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"public class EmptyDateException extends IntroBlaiseException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code EmptyDateException} with the specified detail message.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message. The detail message is saved for later","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     *                retrieval by the {@link #getMessage()} method.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    public EmptyDateException(String exception) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":19}},{"path":"src/main/java/introblaise/exceptions/EmptyLabelException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * The {@code EmptyLabelException} class represents an exception that is thrown","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * when a required label input is missing or empty. This exception is typically","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * used when parsing user commands that require a label argument, such as","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * tagging a task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"public class EmptyLabelException extends IntroBlaiseException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code EmptyLabelException} with the specified detail message.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message. The detail message is saved for later","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     *                retrieval by the {@link #getMessage()} method.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    public EmptyLabelException(String exception) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":20}},{"path":"src/main/java/introblaise/exceptions/EmptyTaskListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * Exception class representing an error condition where an attempt is made to print","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * an empty task list.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"public class EmptyTaskListException extends IntroBlaiseException {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code introBlaise.exceptions.EmptyTaskListException} with the specified detail message.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message that explains the reason for this exception.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"    public EmptyTaskListException(String exception) {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-23","isFullCredit":false}],"authorContributionMap":{"jniaorx":15}},{"path":"src/main/java/introblaise/exceptions/IntroBlaiseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * A custom exception class for the introBlaise.ui.IntroBlaise bot.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * The {@code introBlaise.exceptions.IntroBlaiseException} class is used to represent application-specific errors","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * that may occur during the execution of the introBlaise.ui.IntroBlaise program.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"public class IntroBlaiseException extends Exception {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new introBlaise.exceptions.IntroBlaiseException with the specified detail message.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message that explains the reason for this exception.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"    public IntroBlaiseException(String exception) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":18}},{"path":"src/main/java/introblaise/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.exceptions;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":" * Exception class representing an error condition where user inputs","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * an invalid command.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"public class InvalidInputException extends IntroBlaiseException {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code InvalidInputException} with the specified detail message.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"     * @param exception The detail message that explains the reason for this exception.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    public InvalidInputException(String exception) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"        super(exception);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-23","isFullCredit":false}],"authorContributionMap":{"jniaorx":14}},{"path":"src/main/java/introblaise/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.gui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.util.Collections;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import javafx.beans.binding.Bindings;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.Node;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":" * and a label containing text from the speaker.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    private Label dialog;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(introblaise.gui.MainWindow.class.getResource(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"                    \"/view/DialogBox.fxml\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"            fxmlLoader.load();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"        // Set text and image","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        dialog.setText(text);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        makeCircular(displayPicture);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        // Add CSS classes","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        this.getStyleClass().add(\"dialog-box\"); // Style for the entire HBox","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        dialog.getStyleClass().add(\"chat-label\"); // Style for the label (chat bubble)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        displayPicture.getStyleClass().add(\"image-view\"); // Style for the profile picture","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    private void makeCircular(ImageView imageView) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        Circle clip \u003d new Circle();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        clip.centerXProperty().bind(imageView.fitWidthProperty().divide(2));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        clip.centerYProperty().bind(imageView.fitHeightProperty().divide(2));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"        clip.radiusProperty().bind(Bindings.min(imageView.fitWidthProperty(), imageView.fitHeightProperty()).divide(2));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        imageView.setClip(clip);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     * Sets the style for the dialog box (user or bot).","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    public void setDialogStyle(String styleClass) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"        dialog.getStyleClass().add(styleClass); // Apply the specific style (user or bot)","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    private void flip() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        db.setDialogStyle(\"user-dialog\"); // Apply user-dialog style","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        return db;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"        db.setDialogStyle(\"bot-dialog\"); // Apply bot-dialog style","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"        db.flip();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"        return db;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":87}},{"path":"src/main/java/introblaise/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.gui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"public class Launcher {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":13}},{"path":"src/main/java/introblaise/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.gui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.util.Objects;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.ui.IntroBlaise;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.ui.Ui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":" * A GUI for IntroBlaise using FXML.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"public class Main extends Application {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    private IntroBlaise introBlaise \u003d new IntroBlaise();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"            stage.setScene(scene);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"            // Get the MainWindow controller","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"            MainWindow controller \u003d fxmlLoader.getController();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"            controller.setIntroBlaise(introBlaise); // Inject the IntroBlaise instance","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"            controller.showWelcomeMessage(ui); // Show the welcome message in the GUI","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/css/styles.css\"))","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"                    .toExternalForm());","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"            stage.setTitle(\"IntroBlaise\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"            stage.getIcons().add(new Image(String.valueOf(Objects.requireNonNull(getClass()","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"                    .getResource(\"/images/IntroBlaisePfp.png\")))));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"            stage.show();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":45}},{"path":"src/main/java/introblaise/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.gui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.Objects;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.ui.IntroBlaise;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.ui.Ui;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import javafx.application.Platform;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":" * Controller for the main GUI.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    private TextField userInput;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    private Button sendButton;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    private Label welcomeLabel; // Label for welcome message","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    private IntroBlaise introBlaise;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"    private Image userImage \u003d new Image(Objects.requireNonNull(","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"            this.getClass().getResourceAsStream(\"/images/UserPfp.png\")));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    private Image dukeImage \u003d new Image(Objects.requireNonNull(","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"            this.getClass().getResourceAsStream(\"/images/IntroBlaisePfp.png\")));","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * Initializes scroll pane and loads CSS file.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"    public void initialize() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        // Load CSS file","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        String cssUrl \u003d Objects.requireNonNull(getClass().getResource(\"/css/styles.css\")).toExternalForm();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        getStylesheets().add(cssUrl);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    /** Injects the IntroBlaise instance */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    public void setIntroBlaise(IntroBlaise intro) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"        introBlaise \u003d intro;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * Displays the welcome message from the Ui object in the welcome label.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     * This method calls the {@link Ui#showWelcome()} method to retrieve the welcome message","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     * and then sets it as the text of the welcome label in the GUI.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * @param ui The ui instance that generated the welcome message to be displayed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    public void showWelcomeMessage(Ui ui) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"        welcomeLabel.setText(ui.showWelcome());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    @FXML","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    private void handleUserInput() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        String response \u003d introBlaise.getResponse(input);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        userInput.clear();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"        if (input.trim().equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"            Platform.exit();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":85}},{"path":"src/main/java/introblaise/parsers/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.Map;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.commands.CommandFactory;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.commands.TaskCommand;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code CommandParser} class handles the execution of user commands in the IntroBlaise bot.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * It interprets user inputs, extracts the command, retrieves the corresponding {@link TaskCommand}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * from the command map, and executes the command.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class CommandParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final Map\u003cString, TaskCommand\u003e commandMap;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code CommandParser} with a map of commands.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * This map associates command names with their corresponding {@link TaskCommand} instances.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @param commandMap The map of commands to be used by this parser.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     *                   This map is typically provided by a {@link CommandFactory}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    public CommandParser(Map\u003cString, TaskCommand\u003e commandMap) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        this.commandMap \u003d commandMap;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     * Executes a command based on the user\u0027s input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     * This method parses the user input, extracts the command name,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * associated {@link TaskCommand} from the command map, and then","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * {@code execute()} method to perform the desired action.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user\u0027s input string, which should contain the command name","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *                  followed by necessary arguments.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @return A string response generated by the executed command, or an error message","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     *         if the command is invalid or an error occurs during execution.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    public String executeCommand(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        String command \u003d UtilParser.parseCommand(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        TaskCommand taskCommand \u003d getCommand(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        if (taskCommand \u003d\u003d null) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"            return new InvalidInputException(\"Err...I don\u0027t understand this :(. Please give a valid command! \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"                    + \"Type \\\"help\\\" if you need guidance!\")","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"                    .getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"        return taskCommand.execute(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * Retrieves a {@link TaskCommand} from the command map based on the command name.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * @param command The name of the command to retrieve.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link TaskCommand} associated with the given command, or {@code null}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     *         if no such command is found.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    private TaskCommand getCommand(String command) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"        return commandMap.get(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":64}},{"path":"src/main/java/introblaise/parsers/DeadlineTaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Deadline;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code DeadlineTaskParser} class is responsible for parsing user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * to create {@link Deadline} tasks. It implements the {@link TaskParser} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * and handles the specific format required for deadline task creation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class DeadlineTaskParser implements TaskParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * Parses the user input to create a {@link Deadline} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * The expected format of the user input is:","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * {@code deadline x /by date}, where \u0027x\u0027 is the task description and \u0027date\u0027","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * is the deadline date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * Example: {@code deadline Finish project /by 2024-03-15 23:59}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link Deadline} task object created from the parsed input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the user input does not conform to the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     *                                 expected format, or if required information","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     *                                 (description or deadline) is missing.  Specifically,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     *                                 this exception is thrown if the description is empty","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     *                                 or if the /by date is missing.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"    public Task parse(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"        String description \u003d parseDescription(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"        String dateTime \u003d parseDateTime(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        return new Deadline(description, dateTime);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     * Parses the task description from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     * The description is extracted from the substring after \"deadline\" and before \"/by\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     * @return The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the description is empty or not found in the correct location.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    private String parseDescription(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            String description \u003d userInput.substring(8, userInput.indexOf(\"/\")).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"            assert (!description.isEmpty()) : \"The description should not be empty.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: deadline [DESCRIPTION]\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"                throw new InvalidInputException(\"Please enter a description for your deadline task.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"                        + \"It should be in the format: deadline [DESCRIPTION] /by [dd-mm-yyyy] [HHmm]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"            return description;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please enter a description for your deadline task.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: deadline [DESCRIPTION] /by [dd-mm-yyyy] [HHmm]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * Parses the deadline date and time from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * The date and time are extracted from the substring after \"/by\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     * @return The deadline date and time string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the deadline date and time are missing or empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"    private String parseDateTime(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"            int separator \u003d userInput.indexOf(\"/\") + 4;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"            String dateTime \u003d userInput.substring(separator).trim();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"            if (dateTime.isEmpty()) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"                throw new InvalidInputException(\"There seems to be no deadline entered...? \"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"                        + \"Please enter a deadline after the word /by.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"                        + \" It should be in the format: deadline [DESCRIPTION] /by [dd-mm-yyyy] [HHmm]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"            try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"                UtilParser.convertFormattedDateTime(dateTime);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"                throw new InvalidInputException(\"Invalid date-time format: \\\"\" + dateTime","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"                        + \"\\\". Please input your date and time in the format: d-MM-yyyy HHmm.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"            return dateTime;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please input in the format of \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"                    + \"deadline [DESCRIPTION] /by [dd-mm-yyyy] [HHmm]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":95}},{"path":"src/main/java/introblaise/parsers/EventTaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Event;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * The {@code EventTaskParser} class is responsible for parsing user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * to create {@link Event} tasks. It implements the {@link TaskParser} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * and handles the specific format required for event task creation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class EventTaskParser implements TaskParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * Parses the user input to create an {@link Event} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * The expected format of the user input is:","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * {@code event x /from date /to date}, where \u0027x\u0027 is the task description,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * \u0027date\u0027 after \u0027/from\u0027 is the start date and time of the event, and \u0027date\u0027","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * after \u0027/to\u0027 is the end date and time of the event.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * Example: {@code event Meeting with John /from 2024-03-15 1000 /to 2024-03-15 1200}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @return An {@link Event} task object created from the parsed input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the user input does not conform to the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     *                                 expected format, or if required information","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     *                                 (description, from date/time, or to date/time)","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     *                                 is missing or invalid. Specifically, this","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     *                                 exception is thrown if the description is empty,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *                                 if either the /from or /to dates are missing,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *                                 or if they are empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    public Task parse(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        String description \u003d parseDescription(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"        String from \u003d parseFromDateTime(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"        String to \u003d parseToDateTime(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        return new Event(description, from, to);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     * Parses the task description from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     * The description is extracted from the substring after \"event\" and before \"/from\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"     * @return The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the description is empty or not found in the correct location.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    private String parseDescription(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        String description \u003d userInput.substring(5, userInput.indexOf(\"/\")).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        assert (!description.isEmpty()) : \"The description should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please enter a description for your task!\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        return description;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * Parses the \u0027from\u0027 date and time from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * The date and time are extracted from the substring after \"/from\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * @return The \u0027from\u0027 date and time string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the \u0027/from\u0027 date and time are missing or empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    private String parseFromDateTime(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"        if (!userInput.contains(\"/from\")) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please include a \u0027From\u0027 date and time by using /from! \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"                    + \"The date and time should be in the format: dd-mm-yyyy HHmm!\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        String[] parts \u003d userInput.split(\"/\", 3);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        String from \u003d parts[1].substring(4).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"        if (from.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please include a \u0027From\u0027 date after the word /from! \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"                    + \"The date and time should be in the format: dd-mm-yyyy HHmm!\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"            UtilParser.convertFormattedDateTime(from);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Invalid date-time format: \\\"\" + from","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"                    + \"\\\". It should be in the format: \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"                    + \"event [DESCRIPTION] /from [dd-mm-yyyy HHmm] /to [dd-mm-yyyy HHmm]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"        return from;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * Parses the \u0027to\u0027 date and time from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     * The date and time are extracted from the substring after \"/to\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"     * @return The \u0027to\u0027 date and time string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the \u0027/to\u0027 date and time are missing or empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"    private String parseToDateTime(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"        if (!userInput.contains(\"/to\")) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please include a \u0027To\u0027 date and time by using /to!\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"        String[] parts \u003d userInput.split(\"/\", 3);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"        String to \u003d parts[2].substring(2).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"        if (to.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please include a \u0027To\u0027 date and time after the word /to!\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"            UtilParser.convertFormattedDateTime(to);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Invalid date-time format: \\\"\" + to","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"                    + \"\\\". Please input your date and time in the format: d-MM-yyyy HHmm.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"        return to;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":116}},{"path":"src/main/java/introblaise/parsers/StorageTaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Deadline;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Event;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.ToDo;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * The {@code StorageTaskParser} class provides utility methods for converting","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * {@link Task} objects to their string representations for storage and vice-versa.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * It handles the specific format used for saving tasks to a file and loading them","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * back into the application.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class StorageTaskParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * Converts a {@link Task} object to its string representation for storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * The string format depends on the type of the task (ToDo, Deadline, or Event).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * The format includes the task type, completion status, description, and optionally,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * the tag label.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @param task The {@link Task} object to convert.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    public static String taskToString(Task task) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"        boolean isDone \u003d task.getIsDone();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        boolean isTagged \u003d task.getIsTagged();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        String isDoneStr \u003d getBooleanAsString(isDone);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        String isTaggedStr \u003d getBooleanAsString(isTagged);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        String taskDescription \u003d task.getDescription();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        String tagLabel \u003d task.getTag();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"        String base \u003d getTaskBaseString(task, taskDescription, isDoneStr, isTaggedStr, tagLabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"        return base;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * Converts a boolean value to its string representation (\"1\" for true, \"0\" for false).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     * @param value The boolean value.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     * @return \"1\" if the value is true, \"0\" if the value is false.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"    private static String getBooleanAsString(boolean value) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        return value ? \"1\" : \"0\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"     * Generates the base string representation of a task, excluding the tag information.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"     * This string includes the task type, completion status, and description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     * @param task        The {@link Task} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     * @param isDoneStr   The string representation of the completion status (\"1\" or \"0\").","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     * @return The base string representation of the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    private static String getTaskBaseString(Task task, String description, String isDoneStr, String isTaggedStr,","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"                                            String taglabel) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        if (task instanceof ToDo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"            return buildToDoSring(description, isDoneStr, isTaggedStr, taglabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"            Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"            return buildDeadlineString(description, isDoneStr, deadlineTask.getDateTimeStr(), isTaggedStr, taglabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"            Event eventTask \u003d (Event) task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"            return buildEventString(description, isDoneStr, eventTask.getFrom(), eventTask.getTo(),","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"                    isTaggedStr, taglabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"        return null;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     * Builds the string representation of a {@link ToDo} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     * @param isDoneStr   The string representation of the completion status.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     * @return The string representation of the ToDo task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    private static String buildToDoSring(String description, String isDoneStr, String isTaggedStr, String tagLabel) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"        return String.format(\"T | %s | %s | %s | %s\", isDoneStr, description, isTaggedStr, tagLabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * Builds the string representation of a {@link Deadline} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     * @param isDoneStr   The string representation of the completion status.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The string representation of the deadline date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     * @return The string representation of the Deadline task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    private static String buildDeadlineString(String description, String isDoneStr, String dateTimeStr,","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"                                              String isTaggedStr, String tagLabel) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"        return String.format(\"D | %s | %s | %s | %s | %s\", isDoneStr, description, dateTimeStr, isTaggedStr, tagLabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     * Builds the string representation of an {@link Event} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     * @param description The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"     * @param isDoneStr   The string representation of the completion status.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"     * @param fromStr     The string representation of the event start date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"     * @param toStr       The string representation of the event end date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     * @return The string representation of the Event task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"    private static String buildEventString(String description, String isDoneStr, String fromStr, String toStr,","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"                                           String isTaggedStr, String tagLabel) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"        return String.format(\"E | %s | %s | %s to %s | %s | %s\", isDoneStr, description, fromStr, toStr, isTaggedStr,","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"                tagLabel);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"     * Converts a string representation of a task (loaded from storage) into a {@link Task} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"     * This method parses the string and creates the appropriate {@link Task} subclass","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"     * (ToDo, Deadline, or Event).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"     * @param line The string representing a task, as loaded from storage.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"     * @return The {@link Task} object represented by the string, or {@code null} if the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"     *         string cannot be parsed or represents an unknown task type.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"    public static Task stringToTask(String line) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"            String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"            if (parts.length \u003c 3) { // Adjust length check","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"                System.out.println(\"There is currently no tasks to be done.\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"                return null;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"            Task task \u003d createTaskFromParts(parts);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"                applyTaskMetaData(task, parts);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"            return task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"Error parsing task line: \" + e.getMessage());","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"            return null;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jniaorx"},"content":"     * Creates a {@link Task} object based on the parsed parts of the task string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jniaorx"},"content":"     * This method determines the task type and creates the corresponding {@link Task}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jniaorx"},"content":"     * subclass (ToDo, Deadline, or Event).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jniaorx"},"content":"     * @param parts The array of strings representing the parts of the task string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jniaorx"},"content":"     * @return The created {@link Task} object, or {@code null} if the task type is unknown.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jniaorx"},"content":"    private static Task createTaskFromParts(String[] parts) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jniaorx"},"content":"        String taskType \u003d parts[0].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"jniaorx"},"content":"        String taskDescription \u003d parts[2].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jniaorx"},"content":"        switch (taskType) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jniaorx"},"content":"        case \"T\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jniaorx"},"content":"            return new ToDo(taskDescription);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jniaorx"},"content":"        case \"D\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jniaorx"},"content":"            String deadlineDate \u003d parts[3].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"jniaorx"},"content":"            return new Deadline(taskDescription, deadlineDate);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jniaorx"},"content":"        case \"E\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jniaorx"},"content":"            String eventDate \u003d parts[3].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jniaorx"},"content":"            String[] eventDetails \u003d eventDate.split(\" to \");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jniaorx"},"content":"            return new Event(taskDescription, eventDetails[0], eventDetails[1]);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jniaorx"},"content":"        default:","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jniaorx"},"content":"            return null;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"jniaorx"},"content":"     * Applies the task metadata (completion status and tag) to the created {@link Task} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"jniaorx"},"content":"     * @param task  The {@link Task} object to apply the metadata to.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"jniaorx"},"content":"     * @param parts The array of strings representing the parts of the task string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"jniaorx"},"content":"    public static void applyTaskMetaData(Task task, String[] parts) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"jniaorx"},"content":"        String isDone \u003d parts[1].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jniaorx"},"content":"        String isTagged \u003d parts[parts.length - 2].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"jniaorx"},"content":"        String label \u003d parts[parts.length - 1].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jniaorx"},"content":"        if (\"1\".equals(isDone)) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"jniaorx"},"content":"            task.markAsDone();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jniaorx"},"content":"        if (\"1\".equals(isTagged)) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jniaorx"},"content":"            task.setTag(label);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":184}},{"path":"src/main/java/introblaise/parsers/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * The {@code TaskParser} interface defines the contract for classes that parse user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * and create {@link Task} objects.  Implementations of this interface are responsible for","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * handling the specific syntax and format of user commands for different task types","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * (e.g., ToDo, Deadline, Event).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"public interface TaskParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Parses the user input string and creates a {@link Task} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     * The specific format of the user input is determined by the implementing class.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * This method is responsible for validating the input and extracting the necessary","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * information to create the appropriate {@link Task} instance.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * Implementations should throw an {@link InvalidInputException} if the user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * is invalid or cannot be parsed. The exception message should provide specific","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * details about the error, such as missing arguments or incorrect formatting.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string representing the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link Task} object created from the parsed input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the user input is invalid or cannot be parsed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    Task parse(String userInput) throws InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":28}},{"path":"src/main/java/introblaise/parsers/ToDoTaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.ToDo;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * The {@code ToDoTaskParser} class is responsible for parsing user input","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * to create {@link ToDo} tasks. It implements the {@link TaskParser} interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * and handles the specific format required for todo task creation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"public class ToDoTaskParser implements TaskParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Parses the user input to create a {@link ToDo} task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     * The expected format of the user input is:","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     * {@code todo x}, where \u0027x\u0027 is the task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Example: {@code todo Buy groceries}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link ToDo} task object created from the parsed input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the user input does not conform to the","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     *                                 expected format, or if the description","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     *                                 is missing or empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    public Task parse(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        String description \u003d parseDescription(userInput);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        return new ToDo(description);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * Parses the task description from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * The description is extracted from the substring after \"todo\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @return The task description.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If the description is empty or not found.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    private String parseDescription(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        String description \u003d userInput.substring(5).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        assert (!description.isEmpty()) : \"The description should not be empty.\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please enter a description for your todo task!\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: todo [DESCRIPTION]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        return description;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":48}},{"path":"src/main/java/introblaise/parsers/UtilParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.parsers;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyLabelException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.InvalidInputException;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * The {@code UtilParser} class provides utility methods for parsing various","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * components of user input, such as task numbers, keywords, dates, and command names.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * These methods are used by other parser classes and command handlers to extract","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" * and validate specific parts of the user\u0027s input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"public class UtilParser {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Parses the task number from the user input. The task number is expected to be","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * the second word in the input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @return The task number (index-based, starting from 0).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @throws NumberFormatException If the task number cannot be parsed as an integer.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @throws IndexOutOfBoundsException If the user input does not contain a task number.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    public static int parseTaskNumber(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"            String[] parts \u003d userInput.split(\" \");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"            String tasNoStr \u003d parts[1];","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"            int taskNo \u003d Integer.parseInt(tasNoStr) - 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"            return taskNo;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please enter the correct task number. \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: [COMMAND] [TASKNUMBER]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * Parses the keyword for the find command from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     * The keyword is expected to be the substring after \"find\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"     * @return The keyword to search for.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     * @throws InvalidInputException If no keyword is provided after \"find\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    public static String parseFindKeyword(String userInput) throws InvalidInputException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            String keyword \u003d userInput.substring(5).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            if (keyword.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"                throw new InvalidInputException(\"Please provide a keyword to search.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"                        + \" It should be in the format: find [KEYWORD]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            return keyword;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        } catch (StringIndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Please provide a keyword to search.\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"                    + \" It should be in the format: find [KEYWORD]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * Extracts the date part from a date and time string.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * This method assumes that if the input string contains a space, the date part","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * is the substring before the first space.  If no space is present, the entire","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * input string is considered to be the date.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     * This method does *not* validate the format of the extracted date string.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * It simply isolates the part of the string before the first space (if any).","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The date and time string.  This string may contain","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     *                    both the date and time, separated by a space, or it","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     *                    may contain only the date.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * @return The date part of the input string.  This will be the substring","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     *         before the first space, or the entire input string if no space","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     *         is present.  The returned string may contain leading or trailing","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     *         whitespace, which should be handled by the calling method if","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     *         necessary.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"    public static String extractStringDate(String dateTimeStr) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"        if (dateTimeStr.contains(\" \")) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"            dateTimeStr \u003d dateTimeStr.split(\" \")[0];","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        return dateTimeStr;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     * Parses a date string in the format \"d-MM-yyyy\" into a {@link LocalDate} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     * @param dateString The date string in \"d-MM-yyyy\" format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link LocalDate} object representing the parsed date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    public static LocalDate convertDateString(String dateString) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-MM-yyyy\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(dateString, formatter);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        return formattedDate;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     * Converts a date and time string in the format \"d-MM-yyyy HHmm\" into a {@link LocalDateTime} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The date and time string in \"d-MM-yyyy HHmm\" format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link LocalDateTime} object representing the parsed date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"    public static LocalDateTime convertFormattedDateTime(String dateTimeStr) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d-MM-yyyy HHmm\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"        LocalDateTime formattedDateTime \u003d LocalDateTime.parse(dateTimeStr, formatter);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"        return formattedDateTime;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"     * Formats a {@link LocalDateTime} object into a string representation","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"     * using the format \"MMM dd yyyy HHmm\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"     * @param formattedDateTime The {@link LocalDateTime} object to format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"     * @return The formatted date and time string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"    public static String convertStringDateTimeFromFormatted(LocalDateTime formattedDateTime) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"        return formattedDateTime.format(formatter);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"     * Parses the tag label from the user input.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"     * The expected format is \"tag [taskNumber] [label]\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"     * @return The tag label.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"     * @throws EmptyLabelException If no label is provided.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"    public static String parseTagLabel(String userInput) throws EmptyLabelException, InvalidInputException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"        String[] parts \u003d userInput.split(\" \", 3);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"        if (parts.length !\u003d 3) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"            throw new InvalidInputException(\"Invalid input format. It should be in the format: \"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jniaorx"},"content":"                    + \"tag [TASKNUMBER] [LABEL]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"        String label \u003d parts[2].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jniaorx"},"content":"        if (label.isEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jniaorx"},"content":"            throw new EmptyLabelException(\"Please enter a label for your tag!\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jniaorx"},"content":"                    + \"It should be in the format: tag [TASKNUMBER] [LABEL]\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jniaorx"},"content":"        return label;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jniaorx"},"content":"     * Parses the command name from the user input. The command name is expected to be","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jniaorx"},"content":"     * the first word in the input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jniaorx"},"content":"     * @param userInput The user input string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jniaorx"},"content":"     * @return The command name (in lowercase and trimmed).","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jniaorx"},"content":"    public static String parseCommand(String userInput) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jniaorx"},"content":"        String[] parts \u003d userInput.split(\" \");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jniaorx"},"content":"        String command \u003d parts[0].toLowerCase().trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jniaorx"},"content":"        return command;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"jniaorx":155}},{"path":"src/main/java/introblaise/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.storage;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import java.io.FileReader;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import java.nio.file.Files;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import java.nio.file.Path;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"import java.util.List;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"import java.util.Objects;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.StorageTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":" * Handles the storage operations for tasks, including creating, loading, saving, and handling corrupted files.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":" * This class ensures that the necessary files and directories exist, and it provides functionality to read and","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":" * write tasks to a text file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"public class Storage {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    // Path for the directory where tasks will be stored","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    private static final String DIRECTORY_PATH \u003d \"data\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    // Path for the file containing tasks","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    private static final String FILE_PATH \u003d \"data/introBlaise.txt\";","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * Constructor that initializes the Storage object by ensuring the directory and file exist,","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * If they do not exist, it creates them.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    public Storage() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        createFile();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     * Creates the necessary directory and file if they do not already exist.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     * The directory is created at \"data\" and the file is created at \"data/introBlaise.txt\".","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    private void createFile() {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            Path dirPath \u003d Paths.get(DIRECTORY_PATH);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"            Path filePath \u003d Paths.get(FILE_PATH);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"            // Create directory if it doesn\u0027t exist","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"            if (!Files.exists(dirPath)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"                Files.createDirectories(dirPath);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"            // Create file if it doesn\u0027t exist","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"            if (!Files.exists(filePath)) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"Error creating file: \" + e.getMessage());","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * Loads the list of tasks from the file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * If the file exists an contains tasks, it reads each task and returns a list of strings.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * If the file is empty or does not exist, an empty list is returned.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * @return A list of task descriptions read from the file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    public List\u003cString\u003e readFromFile() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        // Check if the file exists and is not empty","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"            Path filePath \u003d Paths.get(FILE_PATH);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"            if (Files.exists(filePath) \u0026\u0026 Files.size(filePath) \u003e 0) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"                // Read from the file if it exists and is not empty","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"                try (BufferedReader br \u003d new BufferedReader(new FileReader(FILE_PATH))) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"                    String line;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"                    while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"                        tasks.add(line);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"                    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"                }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"            } else {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"                System.out.println(\"File is empty or does not exist. No tasks to load.\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"Error reading file: \" + e.getMessage());","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"        return tasks;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"     * This method reads all lines from the storage file, converts each line into a {@link Task}","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"     * object using the {@link StorageTaskParser#stringToTask(String)} method, filters out","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     * any null tasks (which might result from parsing errors), and collects the valid","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"     * tasks into a list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"     * @return A {@link List} of {@link Task} objects loaded from the storage file.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"     *         Returns an empty list if the file is empty or if no valid tasks could","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"     *         be parsed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"    public List\u003cTask\u003e loadTasksFromFile() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"        return readFromFile().stream()","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"                .map(StorageTaskParser::stringToTask)","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"                .filter(Objects::nonNull)","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"     * Saves the list of tasks to the file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"     * Each task is written on a new line in the file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"     * @param tasks A list of task descriptions to save to the file.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"    public void saveTasks(List\u003cString\u003e tasks) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"        try (BufferedWriter bw \u003d new BufferedWriter(new FileWriter(FILE_PATH))) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"            for (String task : tasks) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"                bw.write(task);","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"                bw.newLine();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"     * Handles a corrupted file by resetting the task list to an empty one.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"     * This method is used to recover from a corrupted file and prevent further issues.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"    public void handleCorruptedFile() {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"Warning: Corrupted file detected. Resetting...\");","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jniaorx"},"content":"        saveTasks(new ArrayList\u003c\u003e()); // Reset file with an empty task list","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-30","isFullCredit":false}],"authorContributionMap":{"jniaorx":136}},{"path":"src/main/java/introblaise/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":" * Represents a generic task with a description and completion status.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":" * The {@code Task} class serves as a base class for different types of tasks.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * It provides methods to manage the task\u0027s description and completion status.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"public class Task {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"    private final String description;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"    private boolean isDone;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    private String tag;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"    private boolean isTagged;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new introBlaise.task.Task with the specified description.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"     * @param description A string describing the task.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    public Task(String description) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"        this.tag \u003d \"\";","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"        this.isTagged \u003d false;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    public String getDescription() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        return description;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     * Returns the status icon representing whether the task is done.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * @return \"X\" if the task is done, otherwise a space (\" \").","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        return (isDone ? \"X\" : \" \"); // Mark done task with \"X\".","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     * Marks the task as done by setting its status to true.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"    public void markAsDone() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"     * Marks the task as not done by setting its status to false.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    public void markAsUndone() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     * Returns whether the task is marked as done or not.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"     * @return False if the task is marked as undone, true if the task is marked as done.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        return isDone;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * Returns whether the task is tagged or not.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * @return False if the task is untagged, true if the task is tagged.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"    public boolean getIsTagged() {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"        return isTagged;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * Sets the tag for a task based on user input.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     * @param label The tag description based on user input.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"    public void setTag(String label) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        this.isTagged \u003d true;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        this.tag \u003d label.toLowerCase();","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     * Removes the tag of a task.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"    public void deleteTag() {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"        this.isTagged \u003d false;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"        this.tag \u003d \"\";","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     * Retrieves the tag of a task.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     * @return The tag of a task.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"    public String getTag() {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"        return tag;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"     * The string includes the task\u0027s status icon and description if it is not tagged.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"     * Returns the task\u0027s status icon, description and tag if it is tagged.","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"        if (!isTagged) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"            return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"        return \"[\" + getStatusIcon() + \"] \" + \"|\" + tag + \"| \" + description;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"jniaorx":112}},{"path":"src/main/java/introblaise/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import java.util.List;","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyDateException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyTaskListException;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.StorageTaskParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import introblaise.storage.Storage;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Deadline;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Event;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" * Manages a list of tasks, allowing tasks to be added, removed, retrieved, and displayed.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":" * The {@code TaskList} class serves as a central utility for handling user tasks,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":" * providing operations to interact with and manipulate the task list.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"public class TaskList {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    private final ArrayList\u003cTask\u003e tasksList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    private final Storage storage;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code TaskList} for users to add tasks in it.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * @param storage The storage handler used to persist and retrieve tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        this.tasksList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        loadTask();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     * Loads tasks from storage and populates the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    public void loadTask() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"        tasksList.addAll(storage.loadTasksFromFile());","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     * @return The size of the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    public int getSize() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        return tasksList.size();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     * Returns a copy of the full list of tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * @return An {@code ArrayList} containing all tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    public ArrayList\u003cTask\u003e getTasksList() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        return new ArrayList\u003c\u003e(tasksList);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * Retrieves a specific task from the task list.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * @param taskIndex The index of the task to retrieve.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"        return tasksList.get(taskIndex);","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"     * Adds a new task to the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"        tasksList.add(task);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"        saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"     * Removes a specific task from the task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     * @param task The task to be removed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"    public void removeTask(Task task) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"        tasksList.remove(task);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"        saveTasks();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     * Saves the tasks list to storage.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"     * Converts task objects to strings before saving them.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    public void saveTasks() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        List\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"        for (Task task : tasksList) {","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"            String taskStr \u003d StorageTaskParser.taskToString(task);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"            taskStrings.add(taskStr);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"        storage.saveTasks(taskStrings);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     * Prints the formatted task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"     * @return The formatted task list.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"    public String printTaskList() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"        if (isTaskListEmpty()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"            return getEmptyTaskListMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"        } else {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"            return formatTaskList();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"     * Checks whether the task list is empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"     * @return {@code true} if the task list is empty, {@code false} otherwise.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"    private boolean isTaskListEmpty() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"        return tasksList.isEmpty();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"     * Returns a message indicating that the task list is empty.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"     * @return A string message informing the user that there are no tasks.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"    private String getEmptyTaskListMessage() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"        try {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"            throw new EmptyTaskListException(\"Oh no! Your task list is empty now. Please add tasks!\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"        } catch (EmptyTaskListException e) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"            return e.getMessage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-30","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jniaorx"},"content":"     * Formates the task list into a numbered string representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string displaying all tasks with their indices.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jniaorx"},"content":"    private String formatTaskList() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jniaorx"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jniaorx"},"content":"        for (int i \u003d 0; i \u003c tasksList.size(); i++) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jniaorx"},"content":"            int indexNo \u003d i + 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jniaorx"},"content":"            Task currTask \u003d getTask(i);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jniaorx"},"content":"            result.append(indexNo).append(\". \").append(currTask).append(\"\\n\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"jniaorx"},"content":"        return result.toString().trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jniaorx"},"content":"     * Returns a formatted list of tasks scheduled for a specific date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jniaorx"},"content":"     * @param date The date for which tasks should be retrieved.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string containing tasks scheduled for the give date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jniaorx"},"content":"    public String printTasksForDate(LocalDate date) throws EmptyDateException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jniaorx"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jniaorx"},"content":"        for (Task task : tasksList) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jniaorx"},"content":"            if (taskIsScheduledForDate(task, date)) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jniaorx"},"content":"                result.append(task).append(\"\\n\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jniaorx"},"content":"        return result.toString().trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"jniaorx"},"content":"     * Determines whether a task is scheduled for a given date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"jniaorx"},"content":"     * @param task The task to check.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jniaorx"},"content":"     * @param date The date to check against.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"jniaorx"},"content":"     * @return {@code true} if the task is scheduled for the specified date, {@code false} otherwise.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jniaorx"},"content":"    private boolean taskIsScheduledForDate(Task task, LocalDate date) throws EmptyDateException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"jniaorx"},"content":"        if (task instanceof Deadline) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"jniaorx"},"content":"            Deadline deadlineTask \u003d (Deadline) task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jniaorx"},"content":"            LocalDate deadlineDate \u003d deadlineTask.getFormattedDate();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"jniaorx"},"content":"            return deadlineDate.equals(date);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jniaorx"},"content":"        } else if (task instanceof Event) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jniaorx"},"content":"            Event eventTask \u003d (Event) task;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jniaorx"},"content":"            LocalDate eventDate \u003d eventTask.getFormattedFromDate();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jniaorx"},"content":"            return eventDate.equals(date);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jniaorx"},"content":"        return false;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"jniaorx"},"content":"     * Finds and lists tasks that match the keyword based on user input.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"jniaorx"},"content":"     * @param keyword The keyword of task that user wants to find.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"jniaorx"},"content":"     * @return A list of tasks that matches the keyword.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"jniaorx"},"content":"    public List\u003cTask\u003e findTasksByKeyword(String keyword) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"jniaorx"},"content":"        List\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"jniaorx"},"content":"        for (Task task : tasksList) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"jniaorx"},"content":"            String taskDescription \u003d task.getDescription().toLowerCase();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"jniaorx"},"content":"            if (taskDescription.contains(keyword.toLowerCase())) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"jniaorx"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"jniaorx"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"jniaorx"},"content":"        return matchingTasks;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"jniaorx"},"content":"     * Clears the entire task list to empty.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"jniaorx"},"content":"    public void clearTaskList() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"jniaorx"},"content":"        tasksList.clear();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-21","isFullCredit":false}],"authorContributionMap":{"jniaorx":210}},{"path":"src/main/java/introblaise/tasktype/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.tasktype;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * Represents a task with a specific deadline that needs to be completed before a certain date or time.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * This class extends the {@code Task} class and adds a deadline attribute to store the due date/time","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * of the task. It overrides the {@code toString()} method to provide a customized string representation.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    private final String dateTimeStr;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    private final LocalDateTime formattedDatetime;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code Deadline} task with the specified description and deadline.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     * The deadline is parsed from the provided string and stored as a {@code LocalDateTime} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The deadline (date/time) by which the task must be completed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    public Deadline(String description, String dateTimeStr) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"        super(description);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        this.dateTimeStr \u003d dateTimeStr;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        this.formattedDatetime \u003d getParsedFormattedDateTime(dateTimeStr);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * Converts the given String representation of a date and time to a {@code LocalDateTime} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * This method utilizes a utility parser to interpret the string as a formatted date/time and return","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * it as a {@code LocalDateTime}, which is a more structured representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The String representing the date and time in a specific format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     *                    The format should be compatible with the expected date-time format used by the parser.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     * @return A {@code LocalDateTime} object representing the parsed date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     *         Returns {@code null} if the string cannot be parsed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    private LocalDateTime getParsedFormattedDateTime(String dateTimeStr) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertFormattedDateTime(dateTimeStr);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"     * Gets the deadline of this task as a {@code LocalDate}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"     * This method extracts the date part (without time) from the task\u0027s deadline {@code LocalDateTime}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"     * @return the {@code LocalDate} representing the date of the deadline.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"    public LocalDate getFormattedDate() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"        String dateString \u003d extractStringDate(dateTimeStr);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertDateString(dateString);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"    private String extractStringDate(String dateTimeStr) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.extractStringDate(dateTimeStr);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     * Gets the deadline for this task as String.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * This method returns the deadline string that was passed during object construction.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"     * @return The String representing the deadline of the task.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"    public String getDateTimeStr() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"        return dateTimeStr;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"     * Converts the {@code LocalDateTime} to a formatted string representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"     * This method uses a utility to convert the {@code LocalDateTime} to a string for display purposes.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     * @param formattedDatetime The {@code LocalDateTime} to be converted to a string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string representing the deadline {@code LocalDateTime}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"    private String getFormattedDateTimeStr(LocalDateTime formattedDatetime) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertStringDateTimeFromFormatted(formattedDatetime);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"     * Returns a string representation of the deadline task, including its type, description,","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     * and the deadline by which it must be completed.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * The string is formatted as: \"[D][status] description (by: deadline)\".","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string that represents the deadline task, including the description and deadline.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"        if (formattedDatetime \u003d\u003d null) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"            return \"[D]\" + super.toString() + \" (by: Invalid Deadline)\";","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"        String formattedDateTimeStr \u003d getFormattedDateTimeStr(formattedDatetime);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDateTimeStr + \")\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"jniaorx":97}},{"path":"src/main/java/introblaise/tasktype/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.tasktype;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyDateException;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.UtilParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * Represents a task with a specific duration that needs to be completed during a certain date or time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * This class extends the {@code Task} class and adds a from and to attribute to store the event duration.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * of the task. It overrides the {@code toString()} method to provide a customized string representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    protected LocalDateTime parsedFrom;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    protected LocalDateTime parsedTo;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    private final String from;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    private final String to;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * Constructs an {@code introBlaise.task.Event} object with the specified description, start time, and end time.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * @param description A brief description of the event.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @param from The starting date/time of the event.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * @param to The ending date/tine of the event.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        super(description);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"        this.parsedFrom \u003d getParsedFormattedDateTime(from);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"        this.parsedTo \u003d getParsedFormattedDateTime(to);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * Converts the given String representation of a date and time to a {@code LocalDateTime} object.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     * This method utilizes a utility parser to interpret the string as a formatted date/time and return","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"     * it as a {@code LocalDateTime}, which is a more structured representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     * @param dateTimeStr The String representing the date and time in a specific format.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     *                    The format should be compatible with the expected date-time format used by the parser.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"     * @return A {@code LocalDateTime} object representing the parsed date and time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     *         Returns {@code null} if the string cannot be parsed.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"    private LocalDateTime getParsedFormattedDateTime(String dateTimeStr) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertFormattedDateTime(dateTimeStr);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     * Gets the deadline of this task as a {@code LocalDate}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     * This method extracts the date part (without time) from the task\u0027s from date time {@code LocalDateTime}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     * @return the {@code LocalDate} representing the date which event starts.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"    public LocalDate getFormattedFromDate() throws EmptyDateException {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        String fromDate \u003d extractStringDate(from);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertDateString(fromDate);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    private String extractStringDate(String from) {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.extractStringDate(from);","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"     * Gets the start date/tome of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * @return The string start date/time of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"    public String getTo() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        return to;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"     * Gets the end date/time of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     * @return The string end date/time of the event.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"    public String getFrom() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"        return from;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     * Converts the {@code LocalDateTime} to a formatted string representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * This method uses a utility to convert the {@code LocalDateTime} to a string for display purposes.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"     * @param parsedFrom The {@code LocalDateTime} to be converted to a string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string representing the start of the event {@code LocalDateTime}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"    private String getFormattedFromStr(LocalDateTime parsedFrom) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertStringDateTimeFromFormatted(parsedFrom);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"     * Converts the {@code LocalDateTime} to a formatted string representation.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"     * This method uses a utility to convert the {@code LocalDateTime} to a string for display purposes.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     * @param parsedTo The {@code LocalDateTime} to be converted to a string.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string representing the end of the event {@code LocalDateTime}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"    private String getFormattedToStr(LocalDateTime parsedTo) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"        return UtilParser.convertStringDateTimeFromFormatted(parsedTo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"     * Returns a string representation of the event, including its description,","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"     * start time, and end time.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"     * The string is formatted as: \"[E][status] description (from: start-time to: end-time)\".","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"     * @return A formatted string that represents the event.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"        if (parsedFrom \u003d\u003d null || parsedTo \u003d\u003d null) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"            return \"[E]\" + super.toString() + \" (by: Invalid Event Time)\";","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"        String formattedFromStr \u003d getFormattedFromStr(parsedFrom);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"        String formattedToStr \u003d getFormattedToStr(parsedTo);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formattedFromStr + \" to: \" + formattedToStr + \")\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"jniaorx":121}},{"path":"src/main/java/introblaise/tasktype/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.tasktype;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.Task;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * Represents a task without any date/time attached to it.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * This class extends the {@code Task} class and add the task without any date/time attached","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * to the list. It overrides the {@code toString()} method to provide a customized string representation.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"public class ToDo extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"     * Constructs a new {@code ToDo} task with the specified description.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    public ToDo(String description) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"        super(description);","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * Returns a string representation of the todo task, including its type and description.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * @return A string in the format \"[T][status] description\"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"jniaorx":29}},{"path":"src/main/java/introblaise/ui/Greetings.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * Handles user greetings and farewells for the bot.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" * The {@code Greetings} class provides methods to greet the user when","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":" * they start interacting with the application and bid them farewell","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":" * when they exit.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"public class Greetings {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     * Constructs a {@code Greetings} object.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"     * This constructor does not perform any initialization.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    public Greetings() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * Greets the user and captures their name.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     * This method prompts the user for their name and responds with a personalized","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"     * greeting. A {@link Scanner} object is used to read the user\u0027s input.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * @param scanner A {@code Scanner} object to read user input.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"    public void greet(Scanner scanner) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"    _________________________________\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"    Sup! I am IntroBlaise. What\u0027s your name?\");","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        if (scanner.hasNextLine()) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"            String name \u003d scanner.nextLine();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"    _________________________________\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"    Hi \" + name + \"!(ʘ‿ʘ)╯ Nice to meet you! \"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"                    + \"You can start adding tasks to your very own task list! :)\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"            System.out.println(\"    _________________________________\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"        }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"     * Bids farewell to the user.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"     * This method prints a goodbye message to the user when they exit the application.","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    public void sayBye() {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"    _________________________________\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"    Bye! Hope to see you again soon! :(\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        System.out.println(\"    _________________________________\");","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-20","isFullCredit":false}],"authorContributionMap":{"jniaorx":48}},{"path":"src/main/java/introblaise/ui/IntroBlaise.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.Map;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import introblaise.commands.CommandFactory;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"import introblaise.commands.TaskCommand;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import introblaise.parsers.CommandParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import introblaise.storage.Storage;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"import introblaise.task.TaskList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * The main entry point for the IntroBlaise bot.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * This class initializes the necessary components such as storage, task management,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" * command processing, and user input handling. It serves as the core interface","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":" * for processing user commands and returning appropriate responses.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"public class IntroBlaise {","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    private CommandParser commandParser;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    private CommandFactory commandFactory;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"     * Initializes the IntroBlaise bot by setting up storage, task management,","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"     * and command processing.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"     * This constructor initializes:","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"     * \u003cul\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"     *     \u003cli\u003e{@link Storage} - Manages task persistence.\u003c/li\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"     *     \u003cli\u003e{@link TaskList} - Handles the list of tasks.\u003c/li\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"     *     \u003cli\u003e{@link CommandFactory} - Creates and registers available commands.\u003c/li\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     *     \u003cli\u003e{@link CommandParser} - Parses and executes user commands.\u003c/li\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    public IntroBlaise() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"        this.taskList \u003d new TaskList(storage);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"        this.commandFactory \u003d new CommandFactory(taskList);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        commandFactory.initializeCommandMap();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"        Map\u003cString, TaskCommand\u003e commandMap \u003d commandFactory.getCommandMap();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        this.commandParser \u003d new CommandParser(commandMap);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"     * Processes a user command and generates an appropriate response.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"     * @param input The user input, typically a command to be processed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     * @return A string response after the command has been executed.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        return commandParser.executeCommand(input);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-20","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-20","isFullCredit":false}],"authorContributionMap":{"jniaorx":56}},{"path":"src/main/java/introblaise/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.ui;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":" * Handles interactions with the user, including displaying messages and reading input.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"public class Ui {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"    private Scanner scanner;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"    private Greetings greetings;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"     * Constructor initializes the scanner for user input and the Greetings component.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"    public Ui() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"        this.greetings \u003d new Greetings();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"     * Displays the bot\u0027s welcome message with an ASCII logo and greets the user.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"    public String showWelcome() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"        String logo \u003d","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"                        \" __  .__    __. .___________..______         ______           \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"                        + \"|  | |  \\\\ |  | |           ||   _  \\\\      /  __  \\\\         \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"                        + \"|  | |   \\\\|  | `---|  |----`|  |_)  |     |  |  |  |         \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"                        + \"|  | |  . `   |     |  |     |      /      |  |  |  |         \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"                        + \"|  | |  |\\\\   |     |  |     |  |\\\\  \\\\----|  `--\u0027  |         \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"                        + \"|__| |__| \\\\__|     |__|     | _| `._____| \\\\______/          \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"                        + \"                                                              \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"                        + \".______     __          ___       __        _______. _______   \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"                        + \"|   _  \\\\  |  |        /   \\\\     |  |     /       ||   ____| \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"                        + \"|  |_)  |  |  |       /  ^  \\\\    |  |    |   (----`|  |__    \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"                        + \"|   _  \u003c   |  |      /  /_\\\\  \\\\  |  |     \\\\   \\\\  |   __|   \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"                        + \"|  |_)  |  |  `----./  _____   \\\\ |  | .----)   |   |  |____  \\n\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"                        + \"|______/   |_______/__/     \\\\__\\\\|__| |_______/    |_______| \\n\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"        return \"WASSUP!\\n\" + \"I am INTROBLAISE,\\n\" + \"Your FAVOURITE task manager!\\n\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"                + \"Please type your commands to start :)\\n\" + \"Type \\\"help\\\" to show user guide!\";","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"     * Reads user input from the console.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"     *","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"     * @return The input string entered by the user.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"    public String readInput() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"        return scanner.nextLine();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     * Displays a farewell message when the user exits.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    public void showGoodbye() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        greetings.sayBye();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"     * Closes the scanner when the application is shutting down.","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"    public void closeScanner() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"        scanner.close();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":65}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"         maxHeight\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"         maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"         prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"         type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"         xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"         styleClass \u003d\"dialog-box\"\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"        \u003cLabel fx:id\u003d\"dialog\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"               text\u003d\"Label\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"               wrapText\u003d\"true\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"               minHeight\u003d\"-Infinity\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"               styleClass\u003d\"chat-label\"/\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"                   fitHeight\u003d\"50.0\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"                   fitWidth\u003d\"50.0\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"                   pickOnBounds\u003d\"true\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"                   preserveRatio\u003d\"true\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"                   styleClass\u003d\"image-view\"/\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":32}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"            minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"            xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"            fx:controller\u003d\"introblaise.gui.MainWindow\"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"            stylesheets\u003d\"@../css/styles.css\"\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"        \u003cTextField fx:id\u003d\"userInput\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"                   layoutY\u003d\"558.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"                   onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"                   prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"                   prefWidth\u003d\"324.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        \u003cButton fx:id\u003d\"sendButton\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"                layoutX\u003d\"324.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"                layoutY\u003d\"558.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"                mnemonicParsing\u003d\"false\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"                onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"                prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"                prefWidth\u003d\"76.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"                text\u003d\"Send\" /\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"                    hbarPolicy\u003d\"NEVER\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"                    hvalue\u003d\"1.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"                    prefHeight\u003d\"557.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"                    prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"                      prefHeight\u003d\"552.0\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"                      prefWidth\u003d\"388.0\" \u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"                    \u003cLabel fx:id\u003d\"welcomeLabel\" text\u003d\"\" styleClass\u003d\"welcome-label\"/\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"                \u003c/VBox\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"            \u003c/content\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"jniaorx":49}},{"path":"src/test/java/introblaise/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import java.time.LocalDate;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"import java.util.List;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":"import introblaise.exceptions.EmptyDateException;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":"import introblaise.storage.Storage;","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Deadline;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.Event;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"import introblaise.tasktype.ToDo;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":" * Unit tests for the {@link TaskList} class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":" *","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":" * This class tests the functionality of tasks being added into the task list.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"public class TaskListTest {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"    @BeforeEach","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    public void setUp() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"        taskList \u003d new TaskList(storage);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"        taskList.clearTaskList();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#addTask(Task)} correctly adds task into","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"     * the task list by checking the size of the task list.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"    public void addTask_taskAdded_taskListSizeIncreases() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        int originalSize \u003d taskList.getSize();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        ToDo task \u003d new ToDo(\"Complete CS2103T\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"        assertEquals(originalSize + 1, taskList.getSize(), \"TaskList size should be 1 after adding a task.\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"        assertEquals(task, taskList.getTask(taskList.getSize() - 1), \"Last added task should match.\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#removeTask(Task)} correctly removes task from","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"     * the task list by checking the size of the task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"    public void removeTask_taskRemoved_taskListSizeDecreases() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        ToDo task \u003d new ToDo(\"Complete CS2103T\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"        int originalSize \u003d taskList.getSize();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"        taskList.removeTask(task);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"        assertEquals(originalSize - 1, taskList.getSize(),","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"                \"TaskList size should be 0 after removing a task.\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#removeTask(Task)} correctly removes non-existent task into","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"     * the task list by checking the size of the task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"    public void removeTask_nonExistentTask_taskListSizeRemains() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"        ToDo task1 \u003d new ToDo(\"Complete CS2103T\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"        ToDo task2 \u003d new ToDo(\"Complete TP\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task1);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"        int originalSize \u003d taskList.getSize();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"        taskList.removeTask(task2);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"        assertEquals(originalSize , taskList.getSize(), \"TaskList size should remain the same.\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#getTask(int)}} correctly retrieves the task based on task index","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"     * by checking if the task is the same as the added task.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"    public void getTask_validIndex_returnsCorrectTask() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"        ToDo task \u003d new ToDo(\"Read a book\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"        int taskListSize \u003d taskList.getSize();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"        assertEquals(task, taskList.getTask(taskListSize - 1));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#getTask(int)}} correctly throws IndexOutOfBoundsException","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"     * when invalid index is entered.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"    public void getTask_invalidIndex_throwsException() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"        int taskListSize \u003d taskList.getSize();","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e taskList.getTask(taskListSize + 1));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#printTaskList()} correctly prints the task list","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"     * by comparing it with a formatted list containing tasks that has been added.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"    public void printTaskList_nonEmptyTaskList_returnsFormattedList() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(new ToDo(\"Task 1\"));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(new ToDo(\"Task 2\"));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"        String expectedOutput \u003d \"1. [T][ ] Task 1\\n2. [T][ ] Task 2\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"        assertEquals(expectedOutput, taskList.printTaskList());","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#printTaskList()}} correctly throws EmptyTaskListException","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"     * when printing an empty task list.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"    public void printTaskList_emptyTaskList_returnsEmptyMessage() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"        String expectedMessage \u003d \"Oh no! Your task list is empty now. Please add tasks!\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"        assertEquals(expectedMessage, taskList.printTaskList());","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#findTasksByKeyword(String)}} correctly returns","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"     * tasks that matches the keyword by comparing the result list with tasks that matches and tasks that don\u0027t.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"jniaorx"},"content":"    public void findTasksByKeyword_matchingTasks_returnList() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"jniaorx"},"content":"        ToDo task1 \u003d new ToDo(\"Write report\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"jniaorx"},"content":"        ToDo task2 \u003d new ToDo(\"Read book\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task1);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(task2);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"jniaorx"},"content":"        List\u003cTask\u003e results \u003d taskList.findTasksByKeyword(\"Read\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"jniaorx"},"content":"        assertEquals(1, results.size());","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"jniaorx"},"content":"        assertEquals(task2, results.get(0));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#findTasksByKeyword(String)}} returns nothing when there is no match","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"jniaorx"},"content":"     * by making sure the result list is empty.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"jniaorx"},"content":"    public void findTasksByKeyword_noMatch_returnsEmptyList() {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(new ToDo(\"Exercise\"));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"jniaorx"},"content":"        List\u003cTask\u003e results \u003d taskList.findTasksByKeyword(\"Study\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"jniaorx"},"content":"        assertTrue(results.isEmpty());","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#printTasksForDate(LocalDate)}} correctly returns","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"jniaorx"},"content":"     * tasks that matches the date by comparing them to the expectedOutput string.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"jniaorx"},"content":"    public void printTasksForDate_tasksWithMatchingDate_returnsFormattedList() throws EmptyDateException {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"jniaorx"},"content":"        LocalDate localDate \u003d LocalDate.of(2025, 2, 20);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"jniaorx"},"content":"        Deadline deadlineTask \u003d new Deadline(\"Submit assignment\", \"20-02-2025 2359\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"jniaorx"},"content":"        Event eventTask \u003d new Event(\"Project meeting\", \"20-02-2025 1600\", \"20-02-2025 1700\");","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(deadlineTask);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"jniaorx"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"jniaorx"},"content":"        String expectedOutput \u003d \"[D][ ] Submit assignment (by: Feb 20 2025 2359)\\n[E][ ] \"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"jniaorx"},"content":"                + \"Project meeting (from: Feb 20 2025 1600 to: Feb 20 2025 1700)\";","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"jniaorx"},"content":"        assertEquals(expectedOutput, taskList.printTasksForDate(localDate));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link TaskList#printTasksForDate(LocalDate)}} returns","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"jniaorx"},"content":"     * empty string when there is no matching tasks.","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"jniaorx"},"content":"    public void printTasksForDate_noMatchingTasks_returnsEmptyString() throws EmptyDateException {","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"jniaorx"},"content":"        LocalDate date \u003d LocalDate.of(2025, 2, 21);","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"\", taskList.printTasksForDate(date));","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-19","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":184}},{"path":"src/test/java/introblaise/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"package introblaise.task;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"/**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"jniaorx"},"content":" * Unit tests for the {@link Task} class.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"jniaorx"},"content":" * \u003cp\u003e","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"jniaorx"},"content":" * This class tests the functionality of task creation, marking tasks as done,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"jniaorx"},"content":" * and marking them as undone.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"jniaorx"},"content":" */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"jniaorx"},"content":"public class TaskTest {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"     * Tests that a newly created {@link Task} has the correct description","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"jniaorx"},"content":"     * and is marked as not done by default.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"jniaorx"},"content":"    public void taskIntialization_correctDescriptionAndDefaultStatus() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Finish CS2103T assignment\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"Finish CS2103T assignment\",","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"jniaorx"},"content":"                task.getDescription(), \"Task description should be correctly initialzied.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"jniaorx"},"content":"        assertFalse(task.getIsDone(), \"New task should be marked as not done by default.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[ ] Finish CS2103T assignment\", task.toString());","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link Task#markAsDone()} correctly marks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"jniaorx"},"content":"     * the task as done and updates its string representation.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"jniaorx"},"content":"    public void markAsDone_taskMarkedDone() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"jniaorx"},"content":"        task.markAsDone();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"jniaorx"},"content":"        assertTrue(task.getIsDone(), \"Task should be marked as done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[X] Write JUnit tests\", task.toString(), \"Task representation should show completion status.\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link Task#markAsUndone()} correctly marks","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"jniaorx"},"content":"     * the task as not done and updates its string representation.","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"jniaorx"},"content":"    public void markAsUndone_taskMarkedUndone() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"jniaorx"},"content":"        task.markAsDone();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"jniaorx"},"content":"        task.markAsUndone();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"jniaorx"},"content":"        assertFalse(task.getIsDone(), \"Task should be marked as not done.\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[ ] Write JUnit tests\", task.toString(),","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"jniaorx"},"content":"                \"Task representation should show undone status.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link Task#setTag(String)} correctly assigns a tag to a task.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"jniaorx"},"content":"    public void tagTask_taskTagged() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"urgent\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"urgent\", task.getTag(), \"Task tag should be correctly assigned.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[ ] |urgent| Write JUnit tests\", task.toString(), \"Task representation should include the tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"jniaorx"},"content":"     * Tests that calling {@link Task#deleteTag()} correctly removes a tag from a task.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"jniaorx"},"content":"    public void removeTag_taskUntagged() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"urgent\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"jniaorx"},"content":"        task.deleteTag();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"\", task.getTag(), \"Task tag should be removed.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[ ] Write JUnit tests\", task.toString(), \"Task representation should no longer include the tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"jniaorx"},"content":"     * Tests that marking a tagged task as done correctly updates its string representation.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"jniaorx"},"content":"    public void markTaggedTaskAsDone_taskMarkedDoneWithTag() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"urgent\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"jniaorx"},"content":"        task.markAsDone();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"jniaorx"},"content":"        assertTrue(task.getIsDone(), \"Task should be marked as done.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[X] |urgent| Write JUnit tests\", task.toString(), \"Completed task should still display tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"jniaorx"},"content":"     * Tests that setting a new tag replaces the old tag.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"jniaorx"},"content":"    public void setNewTag_oldTagReplaced() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"urgent\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"important\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"important\", task.getTag(), \"New tag should replace the old tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[ ] |important| Write JUnit tests\", task.toString(),","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"jniaorx"},"content":"                \"Task representation should show the new tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"jniaorx"},"content":"    /**","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"jniaorx"},"content":"     * Tests that removing a tag from a completed task correctly updates its string representation.","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"jniaorx"},"content":"     */","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"jniaorx"},"content":"    @Test","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"jniaorx"},"content":"    public void removeTagFromCompletedTask_taskUntagged() {","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"jniaorx"},"content":"        Task task \u003d new Task(\"Write JUnit tests\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"jniaorx"},"content":"        task.setTag(\"urgent\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"jniaorx"},"content":"        task.markAsDone();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"jniaorx"},"content":"        task.deleteTag();","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"jniaorx"},"content":"","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"jniaorx"},"content":"        assertEquals(\"[X] Write JUnit tests\", task.toString(), \"Completed task should no longer display a tag.\");","lastModifiedDate":"2025-02-18","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"jniaorx"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"jniaorx"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"jniaorx":130}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jniaorx"},"content":"extro blaise","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"jniaorx"},"content":"todo borrow book","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"jniaorx"},"content":"list","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"jniaorx"},"content":"deadline return book /by Sunday","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"jniaorx"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"jniaorx"},"content":"mark 1","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"jniaorx"},"content":"list","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"jniaorx"},"content":"delete 1","lastModifiedDate":"2025-01-23","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"jniaorx"},"content":"bye","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"jniaorx":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"jniaorx"},"content":"java -classpath ..\\bin introblaise.ui.IntroBlaise \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"jniaorx":1,"-":20}}]
