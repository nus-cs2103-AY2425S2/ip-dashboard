[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"checkstyle {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.9.2\u0027","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"    mainClass.set(\"nicholas.gui.Launcher\")","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"    archiveBaseName \u003d \"nicholas\"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"-":39,"nicholasdaijh":23}},{"path":"src/main/java/nicholas/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents the base exception for the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" * All custom exceptions extend from this class.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a DukeException with a specific error message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"    public DukeException(String message) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"        super(message);","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":16}},{"path":"src/main/java/nicholas/exception/EmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents an exception that is thrown when a user enters a command without a description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"public class EmptyCommandException extends DukeException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs an EmptyCommandException with a specific command type.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandType The type of command that is missing a description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"    public EmptyCommandException(String commandType) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"        super(\"OOPS!!! The description of a \" + commandType + \" cannot be empty.\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":15}},{"path":"src/main/java/nicholas/exception/NotTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.exception;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents an exception that is thrown when an unrecognized command is entered.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"public class NotTaskException extends DukeException {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a NotTaskException with a default error message.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"     * @param message The error message explaining the invalid command.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"    public NotTaskException(String message) {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":15}},{"path":"src/main/java/nicholas/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.gui;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.Collections;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":" * Represents a dialog box consisting of an ImageView to represent the speaker\u0027s face","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":" * and a label containing text from the speaker.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    private Label dialog;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"            fxmlLoader.load();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"        dialog.setText(text);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"    private void flip() {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"    public static DialogBox getNicholasDialog(String text, Image img) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"        db.flip();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"        return db;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-09","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":60}},{"path":"src/main/java/nicholas/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.gui;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"public class Launcher {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-09","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":12}},{"path":"src/main/java/nicholas/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.gui;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.application.Application;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.ui.Nicholas;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"public class Main extends Application {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"    private Nicholas nicholas \u003d new Nicholas();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"     * Starts the JavaFX application by loading the FXML layout and setting up the scene.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"     * @param stage The primary stage for this application.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"            stage.setScene(scene);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setNicholas(nicholas); // Inject the Nicholas instance","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"            stage.setTitle(\"Nicholas Chatbot\");","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"            stage.show();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-09","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":37}},{"path":"src/main/java/nicholas/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.gui;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.BackgroundImage;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.BackgroundPosition;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.BackgroundRepeat;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.BackgroundSize;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.ui.Nicholas;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":" * Controller for the main GUI.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    private TextField userInput;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"    private Nicholas nicholas;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.jpg\"));","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"    private Image nicholasImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Nicholas.jpg\"));","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"    public void initialize() {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"                DialogBox.getNicholasDialog(\"Hello! What can I do for you?\", nicholasImage)","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"        );","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"        BackgroundImage background \u003d new BackgroundImage(","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"                new Image(this.getClass().getResource(\"/images/background.jpeg\").toExternalForm()),","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"                BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT,","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"                BackgroundPosition.CENTER, new BackgroundSize(100, 100, true, true, true, true)","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        );","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        // Apply the background to the dialogContainer","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"        dialogContainer.setBackground(new Background(background));","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"    /** Injects the Nicholas instance */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"    public void setNicholas(Nicholas n) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"        nicholas \u003d n;","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"    @FXML","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"    private void handleUserInput() throws FileNotFoundException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"            String input \u003d userInput.getText();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"            String response \u003d nicholas.getGuiResponse(input);","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"                    DialogBox.getNicholasDialog(response, nicholasImage)","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"            );","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"            userInput.clear();","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"            throw new FileNotFoundException(\"Error: File not found.\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-09","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":73}},{"path":"src/main/java/nicholas/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.ui.Parser;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" * Represents a Deadline task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    private String by;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a Deadline task with a description, due date, and priority.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"     * @param by The due date.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"        super(description);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"        this.by \u003d parser.parseDate(by);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    public String getTaskType() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        return \"D\";","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        return super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":32}},{"path":"src/main/java/nicholas/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.ui.Parser;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" * Represents an Event task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"public class Event extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    private String from;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"    private String to;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs an Event task with a description, start time, end time, and priority.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"     * @param description The description of the event.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"     * @param from The start time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"     * @param to The end time.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"        super(description);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"        this.from \u003d parser.parseDate(from);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"        this.to \u003d parser.parseDate(to);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    public String getTaskType() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"        return \"E\";","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"    public String toString() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"        return super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":35}},{"path":"src/main/java/nicholas/tasks/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents the priority of a task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"public enum Priority {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"    HIGH, MEDIUM, LOW","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":8}},{"path":"src/main/java/nicholas/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents a task that can be marked as done or not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" * This is an abstract class that serves as a base for different types of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"public abstract class Task {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"    private String description;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    private boolean isDone;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"    private Priority priority; // Added priority field","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a Task with the given description and priority.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"    public Task(String description) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"        this.isDone \u003d false; // Tasks are initially not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"        this.priority \u003d Priority.LOW;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"     * \"X\" if the task is done, otherwise an empty space.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A string representing the status of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The task\u0027s description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"    public String getDescription() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"        return this.description;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the priority of the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The priority of the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"    public Priority getPriority() {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"        return this.priority;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     * Sets a new priority for the task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"     * @param priority The new priority level.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"    public void setPriority(Priority priority) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"        this.priority \u003d priority;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"     * Marks the task as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"    public void markAsDone() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"     * Marks the task as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"    public void markAsUndone() {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns a string representation of the task,","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"     * including its type, status, description, and priority.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A formatted string representation of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"    public String toString() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"        return \"[\" + getTaskType() + \"][\" + getStatusIcon() + \"] \" + description + \" (Priority: \" + priority + \")\";","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the type of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"     * This method is abstract and must be implemented in subclasses.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A string representing the type of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"    public abstract String getTaskType();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":92}},{"path":"src/main/java/nicholas/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.List;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":" * Represents a list of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":" * This class provides methods to add, remove, and update tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"public class TaskList {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"    public TaskList() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"        tasks.add(task);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"     * Deletes a task from the task list based on the given index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"    public void deleteTask(int taskIndex) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"            tasks.remove(taskIndex);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"     * Marks a task as done based on the given index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskIndex The index of the task to be marked as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"    public void markTaskAsDone(int taskIndex) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        tasks.get(taskIndex).markAsDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"     * Marks a task as not done based on the given index.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskIndex The index of the task to be marked as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"    public void markTaskAsUndone(int taskIndex) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"        tasks.get(taskIndex).markAsUndone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A list of tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"    public List\u003cTask\u003e getTasks() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"        return tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"     * Upgrades the priority of a task at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code LOW}, it is upgraded to {@code MEDIUM}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code MEDIUM}, it is upgraded to {@code HIGH}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task is already at {@code HIGH} priority, no changes are made.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskIndex The index of the task to be upgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IndexOutOfBoundsException if the task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"    public void upgradeTask(int taskIndex) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IndexOutOfBoundsException(\"Invalid task index: \" + taskIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToUpgrade \u003d tasks.get(taskIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskToUpgrade.getPriority() \u003d\u003d Priority.LOW) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"            taskToUpgrade.setPriority(Priority.MEDIUM);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"        } else if (taskToUpgrade.getPriority() \u003d\u003d Priority.MEDIUM) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"            taskToUpgrade.setPriority(Priority.HIGH);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasdaijh"},"content":"     * Downgrades the priority of a task at the specified index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code HIGH}, it is downgraded to {@code MEDIUM}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code MEDIUM}, it is downgraded to {@code LOW}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task is already at {@code LOW} priority, no changes are made.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskIndex The index of the task to be downgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IndexOutOfBoundsException if the task index is out of range.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasdaijh"},"content":"    public void downgradeTask(int taskIndex) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IndexOutOfBoundsException(\"Invalid task index: \" + taskIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToDowngrade \u003d tasks.get(taskIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskToDowngrade.getPriority() \u003d\u003d Priority.HIGH) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasdaijh"},"content":"            taskToDowngrade.setPriority(Priority.MEDIUM);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasdaijh"},"content":"        } else if (taskToDowngrade.getPriority() \u003d\u003d Priority.MEDIUM) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasdaijh"},"content":"            taskToDowngrade.setPriority(Priority.LOW);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasdaijh"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The size of the task list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasdaijh"},"content":"    public int size() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasdaijh"},"content":"        return tasks.size();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":126}},{"path":"src/main/java/nicholas/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":" * Represents a Todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a Todo task with the given description and priority.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"     * @param description The description of the Todo task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"        super(description);","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"    @Override","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    public String getTaskType() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"        return \"T\";","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-01-22","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":21}},{"path":"src/main/java/nicholas/ui/GuiResponseHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.List;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.EmptyCommandException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.NotTaskException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.TaskList;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Todo;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":" * Handles user commands and responses for the GUI interface of the task manager.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":" * This class is responsible for processing user inputs, executing the corresponding","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":" * commands, and returning appropriate responses.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"public class GuiResponseHandler {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    private Parser parser;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"    private List\u003cTask\u003e loadedTasks;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"     * Initializes a new instance of the GuiResponseHandler with default components.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    public GuiResponseHandler() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"        storage \u003d new Storage(\"tasks.txt\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"     * Processes the user command and executes the corresponding action.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed parts of the user command.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If the command is empty.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws NotTaskException If the command is not recognized.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"    public String processUserCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"            String[] commandParts, String command) throws EmptyCommandException, NotTaskException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"        switch (command) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        case \"mark\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"            return handleMarkCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"        case \"unmark\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"            return handleUnmarkCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"        case \"list\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"            return handleListCommand();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"        case \"delete\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"            return handleDeleteCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"        case \"find\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"            return handleFindCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"        case \"upgrade\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"            return handleUpgradePriorityCommand(commandParts, command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"        case \"downgrade\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"            return handleDowngradePriorityCommand(commandParts, command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"        case \"todo\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"            return handleTodoCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"        case \"deadline\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"            return handleDeadlineCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"        case \"event\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"            return handleEventCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"        case \"bye\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"            return handleExitCommand();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"        default:","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"            throw new NotTaskException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"     * Loads tasks from storage into memory.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws FileNotFoundException If the file cannot be found.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"    public void loadTasks() throws FileNotFoundException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"            loadedTasks \u003d storage.loadTasks();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"            for (Task task : loadedTasks) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"                taskList.addTask(task);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"            throw new FileNotFoundException(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses the user input into command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput The raw user input.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"     * @return An array containing command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasdaijh"},"content":"    public String[] getCommandParts(String userInput) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasdaijh"},"content":"        return parser.parseCommand(userInput);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasdaijh"},"content":"     * Extracts the command keyword from the parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The command keyword in lowercase.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasdaijh"},"content":"    public String getCommand(String[] commandParts) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasdaijh"},"content":"        return commandParts[0].toLowerCase();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"mark\" command to mark a task as done.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no task index is provided.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleMarkCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasdaijh"},"content":"        int markIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.markTaskAsDone(markIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasdaijh"},"content":"        response \u003d response.append(\"Nice! I\u0027ve marked this task as done:\\n\").append(taskList.getTasks().get(markIndex));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"unmark\" command to mark a task as not done.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no task index is provided.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleUnmarkCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasdaijh"},"content":"        int unmarkIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.markTaskAsUndone(unmarkIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"OK, I\u0027ve unmarked this task:\\n\").append(taskList.getTasks().get(unmarkIndex));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"list\" command to display all tasks.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The list of tasks as a formatted string.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleListCommand() throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasdaijh"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"nicholasdaijh"},"content":"            response.append(\"Your task list is empty.\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"nicholasdaijh"},"content":"        } else {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"nicholasdaijh"},"content":"            response.append(\"Here are your tasks:\\n\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"nicholasdaijh"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"nicholasdaijh"},"content":"                response.append((i + 1)).append(\". \").append(taskList.getTasks().get(i)).append(\"\\n\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"delete\" command to remove a task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no task index is provided.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleDeleteCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"nicholasdaijh"},"content":"        int deleteIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToDelete \u003d taskList.getTasks().get(deleteIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.deleteTask(deleteIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"Noted. I\u0027ve removed this task:\\n\").append(taskToDelete);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"find\" command to search for tasks containing a keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The list of matching tasks.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no search keyword is provided.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleFindCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"Here are the matching tasks containing \u0027\").append(commandParts[1]).append(\"\u0027:\\n\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"nicholasdaijh"},"content":"        int count \u003d 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"nicholasdaijh"},"content":"        for (Task task : taskList.getTasks()) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"nicholasdaijh"},"content":"            if (task.getDescription().contains(commandParts[1])) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"nicholasdaijh"},"content":"                response.append(count).append(\". \").append(task).append(\"\\n\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"nicholasdaijh"},"content":"                count++;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"nicholasdaijh"},"content":"        if (count \u003d\u003d 1) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"nicholasdaijh"},"content":"            response.append(\"No matching tasks found.\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"upgrade\" command to increase the priority of a task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code LOW}, it is upgraded to {@code MEDIUM}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code MEDIUM}, it is upgraded to {@code HIGH}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task is already at {@code HIGH} priority, no changes are made.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts containing the task index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message confirming the priority upgrade.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no task index is provided.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleUpgradePriorityCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"nicholasdaijh"},"content":"        int upgradeIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.upgradeTask(upgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"nicholasdaijh"},"content":"        response \u003d response.append(\"OK, I\u0027ve upgraded this task:\\n\").append(taskList.getTasks().get(upgradeIndex));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"downgrade\" command to decrease the priority of a task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003cp\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code HIGH}, it is downgraded to {@code MEDIUM}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task\u0027s priority is {@code MEDIUM}, it is downgraded to {@code LOW}.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"nicholasdaijh"},"content":"     * If the task is already at {@code LOW} priority, no changes are made.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"nicholasdaijh"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts containing the task index.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message confirming the priority downgrade.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If no task index is provided.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleDowngradePriorityCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"nicholasdaijh"},"content":"        int downgradeIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.downgradeTask(downgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"nicholasdaijh"},"content":"        response \u003d response.append(\"OK, I\u0027ve downgraded this task:\\n\").append(taskList.getTasks().get(downgradeIndex));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"todo\" command to add a new Todo task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If the task description is empty.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleTodoCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"nicholasdaijh"},"content":"        Task todoTask \u003d new Todo(commandParts[1].trim());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(todoTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"Got it. I\u0027ve added this task:\\n\").append(todoTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"deadline\" command to add a new Deadline task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If the task description is empty.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleDeadlineCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].split(\"/by\")[0].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"nicholasdaijh"},"content":"        Task deadlineTask \u003d parser.parseDeadline(commandParts[1]);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(deadlineTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"Got it. I\u0027ve added this task:\\n\").append(deadlineTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"event\" command to add a new Event task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts The parsed command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command The command keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The response message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If the task description is empty.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleEventCommand(String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"nicholasdaijh"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].split(\"/from\")[0].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"nicholasdaijh"},"content":"        if (isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"nicholasdaijh"},"content":"        Task eventTask \u003d parser.parseEvent(commandParts[1]);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"nicholasdaijh"},"content":"        response.append(\"Got it. I\u0027ve added this task:\\n\").append(eventTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"nicholasdaijh"},"content":"        return response.toString();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"bye\" command to exit the application.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The exit message.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"nicholasdaijh"},"content":"    public String handleExitCommand() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"nicholasdaijh"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"nicholasdaijh"},"content":"     * Updates the storage file with the current tasks.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":345,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":346,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IOException If an error occurs while writing to the file.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":347,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":348,"author":{"gitId":"nicholasdaijh"},"content":"    public void updateStorage() throws IOException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":349,"author":{"gitId":"nicholasdaijh"},"content":"        storage.emptyFile(\"tasks.txt\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":350,"author":{"gitId":"nicholasdaijh"},"content":"        storage.saveTasks(taskList.getTasks());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":351,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":352,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-16","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":352}},{"path":"src/main/java/nicholas/ui/Nicholas.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.EmptyCommandException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.NotTaskException;","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":" * The main class for the Nicholas task manager application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":" * It initializes components, loads tasks, processes user input, and manages tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"public class Nicholas {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"     * The entry point of the application.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"     * It initializes components, loads tasks from file, and processes user commands in a loop.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"     * @param args Command-line arguments (not used).","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IOException If an error occurs while reading/writing the task file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"        // Initialize components","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        UserCommandHandler userCommandHandler \u003d new UserCommandHandler();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"        // Show greeting message","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"        userCommandHandler.getGreeting();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"        // Main loop to process user commands","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"        while (!userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"            try {","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"                String[] commandParts \u003d userCommandHandler.getCommandParts(userInput);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"                String command \u003d userCommandHandler.getCommand(commandParts);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"                userCommandHandler.processUserCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"            } catch (NotTaskException | EmptyCommandException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"                userCommandHandler.showErrorMessage(e);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"            userCommandHandler.updateStorage();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"            userInput \u003d scanner.nextLine();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-01-22","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        // Show goodbye message","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        userCommandHandler.getExitMessage();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-01-21","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles user input, processes commands related to task management, and returns the appropriate GUI response.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     * This method takes the user input, interprets it as a command, modifies the task list accordingly","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     * (adding, marking, unmarking, deleting, finding, etc.), and returns a string to be displayed on the GUI.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"     * It also handles any errors and exceptions during the","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"     * process, providing an error message when necessary. The method interacts with various classes,","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"     * including `Ui`, `Storage`, `Parser`, and `TaskList`, and updates the tasks stored in a file.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput The raw input string from the user, containing the command and any arguments.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A string response that will be displayed to the user in the GUI","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"     *     indicating the result of the command or an error message.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws NotTaskException If an unrecognized command is entered by the user.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException If the user input is missing required arguments or is improperly formatted.","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"    public String getGuiResponse(String userInput) throws FileNotFoundException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"        // Initialize components","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"        GuiResponseHandler guiResponseHandler \u003d new GuiResponseHandler();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"        guiResponseHandler.loadTasks();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"        String response;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"            String[] commandParts \u003d guiResponseHandler.getCommandParts(userInput);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"            String command \u003d guiResponseHandler.getCommand(commandParts);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"            response \u003d guiResponseHandler.processUserCommand(commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"            // Save updated tasks","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"            guiResponseHandler.updateStorage();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (NotTaskException | EmptyCommandException e) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"            return \"Error: \" + e.getMessage();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"            return \"Unexpected error: \" + e.getMessage();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"        return response;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":84}},{"path":"src/main/java/nicholas/ui/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Deadline;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Event;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Priority;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Todo;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":" * Handles parsing of user input into commands and tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"public class Parser {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses user input into two parts: command and task description with date.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput The full input string from the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A string array containing the command and task description with date.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    public static String[] parseCommand(String userInput) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        return userInput.trim().split(\" \", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses a string representation of a task and converts it into a Task object.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The string representation of the task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A Task object (Todo, Deadline, or Event) parsed from the input.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IllegalArgumentException If the input format is invalid.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"    public Task parseTask(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"        assert input !\u003d null \u0026\u0026 !input.isEmpty() : \"Input string should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"        String[] parts \u003d input.split(\"\\\\]\\\\[\", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"        assert parts.length \u003d\u003d 2 : \"Input should be in a valid task format\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"        String descriptionAndPriority \u003d parts[1].substring(3).trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"        parts \u003d descriptionAndPriority.split(\"\\\\(Priority:\", 2);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"        String priority \u003d parts[1].trim().split(\"\\\\)\", 2)[0];","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"        String descriptionAndDate \u003d description + parts[1].trim().split(\"\\\\)\", 2)[1];;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        switch (taskType) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        case \"[T\":","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"            return convertToTodoObject(input, descriptionAndDate, Priority.valueOf(priority));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"        case \"[D\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"            return convertToDeadlineObject(input, descriptionAndDate, Priority.valueOf(priority));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"        case \"[E\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"            return convertToEventObject(input, descriptionAndDate, Priority.valueOf(priority));","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"        default:","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IllegalArgumentException(\"Invalid task type: \" + taskType);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"     * Converts a parsed string into a {@code Todo} task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The original task string.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"     * @param descriptionAndDate The description of the task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A Todo object.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"    public Task convertToTodoObject(String input, String descriptionAndDate, Priority priority) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"        Task todoTask \u003d new Todo(descriptionAndDate);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"        if (input.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"            todoTask.markAsDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"        todoTask.setPriority(priority);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"        return todoTask;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"     * Converts a parsed string into a {@code Deadline} task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The original task string.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"     * @param descriptionAndDate The description of the task with its deadline.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A Deadline object.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IllegalArgumentException If the deadline format is invalid.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"    public Task convertToDeadlineObject(String input, String descriptionAndDate, Priority priority) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"        int deadlineBy \u003d descriptionAndDate.indexOf(\"by\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"        assert deadlineBy !\u003d -1 : \"Deadline task must contain \u0027by\u0027 keyword\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"        if (deadlineBy \u003d\u003d -1) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IllegalArgumentException(\"Invalid deadline format\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"        String deadlineDate \u003d descriptionAndDate.substring(deadlineBy + 4, descriptionAndDate.length() - 1);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"        Task deadlineTask \u003d parseDeadline(descriptionAndDate.substring(0, deadlineBy - 2)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"                + \" /by \" + reverseParseDate(deadlineDate));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"        if (input.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"            deadlineTask.markAsDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasdaijh"},"content":"        deadlineTask.setPriority(priority);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasdaijh"},"content":"        return deadlineTask;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasdaijh"},"content":"     * Converts a parsed string into an {@code Event} task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The original task string.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasdaijh"},"content":"     * @param descriptionAndDate The description of the task with start and end times.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasdaijh"},"content":"     * @return An Event object.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IllegalArgumentException If the event format is invalid.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasdaijh"},"content":"    public Task convertToEventObject(String input, String descriptionAndDate, Priority priority) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasdaijh"},"content":"        int eventStartIndexBegin \u003d descriptionAndDate.indexOf(\"from:\") + 6;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasdaijh"},"content":"        int eventStartIndexEnd \u003d descriptionAndDate.indexOf(\"to:\") - 1;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasdaijh"},"content":"        int eventEndIndexBegin \u003d descriptionAndDate.indexOf(\"to:\") + 4;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasdaijh"},"content":"        int eventEndIndexEnd \u003d descriptionAndDate.length() - 1;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasdaijh"},"content":"        if (eventStartIndexBegin \u003d\u003d -1 || eventStartIndexEnd \u003d\u003d -1 || eventEndIndexBegin \u003d\u003d -1) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IllegalArgumentException(\"Invalid event format\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasdaijh"},"content":"        String eventStart \u003d descriptionAndDate.substring(eventStartIndexBegin, eventStartIndexEnd).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasdaijh"},"content":"        String eventEnd \u003d descriptionAndDate.substring(eventEndIndexBegin, eventEndIndexEnd).trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasdaijh"},"content":"        Task eventTask \u003d parseEvent(descriptionAndDate.substring(0, eventStartIndexBegin - 8)","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasdaijh"},"content":"                + \" /from \" + reverseParseDate(eventStart) + \" /to \" + reverseParseDate(eventEnd));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasdaijh"},"content":"        if (input.charAt(4) \u003d\u003d \u0027X\u0027) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasdaijh"},"content":"            eventTask.markAsDone();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasdaijh"},"content":"        eventTask.setPriority(priority);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasdaijh"},"content":"        return eventTask;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses a date string into a formatted date representation.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasdaijh"},"content":"     * @param by The date string in \"yyyy-MM-dd HHmm\" format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The formatted date string in \"MMM dd yyyy HHmm\" format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IllegalArgumentException If the date format is invalid.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasdaijh"},"content":"    public String parseDate(String by) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasdaijh"},"content":"        assert by !\u003d null \u0026\u0026 !by.isEmpty() : \"Date string should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasdaijh"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasdaijh"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasdaijh"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(by, inputFormatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasdaijh"},"content":"            return dateTime.format(outputFormatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IllegalArgumentException(\"Invalid date format. Expected: yyyy-MM-dd HHmm\", e);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasdaijh"},"content":"     * Converts a formatted date string back to the original format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasdaijh"},"content":"     * @param by The date string in \"MMM dd yyyy HHmm\" format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasdaijh"},"content":"     * @return The date string in \"yyyy-MM-dd HHmm\" format.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IllegalArgumentException If the date format is invalid.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasdaijh"},"content":"    public String reverseParseDate(String by) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasdaijh"},"content":"        assert by !\u003d null \u0026\u0026 !by.isEmpty() : \"Date string should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasdaijh"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasdaijh"},"content":"        DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasdaijh"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(by, inputFormatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"nicholasdaijh"},"content":"            return dateTime.format(outputFormatter);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IllegalArgumentException(\"Invalid date format. Expected: MMM dd yyyy HHmm\", e);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses a deadline task description with date and creates a Deadline task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The input string containing the deadline task description and due date.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A Deadline task object.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"nicholasdaijh"},"content":"    public static Task parseDeadline(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"nicholasdaijh"},"content":"        assert input !\u003d null \u0026\u0026 !input.isEmpty() : \"Deadline input should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"nicholasdaijh"},"content":"        String[] parts \u003d input.split(\"/by\", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"nicholasdaijh"},"content":"        assert parts.length \u003d\u003d 2 : \"Deadline format should contain \u0027/by\u0027\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"nicholasdaijh"},"content":"        return new Deadline(parts[0].trim(), parts[1].trim());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses an event task description with dates and creates an Event task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"nicholasdaijh"},"content":"     * @param input The input string containing the event description, start time, and end time.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"nicholasdaijh"},"content":"     * @return An Event task object.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"nicholasdaijh"},"content":"    public static Task parseEvent(String input) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"nicholasdaijh"},"content":"        assert input !\u003d null \u0026\u0026 !input.isEmpty() : \"Event input should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"nicholasdaijh"},"content":"        String[] parts \u003d input.split(\"/from\", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"nicholasdaijh"},"content":"        assert parts.length \u003d\u003d 2 : \"Event format should contain \u0027/from\u0027\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"nicholasdaijh"},"content":"        String description \u003d parts[0].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"nicholasdaijh"},"content":"        parts \u003d parts[1].split(\"/to\", 2);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"nicholasdaijh"},"content":"        assert parts.length \u003d\u003d 2 : \"Event format should contain \u0027/to\u0027\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"nicholasdaijh"},"content":"        String from \u003d parts[0].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"nicholasdaijh"},"content":"        String to \u003d parts[1].trim();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"nicholasdaijh"},"content":"        return new Event(description, from, to);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":194}},{"path":"src/main/java/nicholas/ui/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.File;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.List;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":" * Handles loading and saving tasks to a file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"public class Storage {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"    private String filePath;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     * @param filePath The path of the file to store tasks.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        assert filePath !\u003d null \u0026\u0026 !filePath.isEmpty() : \"File path should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"     * Loads tasks from the specified file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"     * @return A list of tasks loaded from the file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws FileNotFoundException If the file does not exist.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"    public List\u003cTask\u003e loadTasks() throws FileNotFoundException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"        assert file.exists() : \"File should exist before reading\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"            Parser taskParser \u003d new Parser();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"            assert line !\u003d null \u0026\u0026 !line.isEmpty() : \"Task line should not be null or empty\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"            tasks.add(taskParser.parseTask(line));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        scanner.close();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"        return tasks;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"     * Saves tasks to the specified file by appending to it.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws FileNotFoundException If the file cannot be found.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"    public void saveTasks(List\u003cTask\u003e tasks) throws FileNotFoundException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"        assert tasks !\u003d null : \"Tasks list should not be null\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"            FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"                assert tasks !\u003d null : \"Tasks list should not be null\";","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"                fw.write(task.toString() + \"\\n\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"            fw.close();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"            e.printStackTrace();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"     * Empties the contents of the specified file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"     * @param filePath The path of the file to be emptied.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IOException If an error occurs while emptying the file.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"    public static void emptyFile(String filePath) throws IOException {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"        try (FileWriter writer \u003d new FileWriter(file)) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"            writer.write(\"\"); // Writing an empty string to truncate the file","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"            throw new IOException(\"Error occurred while emptying the file: \" + filePath, e);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":84}},{"path":"src/main/java/nicholas/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":" * Handles user interface interactions, including displaying messages and formatting output.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"public class Ui {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"    private static final String LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the greeting message when the application starts.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"    public void showGreeting() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Hello! I\u0027m Nicholas!\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the farewell message when the application exits.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    public void showBye() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a horizontal line separator.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"    public void showLine() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task has been added.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was added.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskCount The total number of tasks after adding the new task.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskAdded(Task task, int taskCount) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task has been marked as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskMarked(Task task) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task has been marked as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskUnmarked(Task task) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the list of tasks currently stored.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"     * @param tasks An array of tasks to display.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskCount The total number of tasks in the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskList(Task[] tasks, int taskCount) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"            int index \u003d i + 1;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"            System.out.println(index + \".\" + tasks[i].toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task has been deleted.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskCount The total number of tasks remaining in the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskDeleted(Task task, int taskCount) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Now you have \" + taskCount + \" tasks in the list\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a list of tasks that contain a given prefix in their description.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasdaijh"},"content":"     * @param tasks      An array of Task objects to search through.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskPrefix The prefix to search for in the task descriptions.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasdaijh"},"content":"     * @param taskCount  The total number of tasks in the list.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskFind(Task[] tasks, String taskPrefix, int taskCount) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasdaijh"},"content":"        int matchTaskCount \u003d 1;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasdaijh"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasdaijh"},"content":"            if (tasks[i].toString().contains(taskPrefix)) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasdaijh"},"content":"                System.out.println(matchTaskCount + \".\" + tasks[i].toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasdaijh"},"content":"                matchTaskCount++;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task\u0027s priority has been upgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was upgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskUpgraded(Task task) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"OK, I\u0027ve upgraded this task:\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays a message confirming that a task\u0027s priority has been downgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasdaijh"},"content":"     * @param task The task that was downgraded.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasdaijh"},"content":"    public void showTaskDowngraded(Task task) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(\"OK, I\u0027ve downgraded this task:\");","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasdaijh"},"content":"     * @param message The error message to display.","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasdaijh"},"content":"    public void showErrorMessage(String message) {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(message);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasdaijh"},"content":"        System.out.println(LINE);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":159}},{"path":"src/main/java/nicholas/ui/UserCommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas.ui;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import java.io.IOException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import java.util.List;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.EmptyCommandException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.exception.NotTaskException;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.TaskList;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Todo;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"/**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":" * The UserCommandHandler class is responsible for processing user commands,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":" * handling the interaction with the UI, managing the task list, and updating","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":" * the storage file. It processes various commands such as marking/unmarking tasks,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":" * listing tasks, adding tasks, and handling errors.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":" */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"public class UserCommandHandler {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    private Ui ui;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    private Storage storage;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"    private Parser parser;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    private TaskList taskList;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"     * Constructs a UserCommandHandler instance, initializing the UI, storage,","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"     * parser, and task list. It also loads the tasks from the storage file.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"    public UserCommandHandler() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"        storage \u003d new Storage(\"tasks.txt\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"        // Load tasks from file","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"        try {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"            List\u003cTask\u003e loadedTasks \u003d storage.loadTasks();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"            for (Task task : loadedTasks) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"                taskList.addTask(task);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"            }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"            ui.showErrorMessage(\"Error: The task file was not found.\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"nicholasdaijh"},"content":"     * Processes a user input command by calling the appropriate handler method","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"nicholasdaijh"},"content":"     * based on the given command.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command after parsing","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the command string (e.g., \"mark\", \"unmark\", \"list\")","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws NotTaskException if the command is not recognized","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing required arguments","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"nicholasdaijh"},"content":"    public void processUserCommand(","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws NotTaskException, EmptyCommandException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"nicholasdaijh"},"content":"        switch (command) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"nicholasdaijh"},"content":"        case \"mark\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"nicholasdaijh"},"content":"            handleMarkCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"nicholasdaijh"},"content":"        case \"unmark\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"nicholasdaijh"},"content":"            handleUnmarkCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"nicholasdaijh"},"content":"        case \"list\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"nicholasdaijh"},"content":"            handleListCommand();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"nicholasdaijh"},"content":"        case \"delete\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"nicholasdaijh"},"content":"            handleDeleteCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"nicholasdaijh"},"content":"        case \"find\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"nicholasdaijh"},"content":"            handleFindCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"nicholasdaijh"},"content":"        case \"upgrade\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"nicholasdaijh"},"content":"            handleUpgradePriorityCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"nicholasdaijh"},"content":"        case \"downgrade\":","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"nicholasdaijh"},"content":"            handleDowngradePriorityCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"nicholasdaijh"},"content":"        case \"todo\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"nicholasdaijh"},"content":"            handleTodoCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"nicholasdaijh"},"content":"        case \"deadline\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"nicholasdaijh"},"content":"            handleDeadlineCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"nicholasdaijh"},"content":"        case \"event\":","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"nicholasdaijh"},"content":"            handleEventCommand(userInput, commandParts, command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"nicholasdaijh"},"content":"            break;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"nicholasdaijh"},"content":"        default:","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"nicholasdaijh"},"content":"            throw new NotTaskException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the greeting message from the UI.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"nicholasdaijh"},"content":"    public void getGreeting() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showGreeting();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the exit message from the UI.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"nicholasdaijh"},"content":"    public void getExitMessage() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showBye();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"nicholasdaijh"},"content":"     * Parses the user input into command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"nicholasdaijh"},"content":"     * @return an array of strings representing the command and its arguments","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"nicholasdaijh"},"content":"    public String[] getCommandParts(String userInput) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"nicholasdaijh"},"content":"        return parser.parseCommand(userInput);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"nicholasdaijh"},"content":"     * Extracts the command from the command parts.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"nicholasdaijh"},"content":"     * @return the command as a string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"nicholasdaijh"},"content":"    public String getCommand(String[] commandParts) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"nicholasdaijh"},"content":"        return commandParts[0].toLowerCase();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"mark\" command to mark a task as done.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"mark\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing task index","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleMarkCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 4;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"nicholasdaijh"},"content":"        int markIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.markTaskAsDone(markIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskMarked(taskList.getTasks().get(markIndex));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"unmark\" command to mark a task as undone.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"unmark\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing task index","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleUnmarkCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 6;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"nicholasdaijh"},"content":"        int unmarkIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.markTaskAsUndone(unmarkIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskUnmarked(taskList.getTasks().get(unmarkIndex));","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleListCommand() {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskList(taskList.getTasks().toArray(new Task[0]), taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"delete\" command to delete a task from the task list.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"delete\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing task index","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleDeleteCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 6;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"nicholasdaijh"},"content":"        int deleteIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToDelete \u003d taskList.getTasks().get(deleteIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.deleteTask(deleteIndex);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskDeleted(taskToDelete, taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"find\" command to search tasks based on the provided keyword.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"find\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing search keyword","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleFindCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 4;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskFind(taskList.getTasks().toArray(new Task[0]), commandParts[1], taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"upgrade\" command to increase the priority of a specified task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"upgrade\" command string","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":224,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing the task index","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":225,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":226,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleUpgradePriorityCommand(","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":227,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":228,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 7;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":229,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":230,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":231,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":232,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":233,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":234,"author":{"gitId":"nicholasdaijh"},"content":"        int upgradeIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":235,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToUpgrade \u003d taskList.getTasks().get(upgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":236,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.upgradeTask(upgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":237,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskUpgraded(taskToUpgrade);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":238,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":239,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":240,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":241,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"downgrade\" command to decrease the priority of a specified task.","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":242,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":243,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":244,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":245,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"downgrade\" command string","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":246,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing the task index","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":247,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":248,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleDowngradePriorityCommand(","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":249,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":250,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 9;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":251,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":252,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":253,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":254,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":255,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":256,"author":{"gitId":"nicholasdaijh"},"content":"        int downgradeIndex \u003d Integer.parseInt(commandParts[1]) - 1;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":257,"author":{"gitId":"nicholasdaijh"},"content":"        Task taskToDowngrade \u003d taskList.getTasks().get(downgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":258,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.downgradeTask(downgradeIndex);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":259,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskDowngraded(taskToDowngrade);","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":260,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":261,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":262,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":263,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"todo\" command to add a new Todo task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":264,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":265,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":266,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":267,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"todo\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":268,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing the task description","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":269,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":270,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleTodoCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":271,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":272,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 4;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":273,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":274,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":275,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":276,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":277,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":278,"author":{"gitId":"nicholasdaijh"},"content":"        String todoDescription \u003d commandParts[1].trim();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":279,"author":{"gitId":"nicholasdaijh"},"content":"        Task todoTask \u003d new Todo(todoDescription);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":280,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(todoTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":281,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskAdded(todoTask, taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":282,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":283,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":284,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":285,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"deadline\" command to add a new Deadline task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":286,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":287,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":288,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":289,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"deadline\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":290,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing required deadline details","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":291,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":292,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleDeadlineCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":293,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":294,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 8;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":295,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":296,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].split(\"/by\")[0].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":297,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":298,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":299,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":300,"author":{"gitId":"nicholasdaijh"},"content":"        Task deadlineTask \u003d parser.parseDeadline(commandParts[1]);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":301,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(deadlineTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":302,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskAdded(deadlineTask, taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":303,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":304,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":305,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":306,"author":{"gitId":"nicholasdaijh"},"content":"     * Handles the \"event\" command to add a new Event task.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":307,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":308,"author":{"gitId":"nicholasdaijh"},"content":"     * @param userInput the raw input from the user","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":309,"author":{"gitId":"nicholasdaijh"},"content":"     * @param commandParts the parts of the command","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":310,"author":{"gitId":"nicholasdaijh"},"content":"     * @param command the \"event\" command string","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":311,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws EmptyCommandException if the command is missing required event details","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":312,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":313,"author":{"gitId":"nicholasdaijh"},"content":"    public void handleEventCommand(","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":314,"author":{"gitId":"nicholasdaijh"},"content":"            String userInput, String[] commandParts, String command) throws EmptyCommandException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":315,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isInputLengthEqualToCommandLength \u003d userInput.length() \u003d\u003d 5;","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":316,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isWrongCommandPartsLength \u003d commandParts.length \u003c 2;","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":317,"author":{"gitId":"nicholasdaijh"},"content":"        boolean isEmptyCommand \u003d commandParts[1].split(\"/from\")[0].trim().isEmpty();","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":318,"author":{"gitId":"nicholasdaijh"},"content":"        if (isInputLengthEqualToCommandLength || isWrongCommandPartsLength || isEmptyCommand) {","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":319,"author":{"gitId":"nicholasdaijh"},"content":"            throw new EmptyCommandException(command);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":320,"author":{"gitId":"nicholasdaijh"},"content":"        }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":321,"author":{"gitId":"nicholasdaijh"},"content":"        Task eventTask \u003d parser.parseEvent(commandParts[1]);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":322,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(eventTask);","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":323,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showTaskAdded(eventTask, taskList.size());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":324,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":325,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":326,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":327,"author":{"gitId":"nicholasdaijh"},"content":"     * Displays an error message in the UI.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":328,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":329,"author":{"gitId":"nicholasdaijh"},"content":"     * @param e the exception whose message will be displayed","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":330,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":331,"author":{"gitId":"nicholasdaijh"},"content":"    public void showErrorMessage(Exception e) {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":332,"author":{"gitId":"nicholasdaijh"},"content":"        ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":333,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":334,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":335,"author":{"gitId":"nicholasdaijh"},"content":"    /**","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":336,"author":{"gitId":"nicholasdaijh"},"content":"     * Updates the storage file by saving the current task list to the file.","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":337,"author":{"gitId":"nicholasdaijh"},"content":"     *","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":338,"author":{"gitId":"nicholasdaijh"},"content":"     * @throws IOException if an error occurs while saving to the storage file","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":339,"author":{"gitId":"nicholasdaijh"},"content":"     */","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":340,"author":{"gitId":"nicholasdaijh"},"content":"    public void updateStorage() throws IOException {","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":341,"author":{"gitId":"nicholasdaijh"},"content":"        storage.emptyFile(\"tasks.txt\");","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":342,"author":{"gitId":"nicholasdaijh"},"content":"        storage.saveTasks(taskList.getTasks());","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":343,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":344,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-16","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":344}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"         maxHeight\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"         maxWidth\u003d\"1.7976931348623157E308\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"         prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"         type\u003d\"javafx.scene.layout.HBox\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"         xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"/\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"            minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"            prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"            xmlns\u003d\"http://javafx.com/javafx/17\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"            fx:controller\u003d\"nicholas.gui.MainWindow\"\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cTextField fx:id\u003d\"userInput\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"                   layoutY\u003d\"558.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"                   onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"                   prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"                   prefWidth\u003d\"324.0\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cButton fx:id\u003d\"sendButton\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"                layoutX\u003d\"324.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"                layoutY\u003d\"558.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"                mnemonicParsing\u003d\"false\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"                onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"                prefHeight\u003d\"41.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"                prefWidth\u003d\"76.0\"","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"                text\u003d\"Send\" /\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"                    hbarPolicy\u003d\"NEVER\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"                    hvalue\u003d\"1.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"                    prefHeight\u003d\"557.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"                    prefWidth\u003d\"400.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"nicholasdaijh"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"nicholasdaijh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"nicholasdaijh"},"content":"                      prefHeight\u003d\"552.0\"","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"nicholasdaijh"},"content":"                      prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2025-02-16","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"nicholasdaijh"},"content":"            \u003c/content\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"nicholasdaijh"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"nicholasdaijh"},"content":"    \u003c/children\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"nicholasdaijh"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2025-02-09","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-16","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":44}},{"path":"src/test/java/nicholas/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.ui.Parser;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Deadline;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Event;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Task;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Todo;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"public class ParserTest {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"    @Test","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"    void testParseCommand() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"        String[] commandParts \u003d parser.parseCommand(\"mark 12\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(commandParts[0], \"mark\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(commandParts[1], \"12\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"    @Test","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"    void testParseTask() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"        Task eventTask \u003d parser.parseTask(\"[E][ ] something (from: Oct 10 2002 1600 to: Oct 11 2002 1600)\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"        Task todoTask \u003d parser.parseTask(\"[T][ ] read books\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"        Task deadlineTask \u003d parser.parseTask(\"[D][ ] assignment (by: Oct 12 2002 1500)\");","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(new Event(\"something\", \"2002-10-10 1600\", \"2002-10-11 1600\").toString(), eventTask.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(new Todo(\"read books\").toString(), todoTask.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(new Deadline(\"assignment\", \"2002-10-12 1500\").toString(), deadlineTask.toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":35}},{"path":"src/test/java/nicholas/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"package nicholas;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.TaskList;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"import nicholas.tasks.Todo;","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"public class TaskListTest {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"    @Test","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"    void testAddTask() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"nicholasdaijh"},"content":"        // Add a ToDo task","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"nicholasdaijh"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(new Todo(\"read books\"));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(new Todo(\"read books\").toString(), taskList.getTasks().get(0).toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"nicholasdaijh"},"content":"","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"nicholasdaijh"},"content":"    @Test","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"nicholasdaijh"},"content":"    void testDeleteTask() {","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"nicholasdaijh"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(new Todo(\"read books\"));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.addTask(new Todo(\"borrow books\"));","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"nicholasdaijh"},"content":"        assertEquals(new Todo(\"read books\").toString(), taskList.getTasks().get(0).toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"nicholasdaijh"},"content":"        taskList.deleteTask(0);","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"nicholasdaijh"},"content":"        assertNotEquals(new Todo(\"read books\").toString(), taskList.getTasks().get(0).toString());","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"nicholasdaijh"},"content":"    }","lastModifiedDate":"2025-02-01","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"nicholasdaijh"},"content":"}","lastModifiedDate":"2025-02-01","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":29}},{"path":"tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"[E][ ] partying (Priority: MEDIUM) (from: Oct 10 2010 1000 to: Oct 10 2010 1200)","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"[T][X] read books (Priority: HIGH)","lastModifiedDate":"2025-02-17","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"[D][ ] homework (Priority: HIGH) (by: Oct 10 2020 1000)","lastModifiedDate":"2025-02-17","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasdaijh"},"content":"todo read book","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"nicholasdaijh"},"content":"event project meeting /from Mon 2pm /to Mon 4pm","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"nicholasdaijh"},"content":"deadline submit report /by Friday","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"nicholasdaijh"},"content":"todo","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"nicholasdaijh"},"content":"event","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"nicholasdaijh"},"content":"deadline","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"nicholasdaijh"},"content":"blah","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"nicholasdaijh"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"nicholasdaijh"},"content":"mark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"nicholasdaijh"},"content":"unmark 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"nicholasdaijh"},"content":"delete 2","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"nicholasdaijh"},"content":"list","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"nicholasdaijh"},"content":"bye","lastModifiedDate":"2025-01-24","isFullCredit":false}],"authorContributionMap":{"nicholasdaijh":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"nicholasdaijh"},"content":"java -classpath ../bin Nicholas \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2025-01-24","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25","isFullCredit":false}],"authorContributionMap":{"-":37,"nicholasdaijh":1}}]
